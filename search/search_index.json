{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SeaWolf VIII Documentation","text":"<p>Documentation for AquaPack Robotics' SeaWolf VIII.</p> <p>SeaWolf VIII is designed to compete in the RoboSub competition each year. SeaWolf VIII is AquaPack Robotic's 8th robot (competing 2020-present).</p> <p></p>"},{"location":"electrical/parts/","title":"Parts List / Bill of Materials","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p> <p>TODO: Links and part numbers for commonly used parts</p> <p>TODO: Link to full BOM spreadsheet</p>"},{"location":"electrical/repos/","title":"Repository List","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p>"},{"location":"electrical/standards/","title":"Standards","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p>"},{"location":"electrical/standards/#connectors","title":"Connectors","text":"<p>Waterproof (external) Connections</p> <ul> <li>Wire to Endcap (detachable): Fischers</li> <li>Wire to Endcap (not detachable): BlueRobotics penetrators (wetlink penetrators should be preferred over potted penetrators)</li> <li>Wire to Wire: Either use an epoxy filled block or waterproof heatshrink </li> </ul> <p>Signal &amp; Low Current:</p> <ul> <li>Wire to Wire: JST SM</li> <li>Wire to Board: Molex KK 254</li> <li>Fallback (either): DuPont (use only when JST-SM or Molex KK 254 are not viable, recommended only for prototyping)</li> </ul> <p>Higher Current</p> <ul> <li>Wire to Wire or Wire to Board: Powerpole (PP15-45 series)</li> <li>Wire to Wire: XT90 (use these only for connections directly to battery or where current larger than 45A is required)</li> <li>Wire to Screw Terminal: Heat shrink ring connectors</li> </ul>"},{"location":"electrical/standards/#dupont-connectors","title":"DuPont Connectors","text":"<ul> <li>Wire to wire</li> <li>Wire to board when paired with standard 2.54mm pin headers</li> <li>Intended for signals not power (2A max per pin)</li> <li>Cheap and easy to get (kits easily found on Amazon)</li> <li>Moderately difficult to crimp</li> <li>Not keyed</li> <li>Male pins are easy to bend / break both when connected and when not connected</li> <li>Pair well with standard 2.54mm pin headers</li> <li>Work with breadboards</li> <li>Housings in two-row configurations are sold</li> </ul>"},{"location":"electrical/standards/#molex-kk-254-connectors","title":"Molex KK 254 Connectors","text":"<ul> <li>Wire to board</li> <li>Intended for signals (4A max per pin, less depending on crimp pin selection)</li> <li>More expensive than DuPont connectors (but better)</li> <li>No kits sold, must buy individually from digikey / mouser</li> <li>Moderately difficult to crimp</li> <li>Keyed</li> <li>Male pins always on board. Only female crimps for wire.</li> <li>2.54mm pin pitch, so compatible with DuPont connectors and standard pin headers if necessary</li> <li>Housings only in one-row configurations</li> </ul>"},{"location":"electrical/standards/#jst-sm-connectors","title":"JST SM Connectors","text":"<ul> <li>Wire to Wire</li> <li>Intended for signals (2A max per pin)</li> <li>Can find in kits on Amazon (harder to find than DuPont, but possible)</li> <li>Moderately difficult to crimp</li> <li>Keyed</li> <li>Latching</li> <li>Protected male pins (both when connected and not connected)</li> <li>Housings only in one-row configurations</li> </ul>"},{"location":"electrical/standards/#anderson-power-powerpole-connectors-pp15-45-series","title":"Anderson Power Powerpole Connectors (PP15-45 series)","text":"<ul> <li>Wire to Wire or Wire to Board</li> <li>Intended for power (15, 30, 45 A)</li> <li>Expensive</li> <li>Easy to crimp</li> <li>Keyed</li> <li>Same housing / pin used on both sides of connection</li> <li>Custom configurations possible (custom size and key of connector block)</li> <li>Recommended for wire from 20 to 10 AWG</li> </ul>"},{"location":"electrical/standards/#xt90-connectors","title":"XT90 Connectors","text":"<p>Note that XT60 connectors are rarely used, but are generally the same idea (just lower current rating). XT60 connectors are only used on the battery chargers and should not be used on the robot itself.</p> <p></p> <ul> <li>Wire to Wire</li> <li>Wire to Board may be possible, but not recommended.</li> <li>Soldered not crimped</li> <li>Somewhat difficult to solder (generally requires heatsink and large iron tip)</li> <li>Robust connectors</li> <li>Work well with larger gauge wire only (14-10 AWG)</li> </ul>"},{"location":"electrical/standards/#heat-shrink-ring-connectors","title":"Heat Shrink Ring Connectors","text":"<p>Note: There are variants of these sold that are \"U\" shaped (not a closed ring). These are not to be used on the robot as they easily come loose.</p> <p></p> <ul> <li>Wire to screw terminal</li> <li>Can be used wire to wire with a loose screw &amp; nut, but not recommended.</li> <li>Easy to crimp</li> <li>Generally can handle the same current as any wire that can fit inside them</li> </ul>"},{"location":"electrical/standards/#pcb-headers","title":"PCB Headers","text":"<ul> <li>Standard 2.54mm headers (right angle and vertical)</li> <li>KK 254 headers (right angle and vertical)</li> <li>Powerpole headers (right angle and vertical)</li> </ul>"},{"location":"electrical/standards/#electronic-assembly","title":"Electronic Assembly","text":"<ul> <li>PCBs</li> <li>Protoboard</li> <li>Breadboard (avoid on robot, if necessary hot glue EVERYTHING)</li> </ul>"},{"location":"electrical/standards/#microcontrollers","title":"Microcontrollers","text":"<p>Custom boards integrating microcontrollers should use TI's MSP430 series of MCUs. This family of microcontrollers integrates the required features and are generally powerful enough for our use cases. Additionally, NCSU's ECE department has an embedded systems course built around these microcontrollers, thus it helps align club operation with coursework.</p> <p>If there is no compelling reason not to, TI's MSP430FR2355 is recommended. This chip integrates almost any peripheral that would be required, has many serial communication interfaces, and has more GPIO pins than would typically be used. The LQFT-48 package version of this chip is easy enough to hand solder as well.</p> <p>If there is a compelling reason to select a different MSP430, this is permissable, however it should be attempted to use a chip that can be more easily hand soldered. Avoid QFN and BGA packages (or anything else with pads contained under the chip).</p> <p>In cases where an MSP430 does not provide sufficient power for what is being designed, it is recommended to use an Arm architecture microcontroller. There are many vendors of these on the market (not a complete list):</p> <ul> <li>TI's MSP432 series</li> <li>TI's MSP-M0 series</li> <li>Microchip's SAM series</li> <li>ST Microelectronics STM32 chips</li> <li>Raspberry Pi RP2040</li> <li>Many NXP Semiconductors chips</li> </ul> <p>When choosing a chip, make sure to also research the cost of a debug probe. For example, the STM32 series are compatible with low cost ST-Link debug probes.</p>"},{"location":"electrical/standards/#fpgas","title":"FPGAs","text":"<p>FPGAs supported by Vivado are preferred.</p>"},{"location":"electrical/standards/#ic-packages","title":"IC Packages","text":"<p>Integrated circuits used on our boards should be hand solderable. Avoid QFN and BGA packages (or anything else with pads contained under the chip). This can be violated if absolutely necessary, however make sure there is an assembly plan.</p>"},{"location":"electrical/boards/acoustics_dist/","title":"Acoustics Distribution Board","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p>"},{"location":"electrical/boards/acoustics_single_chan/","title":"Acoustics Single Channel Board","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p>"},{"location":"electrical/boards/controlboard/","title":"Control Board","text":"<p>The control board is responsible for handling robot motion using thrusters. It generates PWM control signals for the robot's ESCs and provides a control interface to the computer via USB.</p> <p>However, the control board is much more complex than a PWM signal generator with a USB interface. The control board is a motion coprocessor intended to be used by the computer to control the robot's motion.</p> <p>The control board uses sensors (integrated IMU and external depth sensor) to control the robot's motion in a variety of high-level (abstracted) forms. This allows the computer / mission code to describe a desired motion in a high-level sense and the control board will handle everything required to make it happen.</p> <p>This is beneficial for a few reasons</p> <ul> <li>The control board performs the required math and runs the control loops required to maintain robot stability / desired motion. This reduces the required CPU time on the main computer, leaving more processing time for vision and machine learning algorithms.</li> <li>The control board is able to generate PWM signals using hardware. Most single board computers would use software to generate PWM signals. This would work poorly for thrusters (due to required pulse widths and number of thrusters). While other solutions to this exists (such as I2C PWM drivers), the other benefits of control board make it a better solution.</li> <li>The control board is better able to communicate with sensors and process sensor data, as well as perform time critical tasks (beneficial to control loop stability). This is due to the control board using a microcontroller and firmware based on an RTOS (eliminating the overhead and scheduling uncertainty introduced by a higher level operating system).</li> <li>Mission code can use high level descriptions of robot motion. This increases code portability between robots or to a simulator.</li> </ul> <p>The control board is a \"third party\" project. It was designed by a club member (Marcus Behel) in 2022/2023 with the intent of being used on SeaWolf VIII. It is located on Marcus's github and is primarily maintained by Marcus. The code and design are open source.</p>"},{"location":"electrical/boards/controlboard/#pinout","title":"Pinout","text":"<p>There are two versions of control board built around two different microcontrollers. The pinout for each is shown below.</p>"},{"location":"electrical/boards/controlboard/#control-board-v1","title":"Control Board v1","text":"<p>Note: The pressure / temp sensor is not included anymore.</p> <p></p>"},{"location":"electrical/boards/controlboard/#control-board-v2","title":"Control Board v2","text":""},{"location":"electrical/boards/controlboard/#control-board-docs","title":"Control Board Docs","text":"<p>More information about the control board can be found here</p>"},{"location":"electrical/boards/lbb/","title":"Load Balancing Board (LBB)","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p>"},{"location":"electrical/boards/meb/","title":"Main Electronics Board (MEB)","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p>"},{"location":"electrical/boards/msb/","title":"Manipulation Systems Board (MSB)","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p>"},{"location":"electrical/connectors/crimping/","title":"Crimped Connectors","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p>"},{"location":"electrical/connectors/crimping/#dupont-connectors","title":"DuPont Connectors","text":""},{"location":"electrical/connectors/crimping/#tools","title":"Tools","text":"<p>Recommended: IWISS / iCrimp SN-025 Crimper:</p> <p>This crimper will crimp both the insulation and the conductor portions at once. Unlike the more common SN-28B crimpers, these will crimp the insulation properly (rounded shape, not an \"m\" shape).</p> <p>Note that for smaller wires (28 AWG and smaller) this may not crimp the conductor portion properly. Thus, you may need to use needle nose pliers to press the conductor tabs down further.</p> <p></p> <p>Alternate: SN-28B Crimper:</p> <p>Similar to the SN-025 crimpers (and much more common), however they do not crimp the insulation portion properly. Thus, you will likely need to use needle nose pliers to \"round out\" the insulation crimp for the pin to fit in the housing.</p> <p></p> <p>Alternate: PA-20 Crimper</p> <p>This tool crimps only one portion (conductor or insulation) at a time, however is sometimes easier to use because of that. This tool is an \"m\" shaped crimp, thus it will not quite crimp the insulation part correctly, however if you do not press down fully on that part it is usually good enough.</p> <p></p>"},{"location":"electrical/connectors/crimping/#crimping-process","title":"Crimping Process","text":"<p>TODO</p>"},{"location":"electrical/connectors/crimping/#molex-kk-254-connectors","title":"Molex KK 254 Connectors","text":""},{"location":"electrical/connectors/crimping/#tools_1","title":"Tools","text":""},{"location":"electrical/connectors/crimping/#crimping-process_1","title":"Crimping Process","text":"<p>TODO</p>"},{"location":"electrical/connectors/crimping/#jst-sm-connectors","title":"JST SM Connectors","text":"<p>These connectors are keyed wire to wire connectors. Additionally, they latch into place when connected and are resistant to bending of male pins (both when connected and when not connected).</p> <p></p>"},{"location":"electrical/connectors/crimping/#tools_2","title":"Tools","text":"<p>Note: Information in this section is speculative and not yet verified.</p> <p>A crimp tool making an \"m\" shaped crimp is required. The PA-20 crimper is used for this. It can be used for both the insulation and the conductor crimp portions.</p> <p></p>"},{"location":"electrical/connectors/crimping/#crimping-process_2","title":"Crimping Process","text":"<p>TODO</p>"},{"location":"electrical/connectors/crimping/#powerpole-connectors-pp15-45","title":"Powerpole Connectors (PP15-45)","text":""},{"location":"electrical/connectors/crimping/#tools_3","title":"Tools","text":"<p>The TRIcrimp Powerpole crimp tool should be used. These are reasonably priced and are easily the best Powerpole crimp tool.</p> <p></p>"},{"location":"electrical/connectors/crimping/#crimping-process_3","title":"Crimping Process","text":"<p>TODO</p>"},{"location":"electrical/connectors/crimping/#heatshrink-ring-connectors","title":"Heatshrink Ring Connectors","text":""},{"location":"electrical/connectors/crimping/#tools_4","title":"Tools","text":"<p>TODO</p>"},{"location":"electrical/connectors/crimping/#crimping-process_4","title":"Crimping Process","text":"<p>TODO</p>"},{"location":"electrical/connectors/fischers/","title":"Fischers","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p>"},{"location":"electrical/connectors/soldering/","title":"Soldered Connectors","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p>"},{"location":"electrical/connectors/soldering/#xt90-connectors","title":"XT90 Connectors","text":"<p>TODO</p>"},{"location":"electrical/connectors/waterproof_splice/","title":"Waterproof Splicing","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p> <ul> <li>Adhesive heatshrink method</li> <li>Epoxy block method</li> </ul>"},{"location":"electrical/legacy/acoustics/","title":"Acoustics System","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p> <ul> <li>Picoscope based approach description</li> <li>Why the change</li> </ul>"},{"location":"electrical/legacy/boards/","title":"Boards","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p> <ul> <li>Aux board (integrated into MEB 1.2)</li> <li>Optoisolator board</li> <li>Monolithic acoustics board</li> <li>Camera PCB</li> </ul>"},{"location":"electrical/legacy/cameras/","title":"Cameras","text":""},{"location":"electrical/legacy/cameras/#intel-realsense-hd","title":"Intel RealSense HD","text":"<p>These cameras use a custom enclosure designed to fit an Intel RealSense Depth Camera (435i).</p> <p></p> <p></p> <p></p>"},{"location":"electrical/legacy/cameras/#connection-information","title":"Connection Information","text":"<ul> <li>These cameras will work with only USB 2.0<ul> <li>Full operation of the camera (some framerates / resolutions) require USB3</li> <li>Limited to 720p @ 6FPS (yes 6 not 60) and 480p @ 30 FPS when using USB2</li> <li>IMU and depth data may not work with USB 2</li> </ul> </li> <li>Each camera could require up to 700mA current at 5V depending on the configuration<ul> <li>In practice, it is unlikely that this would be used since only the RGB camrea is used</li> </ul> </li> <li>Note that the depth data does not work underwater (we tried, it does not work)</li> </ul>"},{"location":"electrical/legacy/cameras/#usb-c-to-dupont-connector","title":"USB-C to Dupont Connector","text":"<p>This connector is used inside the camera hull to connect the camera (USB-C either 2.0 or 3.0) to the cable penetrated into the hull by dupont connectors.</p> <p>These camera enclosures do not make this part of wiring easy. In fact, this is a large part of why these were moved away from.</p> <p>These cameras are wired using USB C breakout boards such as these. If using USB 3 make sure to get a breakout with 8 pads. If the breakout only has 4 pads, it is USB 2.</p> <p> </p> <p>Note that the purchased breakouts are too long to fit in the enclosure. Thus the PCBs were sanded to make them fit (yes the pcb was sanded down using sand paper). They should be sanded right up to (but not touching) the metal pads.</p> <p> </p> <p>Then, solder wires  onto the pads backwards. Soldering backwards ensures the wires will not hang off the edge where the size is constrained.</p> <p> </p> <p>Then, to prevent shorting on the edge of the camera hull it is critical to use hot glue to cover exposed conductors. When doing so, be careful to not get much / any on the edge of the PCB as this would add width to what was just sanded down.</p> <p> </p> <p>Finally, crimp dupont pins (male) on each wire and assembe in an 4x2 housing as shown below.</p> <p></p> USB C Pin (Breakout Pin) USB A 3.0 Pin Standard Wire Color GND (A1) GND Black VBUS (B1) VBUS / VCC Red RX1- (B10) TX1- (StdA_SSTX-) Purple RX1+ (B11) TX1+ (StdA_SSTX+) Orange D- (A7) D- White D+ (A6) D+ Green TX1- (A3) RX1- (StdA_SSRX-) Blue TX1+ (A2) RX1+ (StdA_SSTX+) Yellow <p>Note: On USB-A 3.0 let GND DRAIN float.</p> <p>Notice that USB 3.0 TX and RX are CROSSED! The TX and RX lines should be crossed in the cable. Do this in the dupont connector.</p>"},{"location":"electrical/legacy/cameras/#penetrated-wire","title":"Penetrated Wire","text":"<p>A wire should be penetrated (using BlueRobotics penetrator) into the camera hull. This should be an 8-pin wire with shielded pairs for the USB 3 differential pairs (RX and TX Super Speed pairs).</p> <p>The wire used for this is Igus CFBUS.PUR.068</p> <p>The wire is penetrated into the hull and female Dupont connectors installed. These are kept in two groups to allow removal through the penetrator's hole if needed. Note that these should be assembled to connect the wires to the breakout's dupont based on the table shown in the previous section. Note that this pinout is used to cross the TX and RX pairs as required.</p> <p></p> <p>This wire is connected to the main hull (by penetrator or fischer) and a USB A wire connected to the other side to go to the computer. Note that a USB 3.0 cable (type A connector) must be used on the inside of the main hull if USB3.0 is used. Otherwise, a USB 2.0 can be used by connecting the power and D+/D- wires (no TX/RX). The colors of the USB A cable will match the colors of the Igus cable (since TX and RX were crossed inside the camera hull's dupont).</p>"},{"location":"electrical/legacy/cameras/#custom-camera-pcb","title":"Custom Camera PCB","text":"<p>An attempt was made to design a custom camera PCB to replace the breakouts that must be sanded down. However, these are difficult to assemble (even with reflow process) and the one that we believe to have been assembled properly does not work well (we get a few frames, then the video feed drops). As such, these have been deemed not viable and should not be used.</p>"},{"location":"electrical/legacy/cameras/#alternatives-to-sanding-the-breakout","title":"Alternatives to Sanding the Breakout","text":"<p>The following were considered:</p> <ul> <li>Custom camera PCB (do not use)</li> <li>90 degree cables (too large to fit)</li> <li>Right angle USB-C ribbon cable (can purchase online; never tested)</li> </ul>"},{"location":"electrical/legacy/cameras/#really-old-sw7sw6-cameras","title":"Really Old (SW7/SW6) Cameras","text":"<p>These cameras were used for a short time on SW8, however are not in good condition and do not work well.</p> <p>These are built using the internals from a Microsoft Lifecam Cinema (originally released in 2009). </p> <p></p>"},{"location":"electrical/legacy/cameras/#assembly","title":"Assembly","text":"<p>The cameras must be disassembled and the two internal boards removed. Note that the disassembly process is destructive and seems to require cutting metal using flush cuts. The internal cable uses a connector to one of these boards. It should be cut short and soldered to the fischer receptacle on the back of the camera hull. </p> <p> </p> <p>Note that the cameras use 104 fischer receptacles, however when used on SW8 they were connected to a 103 fischer receptacle (both 4 pin). A custom cable was used for this (fischers on both ends; cable diameter must fit both 103 and 104 plugs). Additionally, note that the camera pinout does not match what used to be used for USB 2 pinout on SW8. Thus, the cable \"crossed\" some signals. If ever reassembling these cameras, it is recommended to redo the pinout on both ends.</p>"},{"location":"electrical/legacy/controlsys/","title":"Control System","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p> <ul> <li>Cube orange / pixhawk with Ardupilot / Ardusub firmware</li> <li>Why the change</li> </ul>"},{"location":"electrical/legacy/powersys/","title":"Power System","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p> <ul> <li>Low side switching, optoisolator motivation, different regulators</li> <li>Why the change</li> </ul>"},{"location":"electrical/software/kicad/","title":"KiCad User Guide","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p> <p>This user guide is intended to be a reference, not a tutorial. There are many good KiCad tutorials available online, however please note that there are sometimes multiple ways to do things in KiCad (eg library management). In such cases, please use the methods described on this page. Part of this page's purpose is to describe our conventions / approaches to using KiCad.</p> <p>Note that this guide was written for KiCad 7.0.1</p>"},{"location":"electrical/software/kicad/#installation","title":"Installation","text":"<p>See the Software Overview page for download links and required version information (if any).</p>"},{"location":"electrical/software/kicad/#windows","title":"Windows","text":"<ul> <li>Download the installer (<code>exe</code> file)</li> <li>Run the installer. It will require administrative privileges.</li> <li>Follow the instructions of the installer. Default settings / options are sufficient.</li> <li>Install SWLib (see instructions in following section) after the installation completes.</li> </ul>"},{"location":"electrical/software/kicad/#macos","title":"macOS","text":"<ul> <li>Download the <code>dmg</code> file</li> <li>Open the dmg disk image</li> <li>Drag the <code>KiCad</code> folder to <code>Applications</code> as indicated by the arrow</li> <li>Wait for the copy operation to complete</li> <li>KiCad is now installed</li> <li>Install SWLib (see instructions in following section) after the installation completes.</li> </ul>"},{"location":"electrical/software/kicad/#linux","title":"Linux","text":"<ul> <li>Follow KiCad's Instructions. On Ubuntu this entails adding a ppa and installing the packages.</li> <li>Install SWLib (see instructions in following section) after the installation completes.</li> </ul>"},{"location":"electrical/software/kicad/#swlib","title":"SWLib","text":"<p>SWLib is a KiCad library containing symbols, footprints, and 3D models for components used on SeaWolf's boards. This library is shared among many robots (not SeaWolf VIII exclusive).</p> <p>This library must be installed once per system you install KiCad on.</p> <p>Note: you must have <code>git</code> installed to install, modify, or update SWLib!</p>"},{"location":"electrical/software/kicad/#installation_1","title":"Installation","text":"<ol> <li>Clone this repository somewhere on your system. The location does not matter. On windows, avoid putting it in OneDrive (ie don't put it in your documents folder).</li> <li>Open KiCad. Close any open project (File &gt; Close Project)</li> <li>Preferences &gt; Manage Symbol Libraries</li> <li>The first time you open this menu, you will be asked to \"Configure Global Symbol Library Table\". Choose \"Copy Default Global Symbol Table\"</li> <li>On the Global Libraries tab select the folder icon at the bottom (Add existing library to table)</li> <li>Navigate to wherever you cloned the repo. Choose the <code>SWLib.kicad_sym</code> file.</li> <li>Click OK to close the symbol library table.</li> <li>Preferences &gt; Manage Footprint Libraries</li> <li>The first time you open this menu, you will be asked to \"Configure Global Footprint Library Table\". Choose \"Copy Default Global Footprint Table\"</li> <li>On the Global Libraries tab select the folder icon at the bottom (Add existing library to table)</li> <li>Navigate to wherever you cloned the repo. Choose the <code>SWLib.pretty</code> folder.</li> </ol>"},{"location":"electrical/software/kicad/#updating","title":"Updating","text":"<ol> <li>Open a terminal or git bash in the folder you cloned the repository to.</li> <li>Run <code>git pull origin main</code></li> </ol>"},{"location":"electrical/software/kicad/#creating-new-parts","title":"Creating new Parts","text":"<p>Before creating a new part, check if it exists in one of the builtin KiCad libraries. Many parts do. You can search in the symbol editor.</p> <p>To create a new part, it is necessary to create both a symbol and footprint for the part. Symbols are used in schematics. Footprints are used on the PCB. In their simplest form, both are a collection of pins with unique numbers. On a symbol, pins are \"lines\". On a footprint, pins are \"holes\" or \"pads\" that go in / on the PCB. Pins on a symbol are associated with pins on a footprint by the pin's number. In addition to numbers, pins on a symbol can have human readable names. These are only used to show the designer what the pin is called.</p> <p>To start, create the symbol</p> <ol> <li>Open the symbol editor (in KiCad's main window)</li> <li>Select SWLib in the libraries panel on the left</li> <li>Select the new symbol button (or <code>File &gt; New Symbol...</code>)</li> <li>Name the symbol. This should typically match the name of the part you are making a symbol for.</li> <li>Optionally select an existing symbol to derive from (\"start with\")</li> <li>Change the designator if needed. See this</li> <li>Typically, units per package should be left as 1</li> <li> <p>Leave other settings unchanged</p> <p></p> </li> <li> <p>Click OK to create you symbol. It will be open in the editor.</p> </li> <li>Make sure the unit is set to \"mil\" on the left hand toolbar.</li> <li>Make sure the grid is set to 50mil (<code>View &gt; Grid Properties</code>). You can see the current grid on the bottom bar.</li> <li>Create the symbol. You can use the tools on the right toolbar to \"draw\" the symbol (lines, shapes, arcs). Draw your part centered on the origin!</li> <li>Then use the \"pin\" tool (right toolbar) to add the required number of pins. Name the pins using the names in the part's datasheet. Make sure the pin number match the part's package pin numbers. When creating pins, the \"circle\" should be facing out. THis is where wires connect to in the schematic.</li> <li>Make sure to drag the designator above the part</li> <li> <p>Save!</p> <p></p> </li> </ol> <p>After creating the symbol, determine if you need to create a footprint. KiCad's footprint libraries have a footprint for most standard packages (0603, 0805, 1206, etc for resistors, capacitors, diodes, inductors; QFP, TSSOP, SOIC, DIP, QFN, etc for ICs). Open the footprint editor and search for the package your device uses. If it exists, do not create a custom footprint. Skip to step 6. If you do need to create the footprint, follow the instructions below.</p> <ol> <li>Open the footprint editor</li> <li>Select \"SWLib\" in the left panel with all libraries</li> <li>Select <code>File &gt; New Footprint</code> to create an empty footprint. Name it the same as your part.</li> <li>Use the footprint editor to place pads and draw any desired silkscreen. Make sure the numbers of the pads match the numbers of the pins the pad should be associated with. Follow numbering convention in the part's datasheet.</li> <li> <p>Save!</p> <p></p> </li> <li> <p>Go back to your part in the Symbol editor.</p> </li> <li>Edit symbol properties (<code>File &gt; Symbol Properties...</code>)</li> <li>Click the library icon next to the footprint field (you may need to click the footprint field first).</li> <li>Select the footprint for your part</li> <li>Double check the pin number order of the footprint and schematic. This is especially important if you are using a footprint you did not make.</li> <li>Save!</li> </ol> <p>Optionally, you can add a 3D model to a footprint.</p> <ol> <li>Create or download a 3D mode. Save it as a step or stl file in <code>SW-KicadLibrary/SWLib.3d</code>. Name it the same as the part.</li> <li>Open the footprint editor and select your part.</li> <li>Edit footprint properties (<code>File &gt; Footprint Properties...</code>)</li> <li>Select the 3D models tab</li> <li>Click the plus button and type the following. Never use the browse feature to select a 3d model! Browse tool uses absolute paths, which will break the model on other people's systems.     <pre><code>../../SWLib.3d/[FILE].step\n</code></pre></li> <li>Replace <code>[FILE]</code> with the name of the step file. This is case sensitive!.</li> <li>Close the properties panel and save the footprint.</li> </ol> <p>After creating your part (and saving everything) commit your changes in the <code>SW-KicadLibrary</code> repo and push.</p>"},{"location":"electrical/software/kicad/#importing-downloaded-parts","title":"Importing Downloaded Parts","text":"<p>Many parts will have footprints and symbols (ECAD models) available for download. These often include 3D models too. Some common sources to find these models are</p> <ul> <li>SamacSys (easiest to access through mosuer; DO NOT INSTALL THE LIBRARY LOADER! DO NOT USE IT!)</li> <li>UltraLibrarian</li> <li>SnapEDA</li> </ul> <p>Note that you will need an account to use any of these services. </p> <ol> <li>When downloading a model, download symbol and footprint. If a 3D model is available, download it too.</li> <li> <p>After downloading, follow the instructions below depending on where you downloaded the model from. Note that if a 3D model was not available, the 3D model file will be missing.</p> SamacSys <p>The downloaded file will be a <code>.zip</code> file. Extract it.Locate the following three files.</p> <ul> <li>Symbol: <code>[PART]/KiCad/[PART].kicad_sym</code> (older parts may only have a <code>.lib</code> file. This works too.)</li> <li>Footprint: <code>[PART]/KiCad/[PACKAGE].kicad_mod</code></li> <li>3D Model: <code>[PART]/3D/[PART].stp</code></li> </ul> UltraLibrarian <p>The downloaded file will be a <code>.zip</code> file. Extract it.Locate the following three files.</p> <ul> <li>Symbol: <code>KiCAD/[NAME]/[NAME].lib</code></li> <li>Footprint: <code>KiCAD/[NAME]/footprints.pretty/[NAME].kicad_mod</code></li> <li>3D Model: <code>[NAME]/STEP/[NAME].step</code></li> </ul> SnapEDA <p>The downloaded file will be a <code>.zip</code> file. Extract it.Locate the following three files.</p> <ul> <li>Symbol: <code>[PART].kicad_sym</code></li> <li>Footprint: <code>[PART].kicad_mod</code></li> <li>3D Model: <code>[PART].step</code></li> </ul> </li> <li> <p>Open KiCad's symbol editor</p> </li> <li>Find SWLib in the panel on the left.</li> <li>Right click \"SWLib\" and choose \"Import Symbol...\"</li> <li>Choose the symbol file (<code>.lib</code>) described above.</li> <li>Save the symbol.</li> <li>Open the footprint editor.</li> <li>Find SWLib in the panel on the left.</li> <li>Right click \"SWLib\" and choose \"Import Footprint...\"</li> <li>Choose the footprint file (<code>.kicad_mod</code>) described above.</li> <li>Save into SWLib</li> <li>Copy the 3D model file (<code>.step</code> / <code>.stp</code> file described above) to SWLib. This must be copied to wherever you cloned SWLib. Paste the <code>.step</code> file into <code>SW-KicadLibrary/SWLib.3d</code></li> <li>In the footprint editor, edit footprint properties (<code>File &gt; Footprint Properties...</code>)</li> <li>Select the 3D models tab</li> <li>Click the plus button and type the following. Never use the browse feature to select a 3d model! Browse tool uses absolute paths, which will break the model on other people's systems.     <pre><code>../../SWLib.3d/[FILE].step\n</code></pre></li> <li>Replace <code>[FILE]</code> with the name of the step file. This is case sensitive!. Change <code>step</code> to a different suffix if the file uses a different suffix.</li> <li>Close the properties panel and save the footprint.</li> <li>Go back to the symbol editor and select the imported symbol.</li> <li>Open symbol properties (<code>File &gt; Symbol Properties...</code>)</li> <li>Click the footprint field, then select the browse button</li> <li>Choose the footprint now imported into the SWLib footprint library</li> <li>Close the symbol properties panel and save.</li> </ol> <p>After importing your part (and saving everything) commit your changes in the <code>SW-KicadLibrary</code> repo and push.</p>"},{"location":"electrical/software/kicad/#creating-a-new-project","title":"Creating a New Project","text":"<p>Make sure you have installed SWLib first!</p> <p>TODO</p>"},{"location":"electrical/software/kicad/#opening-an-existing-project","title":"Opening an Existing Project","text":"<p>Make sure you have installed SWLib first!</p> <p>TODO</p>"},{"location":"electrical/software/kicad/#design-workflow","title":"Design Workflow","text":""},{"location":"electrical/software/kicad/#schematic","title":"Schematic","text":"<p>Always use a 50mil grid in the schematic editor! If absolutely necessary, a 25mil grid can be used occasionally, but try to avoid doing so.</p> <p>TODO</p>"},{"location":"electrical/software/kicad/#electrical-rules-check","title":"Electrical Rules Check","text":"<p>TODO</p>"},{"location":"electrical/software/kicad/#assign-footprints","title":"Assign footprints","text":"<p>TODO</p>"},{"location":"electrical/software/kicad/#pcb-layout-routing","title":"PCB Layout &amp; Routing","text":"<p>TODO</p>"},{"location":"electrical/software/kicad/#design-rules-check-drc","title":"Design Rules Check (DRC)","text":"<p>TODO</p>"},{"location":"electrical/software/kicad/#tips-and-tricks","title":"Tips and Tricks","text":"<p>TODO</p>"},{"location":"electrical/software/overview/","title":"Overview","text":"<p>There are various tools and pieces of software used in relation to the electrical design of SeaWolf VIII. These are listed below</p>"},{"location":"electrical/software/overview/#pcb-design","title":"PCB Design","text":""},{"location":"electrical/software/overview/#kicad","title":"KiCad","text":"<p>Required Operating System: Windows, macOS, Linux</p> <p>Download Links: KiCad</p> <p>Used to design PCBs and schematics for various custom boards in use on SeaWolf VIII. KiCad is a free and open source Electronic Design Automation (EDA) tool which is generally easy to learn to use, but powerful enough when needed.</p> <p></p>"},{"location":"electrical/software/overview/#altium-designer","title":"Altium Designer","text":"<p>Required Operating System: Windows</p> <p>Download Links: Altium Designer (license either through university or AquaPack)</p> <p>Many SeaWolf VIII boards were originally designed using Altium Designer. Altium Designer is a proprietary EDA tool. While more commonly used in industry than KiCad, the decision was ultimately made to move to KiCad to simplify library management, reduce software learning curves, and improve operating system compatibility.</p> <p></p>"},{"location":"electrical/software/overview/#msp430-embedded-firmware","title":"MSP430 Embedded Firmware","text":"<p>Custom PCBs used on SeaWolf VIII are designed around TI's MSP430 MCUs or Launchpad development boards. The firmware for these boards is developed using one of the following tools. Note that IAR is intentionally avoided. TI's CCS is free and fully featured with no code size limit. Additionally, IAR's evaluation license only allows access to the newest version of IAR which can make project compatibility and maintenance difficult.</p>"},{"location":"electrical/software/overview/#arduino-energia","title":"Arduino / Energia","text":"<p>Required Operating System: Windows, macOS, Linux</p> <p>Download Links: Arduino IDE | MSP430 Core</p> <p>While the Energia project is officially unmaintained since November 2022, there are builds of the Energia MSP430 Arduino core located at the link above. These builds user newer tooling and fix bugs with some of the chips used. This core can be installed with the official Arduino IDE.</p> <p>Generally, this is used only during prototyping or when rapid firmware development is required.</p> <p></p>"},{"location":"electrical/software/overview/#ti-code-composer-studio-ccs","title":"TI Code Composer Studio (CCS)","text":"<p>Required Operating System: Windows, macOS, Linux</p> <p>Download Link: TI CCS | MSP430 GCC</p> <p>TI's Code Composer Studiohttps://www.ti.com/design-resources/embedded-development/ccs-development-tools.html supports the MSP430 chips using TI's compiler or a separately installed open source GCC compiler. This IDE is Eclipse based and integrates a debugger among many other tools.</p> <p></p>"},{"location":"electrical/software/overview/#circuit-simulation","title":"Circuit Simulation","text":""},{"location":"electrical/software/overview/#ltspice","title":"LTSpice","text":"<p>Required Operating System: Windows, macOS, Linux (through Wine)</p> <p>Download Link: LTSpice</p> <p>LTSpice is a free circuit simulator with builtin models for many Analog Devies / Linear Tech chips. This is generally our preferred circuit simulator as it is easy to install and use. In some cases however, models designed for PSpice (usually TI parts) are not compatible (they are either encrypted or use PSpice features that LTSpice does not have). In these cases other software is used.</p> <p></p>"},{"location":"electrical/software/overview/#pspice-for-ti","title":"PSpice for TI","text":"<p>Required Operating System: Windows</p> <p>Download Link: PSpice for TI (requires TI account and export approval)</p> <p>PSpice for TI is a limited feature version of Cadance's PSpice simulator. It is more difficult to setup, thus we generally prefer LTSpice, however there are cases where this should be used instead (when a TI model is encrypted or when a model uses PSpice features that LTSpice does not support). Note that using ADI / LT devices is often not possible in PSpice. ADI / LT typically provide encrypted LTSpice models only.</p> <p></p>"},{"location":"electrical/software/overview/#hardware-design-fpga","title":"Hardware Design (FPGA)","text":""},{"location":"electrical/software/overview/#vivado-vitis","title":"Vivado &amp; Vitis","text":"<p>Required Operating System: Windows, Linux</p> <p>Download Link: Vivado ML Edition (requires AMD account and export approval)</p> <p>Vivado is used with our Digilent Basys3 FPGA dev board used for the Acoustics system. Vivado is currently used for synthesis, implementation, and bitstreaming. Going forward we intend to explore Vivado's simulation functions too.</p> <p></p>"},{"location":"electrical/software/overview/#scientific-computing","title":"Scientific Computing","text":"<p>Generally used for mathematic modeling, validation, or simulation.</p>"},{"location":"electrical/software/overview/#matlab","title":"MATLAB","text":"<p>Required Operating System: Windows, macOS, Linux</p> <p>Download Link: Accessed through university. Follow university instructions.</p> <p>If MATLAB is available, it is generally advisable to use it over GNU Octave as MATLAB is faster and better supported.</p> <p></p>"},{"location":"electrical/software/overview/#gnu-octave","title":"GNU Octave","text":"<p>Required Operating System: Windows, macOS, Linux</p> <p>Download Link: GNU Octave</p> <p>If MATLAB is not available, GNU Octave is compatible with many MATLAB programs. GNU Octave is free and open source with many packages similar to MATLAB toolboxes as well. While generally compatible with MATLAB code, Octave does not implement all functions. In particular many more recent MATLAB \"helper\" functions (ie advanced string manipulation functions) are not implemented and require more complex sets of operations to replicate in Octave. However, most core math functions are implemented in Octave.</p> <p>Due to the few compatibility issues Octave may have, and the fact that Octave is likely slower than MATLAB, it is usually recommended to use MATLAB if a license is available.</p> <p></p>"},{"location":"electrical/software/overview/#python-3rd-party-packages","title":"Python + 3rd Party Packages","text":"<p>Required Operating System: Windows, macOS, Linux</p> <p>Download Links: Python 3 | NumPy | SciPy | Matplotlib (On Linux use distribution package manager to install python3)</p> <p>Instead of MATLAB it is sometimes preferred (personal preference, language experience, better tool for the particular job, etc) to use Python with a few third party libraries. These libraries are usually <code>numpy</code>, <code>scipy</code>, and <code>matplotlib</code> (install these packages with <code>pip</code>). These libraries can allow python to be a very useful scientific computing tool for many similar applications to how MATLAB or Octave may be used.</p>"},{"location":"electrical/software/overview/#other","title":"Other","text":""},{"location":"electrical/software/overview/#git-scm","title":"Git SCM","text":"<p>Required Operating System: Windows, macOS, Linux</p> <p>Download Link: Git SCM (On macOS install Xcode command line tools; On linux install using distribution package manager)</p> <p>Most of our PCB design files and embedded firmware source code is located in GitHub which uses git as a source control / version control tool. You will need <code>git</code> installed on your computer to use these repositories.</p>"},{"location":"electrical/software/overview/#digilent-waveforms","title":"Digilent WaveForms","text":"<p>Required Operating System: Windows, macOS, Linux</p> <p>Download Link: WaveForms | Adept Runtime (On Linux make sure to install the Adept runtime first. This is not required on Windows or macOS)</p> <p>Many members of the club have an Analog Discover 2 from coursework. WaveForms allows this to be used as an oscilloscope, logic analyzer, waveform generator, spectrum analyzer, and many more tools.</p> <p></p>"},{"location":"electrical/sysdesign/acoustics/","title":"Acoustics System","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p> <p>TODO: Acoustics system overview</p>"},{"location":"electrical/sysdesign/cameras/","title":"Cameras","text":"<p>The current Cameras used on SeaWolf VIII are based on ArduCam B0292 cameras. These camera modules connect to a computer by USB and are UVC compliant, meaning they should easily work on most operating systems.</p> <p></p> <p>Note that a specific firmware must be flashed to these cameras for them to work properly with a Jetson Nano and for them to perform well in low light. See instructions below.</p> <p>The current camera enclosures are designed to be able to house two camera modules each. This is to allow stereo vision capabilities in the future. However, for now they are assembled using a single camera module.</p> <p></p>"},{"location":"electrical/sysdesign/cameras/#camera-firmware","title":"Camera Firmware","text":"<p>When wiring a new camera, or installing a new camera in the camera hull, it is necessary to make sure it is running the correct firmware. This requires a windows PC.</p> <p>The camera firmware is flashed using a tool provided on the ArduCam forums. A zip with this flash tool and the firmware file to be flashed is located here.</p> <p>This tool is windows only. Additionally, it seems to have issues (cuts off part of the UI) on HiDPI systems. You may need to set display scaling to 100% in windows settings before running the program.</p> <p>After downloading the zip, extract it. There will be two things</p> <ul> <li>A folder named <code>CommonBurnerAP v1.0.1.4</code></li> <li>A <code>.src</code> firmware file</li> </ul> <p>In the <code>CommonBurnerAP</code> folder run <code>CommonBurnerAP.exe</code>. You must connect the camera you want to flash before launching <code>CommonBurnerAP.exe</code>.</p> <p>Once launched, reference the image below and follow the steps below</p> <ul> <li>Make sure the tab labeled \"A\" is selected.</li> <li>Select the button labeled \"B\". This will bring up a file explorer window. Choose the <code>.src</code> firmware file</li> <li>Click the button labeled \"C\". This will start flashing. Wait for the flash to finish before disconnecting the camera.</li> </ul> <p></p>"},{"location":"electrical/sysdesign/cameras/#cable-assembly","title":"Cable Assembly","text":"<p>The cable used for the cameras is an Igus CFBUS.PUR.068 cable. This cable is designed for USB 3.0 (8 pins with two shielded pairs), however we instead use it for 2x USB 2.0. This just means the shielding on the second set of wires is not strictly required.</p> <p>USB 3.0 uses the following wire colors (paired)</p> <ul> <li>Red, Black (5V power)</li> <li>White, Green (Main data pair)</li> <li>Yellow, Blue (Supper Speed Direction 1)</li> <li>Orange, Purple (Super Speed Direction 2)</li> </ul> <p>USB 2.0 uses the following</p> <ul> <li>Red, Black (5V power)</li> <li>White, Green (Main data pair)</li> </ul> <p>Thus, for one camera, we can match wire colors. For the other camera, follow the table below.</p> Igus Wire Color Camera 1 Cable Color Camera 2 Cable Color Red Red --- Black Black --- White White --- Green Green --- Orange --- Red Purple --- Black Yellow --- White Blue --- Green <p>This creates a cable looking something like the following where inside the enclosure there are two camera cables with ZHR-4 connectors for the camera modules. These go to a single cable running to the main hull, and inside the main hull they are split into two USB 2.0 type A connectors.</p> <p>Note that the ZHR-4 connectors are from the wire that comes with the cameras. It is cut and spliced to the Igus cable.</p> <p></p> <p></p> <p>Also note that the pinout for the fischer is located on the Endcap Pinout page.</p>"},{"location":"electrical/sysdesign/cameras/#penetrator","title":"Penetrator","text":"<p>Before anything else is done, install a penetrator (or wetlink penetrator) on the cable. Leave approx 5 inches of stripped wire after the penetrator.</p> <p></p> <p>Follow mechanical team procedures for penetrator installation (or have mech team follow said procedures).</p>"},{"location":"electrical/sysdesign/cameras/#camera-connector-splice","title":"Camera Connector Splice","text":"<p>Cut the top 2-3 inches of a camera cable off and remove the outer insulation. This leaves a ZHR-4 with four wires (red, black, green, white). Splice these to the penetrated wire as shown in the table / diagram above.</p> <p>*Note that the picture below was taken while assembling for one camera. For a second camera, repeat the process with a second camera cable and splice to the orange, purple, yellow, and blue wires.</p> <p></p>"},{"location":"electrical/sysdesign/cameras/#fischer-plug","title":"Fischer Plug","text":"<p>The fischer plug needs to be soldered onto the cable matching the pinout here. Follow general fischer soldering and assembly procedures here.</p> <p>Note that this fischer receptacle is more difficult to solder to than most. This is partially due to the three unused pins in the middle, partially due to the small wire gauge, and partially due to the length of wire you are able to strip back.</p> <p>Even if you are only assembling for one camera, solder all wires to the fischer plug. Failure to do so will result in a much weaker connection to the wire.</p> <ol> <li> <p>Strip 1cm (no more) of outer insulation off the Igus cable. Remove the paper shielding and mesh foil from all wires. Removing the paper and shielding is \"difficult\" (time consuming) and best done carefully using flush cuts. Make sure not to cut off any cables.</p> <p></p> </li> <li> <p>Strip about 2mm of each wire and tin it. Do not strip more than 2mm. This wire insulation on the inner wires melts before solder, so it will shrink when you tin the wire. After tinning, you should have approx 4mm of wire exposed. If less is exposed, strip off a little more insulation.</p> <p></p> </li> <li> <p>Then solder the wire to the fischer plug as you would normally solder a fischer. Follow the pinout. It is recommended to solder wires in the following order. You may have to cross wires across the connector and this order minimizes effort.</p> <ul> <li>Of the following colors, solder whichever is \"easier\" first.</li> <li>red or black</li> <li>white or green</li> <li>yellow or blue</li> <li>purple or orange</li> <li>Then repeat the same order but the other color.</li> </ul> <p></p> </li> <li> <p>Once soldered, as always, fully assemble the plug, connect it to a receptacle, and make sure there is not continuity between any used pins. Note that continuity between the three center pins is possible (due to contact with remnants of wire shielding), but is acceptable since they are unused.</p> </li> </ol>"},{"location":"electrical/sysdesign/cameras/#fischer-receptacle","title":"Fischer Receptacle","text":"<p>The fischer receptacle is much easier to assemble, primarily because the wire does not need to be so short.</p> <ol> <li> <p>Find a USB-A cable and cut off the other end (ie if it was a USB-A to USB-microB cable, cut off the micro-B side). It is best to find a cable with a similar USB-A connector to the one pictured. The outer material is rubber, which is important for step 2.</p> <p></p> </li> <li> <p>Using flush cuts, trim down the USB-A outer rubber to make it fit through the fisher recepticle's nut.</p> <p></p> <p></p> </li> <li> <p>Strip and solder to the receptacle according to the endcap pinout. Note that only one wire is shown here. If two cameras are used, add a second USB-A cable to the recepticle on the apropriate pins. Follow the endcap pinout and table / diagram at the top of this section.</p> <p></p> </li> <li> <p>As always, add hot glue to the receptacle for strain relief.</p> <p></p> </li> </ol>"},{"location":"electrical/sysdesign/endcap/","title":"Endcap Pinout","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p>"},{"location":"electrical/sysdesign/moab/","title":"Overview (MOAB / FOAB)","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p>"},{"location":"electrical/sysdesign/moab/#moab-foab","title":"MOAB / FOAB","text":"<p>The Mother Of All Boards (MOAB) and Father Of All Boards (FOAB) are the two copies of the electrical system use in SeaWolf VIII. MOAB and FOAB refer to the whole assembly on which the electronic system is assembled. It also serves to mean \"the whole electrical system\" for the purposes of most documentation.</p> <p>There are two such boards, however the two are rarely identical. The idea is that one is a stable platform (and in active use by software at pool tests) while the other is the electrical team's working platform. Once electrical team finishes making and testing changes, the working and stable platforms swap.</p> <p>For example, if MOAB is stable and used in the robot, a new board could be added to FOAB. Once added and verified, FOAB and MOAB would be swapped making FOAB the stable system. MOAB would then be updated to match FOAB's changes and the next set of changes would occur on MOAB.</p>"},{"location":"electrical/sysdesign/moab/#system-block-diagram","title":"System Block Diagram","text":"<p>Last Update: 03/16/2023 by Marcus Behel</p> History <p>03/16/2023: Initial Drawing (Marcus Behel)</p>"},{"location":"electrical/sysdesign/moab/#system-description","title":"System Description","text":"<p>TODO</p>"},{"location":"electrical/sysdesign/moab_power/","title":"Power System","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p>"},{"location":"mechanical/overview/","title":"Overview","text":"<p>TODO: Mechanical design overview</p>"},{"location":"software/overview/","title":"Overview","text":"<p>TODO: Software overview</p>"}]}