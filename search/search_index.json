{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SeaWolf VIII Documentation","text":"<p>Documentation for AquaPack Robotics' SeaWolf VIII.</p> <p>SeaWolf VIII is designed to compete in the RoboSub competition each year. SeaWolf VIII is AquaPack Robotic's 8th robot (competing 2020-present).</p> <p></p>"},{"location":"electrical/parts/","title":"Parts List / Bill of Materials","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p> <p>TODO: Links and part numbers for commonly used parts</p> <p>TODO: Link to full BOM spreadsheet</p>"},{"location":"electrical/repos/","title":"Repository List","text":""},{"location":"electrical/repos/#boards","title":"Boards","text":"Board PCB / Hardware Design Software / Firmware MEB GitHub GitHub MSB GitHub GitHub LBB GitHub N/A Control Board GitHub (MB3hel) GitHub (MB3hel) Acoustics Distribution Board GitHub N/A Acoustics Single-Channel Board GitHub N/A Standalone Leak Detector GitHub N/A Regulator Carseat GitHub N/A"},{"location":"electrical/repos/#other","title":"Other","text":"Name Description Repo Acoustics FPGA FPGA verilog design for acoustics system GitHub"},{"location":"electrical/standards/","title":"Standards","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p>"},{"location":"electrical/standards/#connectors","title":"Connectors","text":"<p>Waterproof (external) Connections</p> <ul> <li>Wire to Endcap (detachable): Fischers</li> <li>Wire to Endcap (not detachable): BlueRobotics penetrators (wetlink penetrators should be preferred over potted penetrators)</li> <li>Wire to Wire: Either use an epoxy filled block or waterproof heatshrink </li> </ul> <p>Signal &amp; Low Current:</p> <ul> <li>Wire to Wire: JST SM</li> <li>Wire to Board: Molex KK 254</li> <li>Fallback (either): DuPont (use only when JST-SM or Molex KK 254 are not viable, recommended only for prototyping)</li> </ul> <p>Higher Current</p> <ul> <li>Wire to Wire or Wire to Board: Powerpole (PP15-45 series)</li> <li>Wire to Wire: XT90 (use these only for connections directly to battery or where current larger than 45A is required)</li> <li>Wire to Screw Terminal: Heat shrink ring connectors</li> </ul>"},{"location":"electrical/standards/#dupont-connectors","title":"DuPont Connectors","text":"<ul> <li>Wire to wire</li> <li>Wire to board when paired with standard 2.54mm pin headers</li> <li>Intended for signals not power (2A max per pin)</li> <li>Cheap and easy to get (kits easily found on Amazon)</li> <li>Moderately difficult to crimp</li> <li>Not keyed</li> <li>Male pins are easy to bend / break both when connected and when not connected</li> <li>Pair well with standard 2.54mm pin headers</li> <li>Work with breadboards</li> <li>Housings in two-row configurations are sold</li> </ul>"},{"location":"electrical/standards/#molex-kk-254-connectors","title":"Molex KK 254 Connectors","text":"<ul> <li>Wire to board</li> <li>Intended for signals (4A max per pin, less depending on crimp pin selection)</li> <li>More expensive than DuPont connectors (but better)</li> <li>No kits sold, must buy individually from digikey / mouser</li> <li>Moderately difficult to crimp</li> <li>Keyed</li> <li>Male pins always on board. Only female crimps for wire.</li> <li>2.54mm pin pitch, so compatible with DuPont connectors and standard pin headers if necessary</li> <li>Housings only in one-row configurations</li> </ul>"},{"location":"electrical/standards/#jst-sm-connectors","title":"JST SM Connectors","text":"<ul> <li>Wire to Wire</li> <li>Intended for signals (2A max per pin)</li> <li>Can find in kits on Amazon (harder to find than DuPont, but possible)</li> <li>Moderately difficult to crimp</li> <li>Keyed</li> <li>Latching</li> <li>Protected male pins (both when connected and not connected)</li> <li>Housings only in one-row configurations</li> </ul>"},{"location":"electrical/standards/#anderson-power-powerpole-connectors-pp15-45-series","title":"Anderson Power Powerpole Connectors (PP15-45 series)","text":"<ul> <li>Wire to Wire or Wire to Board</li> <li>Intended for power (15, 30, 45 A)</li> <li>Expensive</li> <li>Easy to crimp</li> <li>Keyed</li> <li>Same housing / pin used on both sides of connection</li> <li>Custom configurations possible (custom size and key of connector block)</li> <li>Recommended for wire from 20 to 10 AWG</li> </ul>"},{"location":"electrical/standards/#xt90-connectors","title":"XT90 Connectors","text":"<p>Note that XT60 connectors are rarely used, but are generally the same idea (just lower current rating). XT60 connectors are only used on the battery chargers and should not be used on the robot itself.</p> <p></p> <ul> <li>Wire to Wire</li> <li>Wire to Board may be possible, but not recommended.</li> <li>Soldered not crimped</li> <li>Somewhat difficult to solder (generally requires heatsink and large iron tip)</li> <li>Robust connectors</li> <li>Work well with larger gauge wire only (14-10 AWG)</li> </ul>"},{"location":"electrical/standards/#heat-shrink-ring-connectors","title":"Heat Shrink Ring Connectors","text":"<p>Note: There are variants of these sold that are \"U\" shaped (not a closed ring). These are not to be used on the robot as they easily come loose.</p> <p></p> <ul> <li>Wire to screw terminal</li> <li>Can be used wire to wire with a loose screw &amp; nut, but not recommended.</li> <li>Easy to crimp</li> <li>Generally can handle the same current as any wire that can fit inside them</li> </ul>"},{"location":"electrical/standards/#pcb-headers","title":"PCB Headers","text":"<ul> <li>Standard 2.54mm headers (right angle and vertical)</li> <li>KK 254 headers (right angle and vertical)</li> <li>Powerpole headers (right angle and vertical)</li> </ul>"},{"location":"electrical/standards/#electronic-assembly","title":"Electronic Assembly","text":"<ul> <li>PCBs</li> <li>Protoboard</li> <li>Breadboard (avoid on robot, if necessary hot glue EVERYTHING)</li> </ul>"},{"location":"electrical/standards/#microcontrollers","title":"Microcontrollers","text":"<p>Custom boards integrating microcontrollers should use TI's MSP430 series of MCUs. This family of microcontrollers integrates the required features and are generally powerful enough for our use cases. Additionally, NCSU's ECE department has an embedded systems course built around these microcontrollers, thus it helps align club operation with coursework.</p> <p>If there is no compelling reason not to, TI's MSP430FR2355 is recommended. This chip integrates almost any peripheral that would be required, has many serial communication interfaces, and has more GPIO pins than would typically be used. The LQFT-48 package version of this chip is easy enough to hand solder as well.</p> <p>If there is a compelling reason to select a different MSP430, this is permissable, however it should be attempted to use a chip that can be more easily hand soldered. Avoid QFN and BGA packages (or anything else with pads contained under the chip).</p> <p>In cases where an MSP430 does not provide sufficient power for what is being designed, it is recommended to use an Arm architecture microcontroller. There are many vendors of these on the market (not a complete list):</p> <ul> <li>TI's MSP432 series</li> <li>TI's MSP-M0 series</li> <li>Microchip's SAM series</li> <li>ST Microelectronics STM32 chips</li> <li>Raspberry Pi RP2040</li> <li>Many NXP Semiconductors chips</li> </ul> <p>When choosing a chip, make sure to also research the cost of a debug probe. For example, the STM32 series are compatible with low cost ST-Link debug probes.</p>"},{"location":"electrical/standards/#fpgas","title":"FPGAs","text":"<p>FPGAs supported by Vivado are preferred.</p>"},{"location":"electrical/standards/#ic-packages","title":"IC Packages","text":"<p>Integrated circuits used on our boards should be hand solderable. Avoid QFN and BGA packages (or anything else with pads contained under the chip). This can be violated if absolutely necessary, however make sure there is an assembly plan.</p>"},{"location":"electrical/boards/acoustics_dist/","title":"Acoustics Distribution Board","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p>"},{"location":"electrical/boards/acoustics_single_chan/","title":"Acoustics Single Channel Board","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p>"},{"location":"electrical/boards/controlboard/","title":"Control Board","text":"<p>The control board is responsible for handling robot motion using thrusters. It generates PWM control signals for the robot's ESCs and provides a control interface to the computer via USB.</p> <p>However, the control board is much more complex than a PWM signal generator with a USB interface. The control board is a motion coprocessor intended to be used by the computer to control the robot's motion.</p> <p>The control board uses sensors (integrated IMU and external depth sensor) to control the robot's motion in a variety of high-level (abstracted) forms. This allows the computer / mission code to describe a desired motion in a high-level sense and the control board will handle everything required to make it happen.</p> <p>This is beneficial for a few reasons</p> <ul> <li>The control board performs the required math and runs the control loops required to maintain robot stability / desired motion. This reduces the required CPU time on the main computer, leaving more processing time for vision and machine learning algorithms.</li> <li>The control board is able to generate PWM signals using hardware. Most single board computers would use software to generate PWM signals. This would work poorly for thrusters (due to required pulse widths and number of thrusters). While other solutions to this exists (such as I2C PWM drivers), the other benefits of control board make it a better solution.</li> <li>The control board is better able to communicate with sensors and process sensor data, as well as perform time critical tasks (beneficial to control loop stability). This is due to the control board using a microcontroller and firmware based on an RTOS (eliminating the overhead and scheduling uncertainty introduced by a higher level operating system).</li> <li>Mission code can use high level descriptions of robot motion. This increases code portability between robots or to a simulator.</li> </ul> <p>The control board is a \"third party\" project. It was designed by a club member (Marcus Behel) in 2022/2023 with the intent of being used on SeaWolf VIII. It is located on Marcus's github and is primarily maintained by Marcus. The code and design are open source.</p>"},{"location":"electrical/boards/controlboard/#pinout","title":"Pinout","text":"<p>There are two versions of control board built around two different microcontrollers. The pinout for each is shown below.</p>"},{"location":"electrical/boards/controlboard/#control-board-v1","title":"Control Board v1","text":"<p>Note: The pressure / temp sensor is not included anymore.</p> <p></p>"},{"location":"electrical/boards/controlboard/#control-board-v2","title":"Control Board v2","text":""},{"location":"electrical/boards/controlboard/#control-board-docs","title":"Control Board Docs","text":"<p>More information about the control board can be found here</p>"},{"location":"electrical/boards/lbb/","title":"Load Balancing Board (LBB)","text":"<p>The Load Balancing Board (LBB) is used to safely connect two LiPo batteries in parallel. </p> <p>While it is technically ok to connect two identical LiPo batteries in parallel without any additional circuitry, care must be taken to ensure the batteries are charged to the exact same level and perform comparably (typically they should be of the same batch and exact same battery model).</p> <p>The LBB exists to allow connection of batteries in parallel without having to worry about these issues. The LBB will prevent safety issues with batteries that are not charged to the same level, or issues if one battery is more worn than the other (and thus discharges significantly faster).</p>"},{"location":"electrical/boards/lbb/#principle-of-operation","title":"Principle of Operation","text":"<p>The LBB is essentially just a power supply \"OR\" circuit. Each battery is a \"supply\" with a voltage ranging from 12.8 (fully discharged) to 16.8 (fully charged). These numbers are approximations for a 4S LiPo battery (14.8V nominal).</p> <p>Conceptually, power supply ORing can be done using two Schottky diodes (Schottky specifically for the low voltage drops).</p> <p></p> <p>The above circuit will \"select\" the supply with the higher voltage. For now, assume the diodes have no voltage drop (ideal diodes).</p> <ul> <li>If B1's voltage is higher than B2, then D2 will be reverse biased, thus D2 will be off and Vout will be driven by B1.</li> <li>If B2's voltage is higher than B1, then D1 will be reverse biased, thus D1 will be off and Vout will be driven by B2.</li> </ul> <p>Those statements still apply if both diodes have a non-zero forward voltage drop (typically one would use identical diodes so the forward voltage drop is the same). The difference is only that the output voltage (Vout) is less than the battery voltage.</p> <p>The above circuit is commonly used to connect two power supplies in parallel. Thus if one supply fails or is disconnected, the device continues operating.</p> <p></p> <p>However there are two issues with using the above circuit for our system</p> <ol> <li>Our system is high current (80A total; 40A per battery). It would be difficult to obtain diodes capable of these currents. Additionally, there would be non-negligible power loss through the diodes at these currents.</li> <li>Recall that batteries have some resistance. Thus, as current draw from the battery increase the battery's voltage drops. Assume the active battery's voltage drops below the voltage of the inactive battery. Then the inactive battery becomes active. However it's voltage will then drop, causing a switch back to the active battery. This \"oscillation\" between batteries will continue indefinitely. Thus, current cannot be evenly distributed across batteries.</li> </ol> <p>The ability to handle issue 2 is often referred to as \"droop sharing\" where the load between supplies is balanced so they \"droop\" (or drop) to the same voltage level. Schottky Diodes do not work well for droop sharing.</p> <p>Note: Droop sharing is not the same as current sharing (equal current split between supplies / batteries). However, assuming the batteries are roughly charged equally and neither is failing, droop sharing will result in roughly equal (or proportional to battery charge) distribution of current. Thus, using 2x 40A batteries is sufficient to power an 80A system. If the batteries are not equally charged, there may be slightly more load on the more charged battery; thus it may reach 40A before the less charged battery (reducing overall current capabilities). This is not an issue for SW8 as the 80A requirement is over-spec'd. However, it is something to be aware of.</p> <p></p> <p>For the LBB, a solution is needed that can handle both higher currents and supports droop sharing. This is done using an \"Ideal Diode Controller\". This is an IC that uses a power MOSFET to mimic the behavior of an ideal diode. Using one of these controllers and a MOSFET, the Schottky diodes can be replaced in the circuit shown above.</p> <p>The LBB uses Analog Devices's LTC4359 ideal diode controllers applied as shown here.</p> <p>The following circuit replaces the Schottky diodes (for more details on how the circuit works or why it is better than a Schottky diode, see the application note linked above).</p> <p></p> <p>In the above image, \"Vin\" would be connected to the battery (equivalent of diode anode) and \"Vout\" would be connected to the output (equivalent of diode cathode).</p> <p>Additionally, as noted by the linked application note, this can be used to connect supplies in parallel for droop sharing. This is what the LBB does.</p> <p> Image Source: https://www.analog.com/media/en/technical-documentation/technical-articles/M138-Controller_EN.pdf (page 5)</p> <p>Note that the diodes in the image above are for reverse polarity protection.</p>"},{"location":"electrical/boards/lbb/#lbb-component-selection","title":"LBB Component Selection","text":"<p>The MOSFET must be selected with the following considerations</p> <ul> <li>Must be able to sustain 40A of current while on</li> <li>Should have a low on resistance to minimize voltage drop due to the MOSFET</li> <li>Thermals should be considered. Packages with builtin heatsink are preferred (this goes along with current capabilities).</li> <li>Capable of battery voltage from source to drain</li> <li>Capable of battery voltage from drain to source</li> </ul> <p>Selected was the IXTN660N04T4 MOSFET (small 0.85 mOhm on resistance and capable of several hundred amps).</p> <p>Due to the current required, the LBB is designed to use an off-board MOSFET. The current to / through the MOSFET runs through high guage wires. The LBB itself is a PCB with the MOSFET control circuitry.</p>"},{"location":"electrical/boards/lbb/#lbb-wiring","title":"LBB Wiring","text":"<p>The LBB is a PCB housing the ideal diode controllers, reverse polarity protection diodes, and some capacitors to reduce battery noise near the ideal diode controllers. The MOSFETs are external and connected with wires.</p> <p></p> <p></p> <p>The interface header is used to connect the LBB to the MOSFETs and batteries following the diagram below. Highlighted ports are connections to the LBB interface header. </p> <p></p>"},{"location":"electrical/boards/meb/","title":"Main Electronics Board (MEB)","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p>"},{"location":"electrical/boards/msb/","title":"Manipulation Systems Board (MSB)","text":"<p>The MSB is used to control mechanical subsystems such as torpedo and dropper. Eventually, a grabber arm may be integrated necessitating another revision of the MSB, however this is not designed as of now.</p> <p>Torpedo launchers are controlled using servo motors and droppers are controlled using electromagnets. The MSB is designed to control two of each.</p> <p>The MSB is connected to the MEB's I2C bus, thus all communication to the MSB goes through the MEB.</p>"},{"location":"electrical/boards/msb/#design","title":"Design","text":"<p>The MSB is built around and MSP430FR2355 chip. This chip is used to generate two PWM signals for the torpedo launchers. It also acts as an I2C follower to communicate with the MEB. Note that two I2C headers are included to allow daisy chaining of I2C devices.</p> <p>The MSB also includes two N-Channel MOSFETs to control power to the dropper's electromagnets.</p> <p>The power for the MSB comes from an external 5V source (for now, this uses a UBEC). It includes an onboard 3.3V regulator (LDO 5V to 3.3V) to power the MSP430.</p> <p>Finally, a \"Debug\" header is included to allow connecting an ez-FET debug probe (from a launchpad board) to the MSB for programming.</p>"},{"location":"electrical/boards/msb/#pinout","title":"Pinout","text":""},{"location":"electrical/boards/msb/#software","title":"Software","text":"<p>The MSB firmware is written using the MSP430 Arduino core. </p>"},{"location":"electrical/boards/msb/#software-commands","title":"Software Commands","text":"<p>Each command to MSB is a single byte command (sent in one I2C write from MEB to MSB). The following commands are implemented</p> Command Name Command Byte Command Description RESET 0x00 Reset all systems (hold marker for droppers and torpedoes not fired) D1_TRIG 0x01 Trigger dropper 1 (release marker) D2_TRIG 0x02 Trigger dropper 2 (release marker) T1_TRIG 0x03 Fire torpedo 1 T2_TRIG 0x04 Fire torpedo 2 <p>Note: Torpedo \"fired\" and \"reset\" positions for the servo are defined in the MSB software. These can be changed, however it is usually easier to assemble the torpedo such that the positions are correct. This is done by attaching the arm to the top of the servo in the correct orientation for a known state. For example, use the MSB to \"reset\" the torpedoes. Then place the arm on the servo so the torpedo is not firing.</p>"},{"location":"electrical/boards/regulator_carseat/","title":"Regulator Carseat","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p>"},{"location":"electrical/boards/standalone_leak/","title":"Standalone Leak Detector","text":"<p>The standalone leak sensor is a coin cell powered board with an LED that turns on when a leak is detected. Leaks are detected using wire lead probes with sponges on the end.</p> <p> </p>"},{"location":"electrical/boards/standalone_leak/#probes","title":"Probes","text":"<p>When assembling the leads, crimp a 2x1 male dupont header. Then insert the header into a piece of sponge. Finally, use hot glue to glue the sponge to the header.</p> <p>On the other end, crimp a female 2x1 dupont header. The orientation of the probe does not matter. Probes are connected to the \"PRB\" headers. The lead sensor board supports 2 probes.</p> <p>TODO: Picture of leads</p>"},{"location":"electrical/boards/standalone_leak/#led-indicator","title":"LED Indicator","text":"<p>When either of the probes are shorted by water the LED light will turn on. The circuit is designed to turn the LED on for 1 M Ohm of resistance or less (thus it does not need to be a lot of water and is functional with various types of water).</p> <p>There are three possible LEDs (Usually you will want to use only one):</p> <ul> <li>Builtin Surface Mount LED (D1 on board of board)</li> <li>Builtin Through Hole LED (D2 on back of board)</li> <li>User Selected LED (LED header on front of board)</li> </ul> <p>Typically, D1 is recommended as it is easy to install the PCB on a clear face of the hull.</p> <p>D2 is included as an option (usually not populated) for scenarios where the LED needs to be angled differently (installation on a curved face).</p> <p>For scenarios where the sensor needs to be far from the LED (or the LED needs to be embedded in something else such as epoxy) the LED header can be used to wire an external LED to the leak sensor. When this is done, an appropriate through hole resistor must be installed as R5. For the other LEDs, R5 will not be populated.</p> <p>D1 and D2 are the following parts</p> <ul> <li>D1 (Surface Mount): SMTL6-RC<ul> <li>Red Color</li> <li>High Brightness (1350mcd)</li> </ul> </li> <li>D2 (Through Hole): HLMP-EG15-UX000<ul> <li>Red Color</li> <li>High Brightness (9300mcd)</li> </ul> </li> </ul> <p>The LEDs are red because this is an easily observed color underwater.</p>"},{"location":"electrical/boards/standalone_leak/#battery","title":"Battery","text":"<p>The leak sensor is designed to run off a CR2023 coin cell battery.</p> <p>These batteries are typically 220mAh to 235mAh.</p> <p>Power consumption:     - MOSFET Leakage current: 15uA (max)     - D1 On Current: 60mA     - D2 On Current: 22mA</p> <p>If the LED is off, the battery will last at least 220e-3 Ah / 15e-6 A = 14666.6667 hours = 1.67 years</p> <p>If D1 is on, the battery will last 220e-3 Ah / 60e-3 A = 3.65 hours</p>"},{"location":"electrical/connectors/crimping/","title":"Crimped Connectors","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p>"},{"location":"electrical/connectors/crimping/#dupont-connectors","title":"DuPont Connectors","text":""},{"location":"electrical/connectors/crimping/#tools","title":"Tools","text":"<p>Recommended: IWISS / iCrimp SN-025 Crimper:</p> <p>This crimper will crimp both the insulation and the conductor portions at once. Unlike the more common SN-28B crimpers, these will crimp the insulation properly (rounded shape, not an \"m\" shape).</p> <p>Note that for smaller wires (28 AWG and smaller) this may not crimp the conductor portion properly. Thus, you may need to use needle nose pliers to press the conductor tabs down further.</p> <p></p> <p>Alternate: SN-28B Crimper:</p> <p>Similar to the SN-025 crimpers (and much more common), however they do not crimp the insulation portion properly. Thus, you will likely need to use needle nose pliers to \"round out\" the insulation crimp for the pin to fit in the housing.</p> <p></p> <p>Alternate: PA-20 Crimper</p> <p>This tool crimps only one portion (conductor or insulation) at a time, however is sometimes easier to use because of that. This tool is an \"m\" shaped crimp, thus it will not quite crimp the insulation part correctly, however if you do not press down fully on that part it is usually good enough.</p> <p></p>"},{"location":"electrical/connectors/crimping/#crimping-process","title":"Crimping Process","text":"<p>TODO</p>"},{"location":"electrical/connectors/crimping/#molex-kk-254-connectors","title":"Molex KK 254 Connectors","text":""},{"location":"electrical/connectors/crimping/#tools_1","title":"Tools","text":""},{"location":"electrical/connectors/crimping/#crimping-process_1","title":"Crimping Process","text":"<p>TODO</p>"},{"location":"electrical/connectors/crimping/#jst-sm-connectors","title":"JST SM Connectors","text":"<p>These connectors are keyed wire to wire connectors. Additionally, they latch into place when connected and are resistant to bending of male pins (both when connected and when not connected).</p> <p></p>"},{"location":"electrical/connectors/crimping/#tools_2","title":"Tools","text":"<p>Note: Information in this section is speculative and not yet verified.</p> <p>A crimp tool making an \"m\" shaped crimp is required. The PA-20 crimper is used for this. It can be used for both the insulation and the conductor crimp portions.</p> <p></p>"},{"location":"electrical/connectors/crimping/#crimping-process_2","title":"Crimping Process","text":"<p>TODO</p>"},{"location":"electrical/connectors/crimping/#powerpole-connectors-pp15-45","title":"Powerpole Connectors (PP15-45)","text":""},{"location":"electrical/connectors/crimping/#tools_3","title":"Tools","text":"<p>The TRIcrimp Powerpole crimp tool should be used. These are reasonably priced and are easily the best Powerpole crimp tool.</p> <p></p>"},{"location":"electrical/connectors/crimping/#crimping-process_3","title":"Crimping Process","text":"<p>TODO</p>"},{"location":"electrical/connectors/crimping/#heatshrink-ring-connectors","title":"Heatshrink Ring Connectors","text":""},{"location":"electrical/connectors/crimping/#tools_4","title":"Tools","text":"<p>TODO</p>"},{"location":"electrical/connectors/crimping/#crimping-process_4","title":"Crimping Process","text":"<p>TODO</p>"},{"location":"electrical/connectors/fischers/","title":"Fischers","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p>"},{"location":"electrical/connectors/soldering/","title":"Soldered Connectors","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p>"},{"location":"electrical/connectors/soldering/#xt90-connectors","title":"XT90 Connectors","text":"<p>TODO</p>"},{"location":"electrical/connectors/waterproof_splice/","title":"Waterproof Splicing","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p> <ul> <li>Adhesive heatshrink method</li> <li>Epoxy block method</li> </ul>"},{"location":"electrical/embedded/msp430/","title":"MSP430","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p> <p>TODO: What software we use and why</p> <p>TODO: Links to user guides for the software</p> <p>TODO: Debug probes, using ez-FET from launchpad</p> <p>TODO: Drivelib</p> <p>TODO: Custom library</p>"},{"location":"electrical/embedded/styleguide/","title":"Style Guide","text":"<p>AquaPack Robotics Embedded Programming Style Guide</p> <p>Note, this page is currently in the process of being written</p>"},{"location":"electrical/embedded/styleguide/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Table of Contents</li> <li>Overview</li> <li>Rules</li> <li>General Rules<ul> <li>Line Width</li> <li>Braces</li> <li>Parentheses</li> <li>Common Abbreviations</li> <li>Casts</li> <li>Keywords</li> </ul> </li> <li>Comment Rules<ul> <li>Comment Locations</li> </ul> </li> <li>White Space Rules<ul> <li>Pointer (* and \\&amp;) Operators</li> <li>Alignment Rules</li> <li>Tab Rules</li> </ul> </li> <li>Module Rules<ul> <li>Naming Conventions</li> <li>Header Files</li> <li>Source Files</li> </ul> </li> <li>Data Type Rules<ul> <li>Type Definitions</li> <li>Use of Types</li> </ul> </li> <li>Procedure Rules</li> <li>Variable Rules</li> <li>Statement Rules</li> </ul>"},{"location":"electrical/embedded/styleguide/#overview","title":"Overview","text":"<p>This guide follows the general outline and some of the recommendations of Barr Group's Embedded C Coding Standard, set forth by Michael Barr.</p> <p>Many of these rules are common sense and you probably are already following them in your own coding style. However, for consistency across the team it is practical to write them explicitly.</p> <p>??? info Last updated: 2023-09-06 12:16 PM</p>"},{"location":"electrical/embedded/styleguide/#rules","title":"Rules","text":""},{"location":"electrical/embedded/styleguide/#general-rules","title":"General Rules","text":""},{"location":"electrical/embedded/styleguide/#line-width","title":"Line Width","text":"<ol> <li>No line width is enforced as we do not do paper code reviews. Please use your best discretion for when a line is considered too long (if you're not sure, try to keep the longest line to around 80 characters).</li> <li>The preprocessor directive (<code>#define</code>) should not be used to alter or rename any keyword or other part of the C programming language.</li> <li>The minimum target standard for both C and C++ is C/C++ 11. However, if newer versions such as 14 or 17 are available for the toolchain in use, they are preferred.</li> </ol>"},{"location":"electrical/embedded/styleguide/#braces","title":"Braces","text":"<ol> <li> <p>Left braces should appear on the same line as the statement they are connected with. Right braces should always be on a new line after their associated block of code.</p> Example<pre><code>if (condition) {\n    code block;\n} else {\n    code block line 2;\n    code block line 1;\n    code block line 3;\n}\n</code></pre> </li> </ol>"},{"location":"electrical/embedded/styleguide/#parentheses","title":"Parentheses","text":"<ol> <li>To maintain clarity of long expressions, parentheses should be used to ensure proper execution order and provide better information to maintainers.</li> <li>For further clarity, each side of a logical operator should be surrounded with parentheses, unless it is a single level operation.</li> </ol> Example<pre><code>(current_depth == target_depth) &amp;&amp; (current_depth &lt; pool_depth)\n\nsoft_arm &amp;&amp; hard_arm\n</code></pre>"},{"location":"electrical/embedded/styleguide/#common-abbreviations","title":"Common Abbreviations","text":"<ol> <li>Unless it is an abbreviation in common use and understood widely among programmers, refrain from using abbreviations as they can obfuscate the meaning of code.</li> <li>Common variable names, such as <code>i</code> for a loop counter can be used under the condition that it is of limited scope and purpose, and that the context it is in is exceedingly clear.</li> </ol>"},{"location":"electrical/embedded/styleguide/#casts","title":"Casts","text":"<ol> <li>Should a cast be required, the relevant lines should be commented to explain assumptions made.</li> </ol>"},{"location":"electrical/embedded/styleguide/#keywords","title":"Keywords","text":"<ol> <li>The use of <code>goto</code> should be exceedingly limited to only cases where it is justifiably required, and no other solution can be found (including rewriting other code to make the <code>goto</code> unecessary).</li> <li>Uses of the <code>continue</code> keyword should be limited, but are allowed where it simplifies the code structure and makes it more legible.</li> <li>Generally if something can be defined as <code>static</code>, it should be.</li> <li><code>const</code> should be applied in all locations where appropriate. In some cases, it may be more applicable than a preprocessor directive, while the preprocessor directive may be more applicable in others.</li> <li><code>volatile</code> should be used in all cases where a variable can be modified by anything outside of the normal control flow of the code (i.e. an ISR, variables shared between RTOS threads, etc).</li> </ol>"},{"location":"electrical/embedded/styleguide/#comment-rules","title":"Comment Rules","text":"<ol> <li>Both single (//) and multi (/*) comment styles are considered acceptable, and should be used as applicable. When multi-line comments are used, all lines should begin with an asterisk (*)</li> <li>Multi-line comments should maintain a level of indentation with the leading asterisks vertical to each other, as shown below.</li> <li>One leading space should be put between the comment text and the comment symbol.</li> <li>If placed at the end of a line of code, all comments should be vertically aligned (within the context of a file).</li> </ol> Example<pre><code>the first line of code;  // comment text\n\n/* comment text\n * comment text\n * comment text\n */\n\n line of code;          // comment text\n another line of code;  // comment text\n</code></pre> <ol> <li>Assume the reader is competent in the language, and avoid explaining the obvious. (You aren't trying to hit a comment count for an assignment, you're trying to actually be helpful to yourself and others in the future)</li> <li>Single line comments should be used where the function of a single line may be ambiguous.</li> </ol>"},{"location":"electrical/embedded/styleguide/#comment-locations","title":"Comment Locations","text":"<ol> <li>Functions should be preceeded by a short comment block explaining the relevant values (inputs, outputs) and an extremely brief description of the purpose of the function. This comment block should follow Doxygen styling, linked here.</li> </ol> Example<pre><code>/**\n * Sums two numbers\n * @param A an integer\n * @param B an integer\n * @return The summation\n */\nint sum(int A, int B) {\n    int c;\n    c = a + b;\n    return c;\n}\n</code></pre>"},{"location":"electrical/embedded/styleguide/#white-space-rules","title":"White Space Rules","text":"<ol> <li>The keywords <code>if, while, for, switch,</code> and <code>return</code> should be followed by a single space if there is more text on the same line.</li> <li>Unless specified by another whitespace rule, all operators should be surrounded on either side by a single space.</li> <li>Unary operators should not have a space between the operator and the operand.</li> <li>Structure pointer and member operators should have no whitespace on either side.</li> <li>Parentheses, braces, and brackets should not have an adjacent space on the interior side.</li> <li>Excluding the end of a line, separating commas should should be followed by one space.</li> <li>Semicolons should follow a preceeding statement without a space, but should always be followed by a space unless they end a line.</li> <li>Use whitespace to separate blocks of code from each other in a logical fashion. It is suggested to use either 1 or 3 lines of separation, case dependent.</li> </ol>"},{"location":"electrical/embedded/styleguide/#pointer-and-operators","title":"Pointer (* and &amp;) Operators","text":"<ol> <li>Pointer operators should be written without a space on the operand side (i.e. <code>type *name</code>).</li> <li>Pointer variables should be declared on a line separate from non-pointer variables of the same type, to avoid confusion between the two.</li> </ol>"},{"location":"electrical/embedded/styleguide/#alignment-rules","title":"Alignment Rules","text":"<ol> <li>The # of a preprocessor directive should always be left aligned, regardless of the indentation of the line.</li> <li>Align relevant blocks of code together (Don't be stupid).     TODO: Make this nicer?</li> </ol>"},{"location":"electrical/embedded/styleguide/#tab-rules","title":"Tab Rules","text":"<ol> <li>The unicode tab character should not appear in files. Instead, the specified tab size is 4 spaces.</li> </ol>"},{"location":"electrical/embedded/styleguide/#module-rules","title":"Module Rules","text":""},{"location":"electrical/embedded/styleguide/#naming-conventions","title":"Naming Conventions","text":"<ol> <li>File names should consist only of lower case letters, numbers, and underscores.</li> <li>File names are recommended to be no longer than 16 characters. Ideally file names are specific and short, like the file itself.</li> <li>All module names should not overlap with those of the standard library.</li> <li>All files that contain a <code>main()</code> function should include \"main\" within the filename. In general, there will be only one file containing a main function. In this case, the file hsould be named <code>main.c</code> or <code>main.cpp</code>.</li> </ol>"},{"location":"electrical/embedded/styleguide/#header-files","title":"Header Files","text":"<ol> <li>Include preprocessor guards against multiple inclusion within all header files (#ifndef NAME_H)</li> <li><code>#pragma once</code> should not be used for protection against multiple files, see previous rule for alternative.</li> <li>No variables should be defined within a header file, nor should any storage be allocated.</li> <li>Header files should concern themselves strictly with the information that is needed to be known by other modules. (Everything else should be declared within the source file itself)</li> <li>Unless required for a specific purpose, headers and source files should always be paired. Multiple source files per header file is discouraged.</li> </ol>"},{"location":"electrical/embedded/styleguide/#source-files","title":"Source Files","text":"<ol> <li>Source files should be specific, and contain only the information relevant to controlling one 'domain' (UART driver, Servo control, etc).</li> <li>Source files should always <code>#include</code> the corresponding header file.</li> <li>No absolute or relative paths should be used in <code>#include</code> statements. Instead, the build system should be used to include relevant links.</li> <li>Do not include extraneous <code>#include</code> statements.</li> <li>Do not directly <code>#include</code> another source file; always <code>#include</code> the relevant header file.</li> <li>Any variables shared internally across the entire module but that aren't declared according to the rules of the header file should be declared at the top of the module's source file.</li> </ol>"},{"location":"electrical/embedded/styleguide/#data-type-rules","title":"Data Type Rules","text":""},{"location":"electrical/embedded/styleguide/#type-definitions","title":"Type Definitions","text":"<ol> <li>When defining new data types, they should always be appended with the <code>_t</code> designation.</li> <li>Structs and enums should be implemented only through <code>typedef</code> declarations.</li> <li>Any data types that are <code>public</code> should have their module name prepended to them in the pattern <code>module_type</code>.</li> <li>Any data types that are <code>public</code> are to be declared in their module's respective header file.</li> <li>Any data types that are <code>private</code> are to be declared in their module's respective source file.</li> </ol>"},{"location":"electrical/embedded/styleguide/#use-of-types","title":"Use of Types","text":"<ol> <li>Any time a specific number of bits needs to be used, one of the fixed-width integer types defined in <code>stdint.h</code> should be used, rather than one of the named types (short, long, long long).</li> <li><code>char</code> types should be used only when related to strings; See rule 1 in this subsection.</li> <li><code>bool</code> types should be used from the C standard library (<code>stdbool.h</code>), rather than defined using enums or preprocessor directives.</li> <li>Bit fields--such as those used for register mapping--should be defined only within unsigned integer types.</li> <li>Bitwise operations should only be done on unsigned integer types.</li> <li>Signed and unsigned integers should preferably never be mixed within operations</li> <li>Avoid floating point operations wherever practical.     (There is some discretion required here. If it makes sense to do floating point (you have an FPU, it would violate common mathematical assumptions to do otherwise, etc.) proceed accordingly.)</li> </ol> <p>TODO: Add content pertaining to unions</p>"},{"location":"electrical/embedded/styleguide/#procedure-rules","title":"Procedure Rules","text":"<p>TODO: content</p>"},{"location":"electrical/embedded/styleguide/#variable-rules","title":"Variable Rules","text":"<p>TODO: content</p>"},{"location":"electrical/embedded/styleguide/#statement-rules","title":"Statement Rules","text":"<p>TODO: content</p>"},{"location":"electrical/legacy/acoustics/","title":"Acoustics System","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p> <ul> <li>Picoscope based approach description</li> <li>Why the change</li> </ul>"},{"location":"electrical/legacy/boards/","title":"Boards","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p> <ul> <li>Aux board (integrated into MEB 1.2)</li> <li>Optoisolator board</li> <li>Monolithic acoustics board</li> <li>Camera PCB</li> </ul>"},{"location":"electrical/legacy/cameras/","title":"Cameras","text":""},{"location":"electrical/legacy/cameras/#intel-realsense-hd","title":"Intel RealSense HD","text":"<p>These cameras use a custom enclosure designed to fit an Intel RealSense Depth Camera (435i).</p> <p></p> <p></p> <p></p>"},{"location":"electrical/legacy/cameras/#connection-information","title":"Connection Information","text":"<ul> <li>These cameras will work with only USB 2.0<ul> <li>Full operation of the camera (some framerates / resolutions) require USB3</li> <li>Limited to 720p @ 6FPS (yes 6 not 60) and 480p @ 30 FPS when using USB2</li> <li>IMU and depth data may not work with USB 2</li> </ul> </li> <li>Each camera could require up to 700mA current at 5V depending on the configuration<ul> <li>In practice, it is unlikely that this would be used since only the RGB camrea is used</li> </ul> </li> <li>Note that the depth data does not work underwater (we tried, it does not work)</li> </ul>"},{"location":"electrical/legacy/cameras/#usb-c-to-dupont-connector","title":"USB-C to Dupont Connector","text":"<p>This connector is used inside the camera hull to connect the camera (USB-C either 2.0 or 3.0) to the cable penetrated into the hull by dupont connectors.</p> <p>These camera enclosures do not make this part of wiring easy. In fact, this is a large part of why these were moved away from.</p> <p>These cameras are wired using USB C breakout boards such as these. If using USB 3 make sure to get a breakout with 8 pads. If the breakout only has 4 pads, it is USB 2.</p> <p> </p> <p>Note that the purchased breakouts are too long to fit in the enclosure. Thus the PCBs were sanded to make them fit (yes the pcb was sanded down using sand paper). They should be sanded right up to (but not touching) the metal pads.</p> <p> </p> <p>Then, solder wires  onto the pads backwards. Soldering backwards ensures the wires will not hang off the edge where the size is constrained.</p> <p> </p> <p>Then, to prevent shorting on the edge of the camera hull it is critical to use hot glue to cover exposed conductors. When doing so, be careful to not get much / any on the edge of the PCB as this would add width to what was just sanded down.</p> <p> </p> <p>Finally, crimp dupont pins (male) on each wire and assembe in an 4x2 housing as shown below.</p> <p></p> USB C Pin (Breakout Pin) USB A 3.0 Pin Standard Wire Color GND (A1) GND Black VBUS (B1) VBUS / VCC Red RX1- (B10) TX1- (StdA_SSTX-) Purple RX1+ (B11) TX1+ (StdA_SSTX+) Orange D- (A7) D- White D+ (A6) D+ Green TX1- (A3) RX1- (StdA_SSRX-) Blue TX1+ (A2) RX1+ (StdA_SSTX+) Yellow <p>Note: On USB-A 3.0 let GND DRAIN float.</p> <p>Notice that USB 3.0 TX and RX are CROSSED! The TX and RX lines should be crossed in the cable. Do this in the dupont connector.</p>"},{"location":"electrical/legacy/cameras/#penetrated-wire","title":"Penetrated Wire","text":"<p>A wire should be penetrated (using BlueRobotics penetrator) into the camera hull. This should be an 8-pin wire with shielded pairs for the USB 3 differential pairs (RX and TX Super Speed pairs).</p> <p>The wire used for this is Igus CFBUS.PUR.068</p> <p>The wire is penetrated into the hull and female Dupont connectors installed. These are kept in two groups to allow removal through the penetrator's hole if needed. Note that these should be assembled to connect the wires to the breakout's dupont based on the table shown in the previous section. Note that this pinout is used to cross the TX and RX pairs as required.</p> <p></p> <p>This wire is connected to the main hull (by penetrator or fischer) and a USB A wire connected to the other side to go to the computer. Note that a USB 3.0 cable (type A connector) must be used on the inside of the main hull if USB3.0 is used. Otherwise, a USB 2.0 can be used by connecting the power and D+/D- wires (no TX/RX). The colors of the USB A cable will match the colors of the Igus cable (since TX and RX were crossed inside the camera hull's dupont).</p>"},{"location":"electrical/legacy/cameras/#custom-camera-pcb","title":"Custom Camera PCB","text":"<p>An attempt was made to design a custom camera PCB to replace the breakouts that must be sanded down. However, these are difficult to assemble (even with reflow process) and the one that we believe to have been assembled properly does not work well (we get a few frames, then the video feed drops). As such, these have been deemed not viable and should not be used.</p>"},{"location":"electrical/legacy/cameras/#alternatives-to-sanding-the-breakout","title":"Alternatives to Sanding the Breakout","text":"<p>The following were considered:</p> <ul> <li>Custom camera PCB (do not use)</li> <li>90 degree cables (too large to fit)</li> <li>Right angle USB-C ribbon cable (can purchase online; never tested)</li> </ul>"},{"location":"electrical/legacy/cameras/#really-old-sw7sw6-cameras","title":"Really Old (SW7/SW6) Cameras","text":"<p>These cameras were used for a short time on SW8, however are not in good condition and do not work well.</p> <p>These are built using the internals from a Microsoft Lifecam Cinema (originally released in 2009). </p> <p></p>"},{"location":"electrical/legacy/cameras/#assembly","title":"Assembly","text":"<p>The cameras must be disassembled and the two internal boards removed. Note that the disassembly process is destructive and seems to require cutting metal using flush cuts. The internal cable uses a connector to one of these boards. It should be cut short and soldered to the fischer receptacle on the back of the camera hull. </p> <p> </p> <p>Note that the cameras use 104 fischer receptacles, however when used on SW8 they were connected to a 103 fischer receptacle (both 4 pin). A custom cable was used for this (fischers on both ends; cable diameter must fit both 103 and 104 plugs). Additionally, note that the camera pinout does not match what used to be used for USB 2 pinout on SW8. Thus, the cable \"crossed\" some signals. If ever reassembling these cameras, it is recommended to redo the pinout on both ends.</p>"},{"location":"electrical/legacy/controlsys/","title":"Control System","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p> <ul> <li>Cube orange / pixhawk with Ardupilot / Ardusub firmware</li> <li>Why the change</li> </ul>"},{"location":"electrical/legacy/powersys/","title":"Power System","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p> <ul> <li>Low side switching, optoisolator motivation, different regulators</li> <li>Why the change</li> </ul>"},{"location":"electrical/software/kicad/","title":"KiCad User Guide","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p> <p>This user guide is intended to be a reference, not a tutorial. There are many good KiCad tutorials available online, however please note that there are sometimes multiple ways to do things in KiCad (eg library management). In such cases, please use the methods described on this page. Part of this page's purpose is to describe our conventions / approaches to using KiCad.</p> <p>Note that this guide was written for KiCad 7.0.1</p>"},{"location":"electrical/software/kicad/#installation","title":"Installation","text":"<p>See the Software Overview page for download links and required version information (if any).</p>"},{"location":"electrical/software/kicad/#windows","title":"Windows","text":"<ul> <li>Download the installer (<code>exe</code> file)</li> <li>Run the installer. It will require administrative privileges.</li> <li>Follow the instructions of the installer. Default settings / options are sufficient.</li> <li>Install SWLib (see instructions in following section) after the installation completes.</li> </ul>"},{"location":"electrical/software/kicad/#macos","title":"macOS","text":"<ul> <li>Download the <code>dmg</code> file</li> <li>Open the dmg disk image</li> <li>Drag the <code>KiCad</code> folder to <code>Applications</code> as indicated by the arrow</li> <li>Wait for the copy operation to complete</li> <li>KiCad is now installed</li> <li>Install SWLib (see instructions in following section) after the installation completes.</li> </ul>"},{"location":"electrical/software/kicad/#linux","title":"Linux","text":"<ul> <li>Follow KiCad's Instructions. On Ubuntu this entails adding a ppa and installing the packages.</li> <li>Install SWLib (see instructions in following section) after the installation completes.</li> </ul>"},{"location":"electrical/software/kicad/#swlib","title":"SWLib","text":"<p>SWLib is a KiCad library containing symbols, footprints, and 3D models for components used on SeaWolf's boards. This library is shared among many robots (not SeaWolf VIII exclusive).</p> <p>This library must be installed once per system you install KiCad on.</p> <p>Note: you must have <code>git</code> installed to install, modify, or update SWLib!</p>"},{"location":"electrical/software/kicad/#installation_1","title":"Installation","text":"<ol> <li>Clone this repository somewhere on your system. The location does not matter. On windows, avoid putting it in OneDrive (ie don't put it in your documents folder).</li> <li>Open KiCad. Close any open project (File &gt; Close Project)</li> <li>Preferences &gt; Manage Symbol Libraries</li> <li>The first time you open this menu, you will be asked to \"Configure Global Symbol Library Table\". Choose \"Copy Default Global Symbol Table\"</li> <li>On the Global Libraries tab select the folder icon at the bottom (Add existing library to table)</li> <li>Navigate to wherever you cloned the repo. Choose the <code>SWLib.kicad_sym</code> file.</li> <li>Click OK to close the symbol library table.</li> <li>Preferences &gt; Manage Footprint Libraries</li> <li>The first time you open this menu, you will be asked to \"Configure Global Footprint Library Table\". Choose \"Copy Default Global Footprint Table\"</li> <li>On the Global Libraries tab select the folder icon at the bottom (Add existing library to table)</li> <li>Navigate to wherever you cloned the repo. Choose the <code>SWLib.pretty</code> folder.</li> </ol>"},{"location":"electrical/software/kicad/#updating","title":"Updating","text":"<ol> <li>Open a terminal or git bash in the folder you cloned the repository to.</li> <li>Run <code>git pull origin main</code></li> </ol>"},{"location":"electrical/software/kicad/#creating-new-parts","title":"Creating new Parts","text":"<p>Before creating a new part, check if it exists in one of the builtin KiCad libraries. Many parts do. You can search in the symbol editor.</p> <p>To create a new part, it is necessary to create both a symbol and footprint for the part. Symbols are used in schematics. Footprints are used on the PCB. In their simplest form, both are a collection of pins with unique numbers. On a symbol, pins are \"lines\". On a footprint, pins are \"holes\" or \"pads\" that go in / on the PCB. Pins on a symbol are associated with pins on a footprint by the pin's number. In addition to numbers, pins on a symbol can have human readable names. These are only used to show the designer what the pin is called.</p> <p>To start, create the symbol</p> <ol> <li>Open the symbol editor (in KiCad's main window)</li> <li>Select SWLib in the libraries panel on the left</li> <li>Select the new symbol button (or <code>File &gt; New Symbol...</code>)</li> <li>Name the symbol. This should typically match the name of the part you are making a symbol for.</li> <li>Optionally select an existing symbol to derive from (\"start with\")</li> <li>Change the designator if needed. See this</li> <li>Typically, units per package should be left as 1</li> <li> <p>Leave other settings unchanged</p> <p></p> </li> <li> <p>Click OK to create you symbol. It will be open in the editor.</p> </li> <li>Make sure the unit is set to \"mil\" on the left hand toolbar.</li> <li>Make sure the grid is set to 50mil (<code>View &gt; Grid Properties</code>). You can see the current grid on the bottom bar.</li> <li>Create the symbol. You can use the tools on the right toolbar to \"draw\" the symbol (lines, shapes, arcs). Draw your part centered on the origin!</li> <li>Then use the \"pin\" tool (right toolbar) to add the required number of pins. Name the pins using the names in the part's datasheet. Make sure the pin number match the part's package pin numbers. When creating pins, the \"circle\" should be facing out. THis is where wires connect to in the schematic.</li> <li>Make sure to drag the designator above the part</li> <li> <p>Save!</p> <p></p> </li> </ol> <p>After creating the symbol, determine if you need to create a footprint. KiCad's footprint libraries have a footprint for most standard packages (0603, 0805, 1206, etc for resistors, capacitors, diodes, inductors; QFP, TSSOP, SOIC, DIP, QFN, etc for ICs). Open the footprint editor and search for the package your device uses. If it exists, do not create a custom footprint. Skip to step 6. If you do need to create the footprint, follow the instructions below.</p> <ol> <li>Open the footprint editor</li> <li>Select \"SWLib\" in the left panel with all libraries</li> <li>Select <code>File &gt; New Footprint</code> to create an empty footprint. Name it the same as your part.</li> <li>Use the footprint editor to place pads and draw any desired silkscreen. Make sure the numbers of the pads match the numbers of the pins the pad should be associated with. Follow numbering convention in the part's datasheet.</li> <li> <p>Save!</p> <p></p> </li> <li> <p>Go back to your part in the Symbol editor.</p> </li> <li>Edit symbol properties (<code>File &gt; Symbol Properties...</code>)</li> <li>Click the library icon next to the footprint field (you may need to click the footprint field first).</li> <li>Select the footprint for your part</li> <li>Double check the pin number order of the footprint and schematic. This is especially important if you are using a footprint you did not make.</li> <li>Save!</li> </ol> <p>Optionally, you can add a 3D model to a footprint.</p> <ol> <li>Create or download a 3D mode. Save it as a step or stl file in <code>SW-KicadLibrary/SWLib.3d</code>. Name it the same as the part.</li> <li>Open the footprint editor and select your part.</li> <li>Edit footprint properties (<code>File &gt; Footprint Properties...</code>)</li> <li>Select the 3D models tab</li> <li>Click the plus button and type the following. Never use the browse feature to select a 3d model! Browse tool uses absolute paths, which will break the model on other people's systems.     <pre><code>../../SWLib.3d/[FILE].step\n</code></pre></li> <li>Replace <code>[FILE]</code> with the name of the step file. This is case sensitive!.</li> <li>Close the properties panel and save the footprint.</li> </ol> <p>After creating your part (and saving everything) commit your changes in the <code>SW-KicadLibrary</code> repo and push.</p>"},{"location":"electrical/software/kicad/#importing-downloaded-parts","title":"Importing Downloaded Parts","text":"<p>Many parts will have footprints and symbols (ECAD models) available for download. These often include 3D models too. Some common sources to find these models are</p> <ul> <li>SamacSys (easiest to access through mosuer; DO NOT INSTALL THE LIBRARY LOADER! DO NOT USE IT!)</li> <li>UltraLibrarian</li> <li>SnapEDA</li> </ul> <p>Note that you will need an account to use any of these services. </p> <ol> <li>When downloading a model, download symbol and footprint. If a 3D model is available, download it too.</li> <li> <p>After downloading, follow the instructions below depending on where you downloaded the model from. Note that if a 3D model was not available, the 3D model file will be missing.</p> SamacSys <p>The downloaded file will be a <code>.zip</code> file. Extract it.Locate the following three files.</p> <ul> <li>Symbol: <code>[PART]/KiCad/[PART].kicad_sym</code> (older parts may only have a <code>.lib</code> file. This works too.)</li> <li>Footprint: <code>[PART]/KiCad/[PACKAGE].kicad_mod</code></li> <li>3D Model: <code>[PART]/3D/[PART].stp</code></li> </ul> UltraLibrarian <p>The downloaded file will be a <code>.zip</code> file. Extract it.Locate the following three files.</p> <ul> <li>Symbol: <code>KiCAD/[NAME]/[NAME].lib</code></li> <li>Footprint: <code>KiCAD/[NAME]/footprints.pretty/[NAME].kicad_mod</code></li> <li>3D Model: <code>[NAME]/STEP/[NAME].step</code></li> </ul> SnapEDA <p>The downloaded file will be a <code>.zip</code> file. Extract it.Locate the following three files.</p> <ul> <li>Symbol: <code>[PART].kicad_sym</code></li> <li>Footprint: <code>[PART].kicad_mod</code></li> <li>3D Model: <code>[PART].step</code></li> </ul> </li> <li> <p>Open KiCad's symbol editor</p> </li> <li>Find SWLib in the panel on the left.</li> <li>Right click \"SWLib\" and choose \"Import Symbol...\"</li> <li>Choose the symbol file (<code>.lib</code>) described above.</li> <li>Save the symbol.</li> <li>Open the footprint editor.</li> <li>Find SWLib in the panel on the left.</li> <li>Right click \"SWLib\" and choose \"Import Footprint...\"</li> <li>Choose the footprint file (<code>.kicad_mod</code>) described above.</li> <li>Save into SWLib</li> <li>Copy the 3D model file (<code>.step</code> / <code>.stp</code> file described above) to SWLib. This must be copied to wherever you cloned SWLib. Paste the <code>.step</code> file into <code>SW-KicadLibrary/SWLib.3d</code></li> <li>In the footprint editor, edit footprint properties (<code>File &gt; Footprint Properties...</code>)</li> <li>Select the 3D models tab</li> <li>Click the plus button and type the following. Never use the browse feature to select a 3d model! Browse tool uses absolute paths, which will break the model on other people's systems.     <pre><code>../../SWLib.3d/[FILE].step\n</code></pre></li> <li>Replace <code>[FILE]</code> with the name of the step file. This is case sensitive!. Change <code>step</code> to a different suffix if the file uses a different suffix.</li> <li>Close the properties panel and save the footprint.</li> <li>Go back to the symbol editor and select the imported symbol.</li> <li>Open symbol properties (<code>File &gt; Symbol Properties...</code>)</li> <li>Click the footprint field, then select the browse button</li> <li>Choose the footprint now imported into the SWLib footprint library</li> <li>Close the symbol properties panel and save.</li> </ol> <p>After importing your part (and saving everything) commit your changes in the <code>SW-KicadLibrary</code> repo and push.</p>"},{"location":"electrical/software/kicad/#creating-a-new-project","title":"Creating a New Project","text":"<p>Make sure you have installed SWLib first!</p> <p>TODO</p>"},{"location":"electrical/software/kicad/#opening-an-existing-project","title":"Opening an Existing Project","text":"<p>Make sure you have installed SWLib first!</p> <p>TODO</p>"},{"location":"electrical/software/kicad/#design-workflow","title":"Design Workflow","text":""},{"location":"electrical/software/kicad/#schematic","title":"Schematic","text":"<p>Always use a 50mil grid in the schematic editor! If absolutely necessary, a 25mil grid can be used occasionally, but try to avoid doing so.</p> <p>TODO: General schematic work</p> <p>TODO: Symbol table conventions and custom part number field</p> <p>TODO: Net label and power port behavior across multiple schematic sheets</p>"},{"location":"electrical/software/kicad/#electrical-rules-check","title":"Electrical Rules Check","text":"<p>TODO</p>"},{"location":"electrical/software/kicad/#assign-footprints","title":"Assign footprints","text":"<p>TODO (note bulk procedures too)</p>"},{"location":"electrical/software/kicad/#pcb-setup","title":"PCB Setup","text":"<p>It is generally necessary to setup some board stackup parameters (specifically the number of copper layers) before starting the PCB. In order to make running DRCs later, it is best to import board settings from one of the SW-KiCadTemplates. These templates are based on PCB manufacturer board stackups and include design rules. Specifics (such as board color, default item sizes, etc) can be customized after importing a template. To import a template, follow the steps listed below</p> <ol> <li>Download a zip of the repo and extract the zip (or just clone it)</li> <li>Open your project in KiCad</li> <li>Open your PCB</li> <li>Open Board Setup (<code>File &gt; Board Setup</code>)</li> <li>Click the button on the bottom left labeled \"Import Settings from Another Board\"</li> <li>Choose the <code>kicad_pcb</code> file for the template you want to use. Which template is used should depend on how you plan to design the PCB (number of layers, impedance control, etc) as well as who you plan to have manufacture the PCB.</li> <li>After selecting a template file, click the \"Select All\" button (rarely will you want to import only some settings)</li> <li>Click \"Import Settings\"</li> <li>Click \"OK\" to close the board setup dialog</li> <li>Save the PCB file</li> <li>Restart KiCad (Close fully and reopen the project). Skipping this step can cause library issues until KiCad is restarted.</li> </ol>"},{"location":"electrical/software/kicad/#pcb-layout-routing","title":"PCB Layout &amp; Routing","text":"<p>Always work in mil not mm grid!</p> <p>TODO</p>"},{"location":"electrical/software/kicad/#design-rules-check-drc","title":"Design Rules Check (DRC)","text":"<ol> <li>Setup design rules in Boards Setup (<code>File &gt; Board Setup</code>). Fill in options for <code>Design Rules &gt; Constraints</code> and change defaults in <code>Text &amp; Graphics &gt; Defaults</code> as applicable. Skip this if you imported board settings from one of the template boards! Close Board Setup dialog when done.</li> <li>Open the design rules checker dialog (<code>Inspect &gt; Design Rules Checker</code>)</li> <li>At the top, select only \"Refill all zones before performing DRC\"</li> <li>Make sure both errors and warnings are shown (checkboxes near bottom of the dialog)</li> <li>Run the DRC</li> <li>Fix any errors.</li> <li>Fix or waive warnings as warranted.</li> </ol>"},{"location":"electrical/software/kicad/#tips-and-tricks","title":"Tips and Tricks","text":""},{"location":"electrical/software/kicad/#flat-multi-page-schematics","title":"Flat multi-page Schematics","text":"<p>There are two common ways of doing multi-page schematics: Hierarchical and flat. Hierarchical design embeds one sheet as a block in another. Connections between sheets are made using ports. Flat designs have multiple sheets (all considered top level). Connections between sheets are made by naming nets the same name. AquaPack prefers to use Hierarchical design over flat design practices.</p> <p>In rare cases it may be acceptable to use a flat design, however KiCad doesn't really support them well. You still have to create a top level schematic and add all your sheets as blocks to it. However you just won't add ports or make connections. The top level sheet just acts as a container.</p>"},{"location":"electrical/software/kicad/#handsolder-footprints","title":"HandSolder Footprints","text":"<p>The builtin KiCad footprint libraries often have two variants of footprints (eg for resistors, capacitors, etc). One is often suffixed \"HandSolder\". These footprints use elongated pads that make it easier to solder components to the board by hand. These are generally preferred for our use cases.</p>"},{"location":"electrical/software/kicad/#mounting-holes","title":"Mounting Holes","text":"<p>Do not use vias or manually placed pads for mounting holes. This will lead to DRC warnings / errors. Instead use footprints from the builtin \"MountingHole\" library. These footprints can be added to the PCB without corresponding symbols in the schematic by using the \"Add Footprint\" option in the PCB editor (<code>Place &gt; Add Footprint</code>). After adding the footprint, make sure to edit its properties and check the \"Not in schematic\" box.</p>"},{"location":"electrical/software/kicad/#silkscreen-text-size","title":"Silkscreen Text size","text":"<p>Most manufacturers specify limits on character height and stroke width. KiCad also wants a character width. Always make this equal the the height of your characters!</p>"},{"location":"electrical/software/kicad/#adding-images-to-silkscreen","title":"Adding Images to Silkscreen","text":"<ol> <li>Open the project you want to add images to</li> <li>In KiCad's project window open the \"Image Converter\"</li> <li>Click Load Image and choose the image you want to add. Monochrome bitmaps work well. Other image formats work, but you may need to adjust the black / white threshold.</li> <li>Choose the size of the image in \"Output Size\" (if not sure what size you want guess; trial and error is the way to go)</li> <li>Choose \"Footprint (.kicad_mod file)\" for Output Format</li> <li>Make sure \"Front Silkscreen\" is selected for the layer</li> <li>Click \"Export to Clipboard\" (there is generally no reason to save graphics as symbol files)</li> <li>Open the PCB (it is recommended to still leave the image converter window open for now too)</li> <li>Paste the symbol (Ctrl+V for normal people or CMD+V on mac) and place it where you want on the board</li> <li>To place on the back of the board, press the F key with the graphic selected.</li> <li>If the size is wrong, do not attempt to resize it in the PCB. Go back to the image converter window, change the size and export to clipboard again. Paste it into the PCB again. Repeat as needed.</li> <li>Once the graphic is paced where you want it, double click it to open its properties (footprint properties) and uncheck the \"Show\" box next to \"Reference Designator\". Click OK to close the dialog.</li> <li>Note that when you run the DRC check, there will be a footprint warning about the graphic. Just exclude the violation.</li> </ol>"},{"location":"electrical/software/kicad/#thermal-relief-connections-to-pads","title":"Thermal Relief Connections to Pads","text":"<p>When connecting a zone to a pad, it will be thermally relieved by default. This means it will be connected with \"spokes\" instead of solid copper. This is usually desirable, however it can be disabled in the properties of the zone if you need to or specific cases (usually only necessary for high current or if using copper on the board as a heatsink).</p>"},{"location":"electrical/software/kicad/#other-useful-options-features-of-pcb-editor","title":"Other Useful Options / Features of PCB Editor","text":"<ul> <li>You can fill or unfill all copper zones (sometimes called \"polygons\" or \"pours\" or \"planes\") by using <code>Edit &gt; Fill All Zones</code> and <code>Edit &gt; Unfill All Zones</code>. Unfilling zones is useful while working on the board. Filling them lets you see how the zone will be filled after updating the zone itself.</li> <li>You can flip the board view using <code>View &gt; Flip Board View</code>. This is sometimes useful if working on the back of the board. This pairs well with the layer presets on the right below the layer selector (for example, select the all back layers preset).</li> <li>When editing tracks (traces) you can select one part and use the \"U\" and \"I\" keys to select more or less of the track.</li> <li>You can bulk edit fonts of silkscreen text using <code>Edit &gt; Edit Text and Graphics Properties...</code>.</li> <li>You can automatically cleanup traces and vias (remove redundant segments, etc) using <code>Tools &gt; Cleanup Tracks and Vias...</code>. However, be careful with the \"Delete redundant vias\" option. This may delete vias you wanted multiple of for current or heat reasons.</li> </ul>"},{"location":"electrical/software/overview/","title":"Overview","text":"<p>There are various tools and pieces of software used in relation to the electrical design of SeaWolf VIII. These are listed below</p>"},{"location":"electrical/software/overview/#pcb-design","title":"PCB Design","text":""},{"location":"electrical/software/overview/#kicad","title":"KiCad","text":"<p>Required Operating System: Windows, macOS, Linux</p> <p>Download Links: KiCad</p> <p>Used to design PCBs and schematics for various custom boards in use on SeaWolf VIII. KiCad is a free and open source Electronic Design Automation (EDA) tool which is generally easy to learn to use, but powerful enough when needed.</p> <p></p>"},{"location":"electrical/software/overview/#altium-designer","title":"Altium Designer","text":"<p>Required Operating System: Windows</p> <p>Download Links: Altium Designer (license either through university or AquaPack)</p> <p>Many SeaWolf VIII boards were originally designed using Altium Designer. Altium Designer is a proprietary EDA tool. While more commonly used in industry than KiCad, the decision was ultimately made to move to KiCad to simplify library management, reduce software learning curves, and improve operating system compatibility.</p> <p></p>"},{"location":"electrical/software/overview/#msp430-embedded-firmware","title":"MSP430 Embedded Firmware","text":"<p>Custom PCBs used on SeaWolf VIII are designed around TI's MSP430 MCUs or Launchpad development boards. The firmware for these boards is developed using one of the following tools. Note that IAR is intentionally avoided. TI's CCS is free and fully featured with no code size limit. Additionally, IAR's evaluation license only allows access to the newest version of IAR which can make project compatibility and maintenance difficult.</p>"},{"location":"electrical/software/overview/#arduino-energia","title":"Arduino / Energia","text":"<p>Required Operating System: Windows, macOS, Linux</p> <p>Download Links: Arduino IDE | MSP430 Core</p> <p>While the Energia project is officially unmaintained since November 2022, there are builds of the Energia MSP430 Arduino core located at the link above. These builds user newer tooling and fix bugs with some of the chips used. This core can be installed with the official Arduino IDE.</p> <p>Generally, this is used only during prototyping or when rapid firmware development is required.</p> <p></p>"},{"location":"electrical/software/overview/#ti-code-composer-studio-ccs","title":"TI Code Composer Studio (CCS)","text":"<p>Required Operating System: Windows, macOS, Linux</p> <p>Download Link: TI CCS | MSP430 GCC</p> <p>TI's Code Composer Studiohttps://www.ti.com/design-resources/embedded-development/ccs-development-tools.html supports the MSP430 chips using TI's compiler or a separately installed open source GCC compiler. This IDE is Eclipse based and integrates a debugger among many other tools.</p> <p></p>"},{"location":"electrical/software/overview/#circuit-simulation","title":"Circuit Simulation","text":""},{"location":"electrical/software/overview/#ltspice","title":"LTSpice","text":"<p>Required Operating System: Windows, macOS, Linux (through Wine)</p> <p>Download Link: LTSpice</p> <p>LTSpice is a free circuit simulator with builtin models for many Analog Devies / Linear Tech chips. This is generally our preferred circuit simulator as it is easy to install and use. In some cases however, models designed for PSpice (usually TI parts) are not compatible (they are either encrypted or use PSpice features that LTSpice does not have). In these cases other software is used.</p> <p></p>"},{"location":"electrical/software/overview/#pspice-for-ti","title":"PSpice for TI","text":"<p>Required Operating System: Windows</p> <p>Download Link: PSpice for TI (requires TI account and export approval)</p> <p>PSpice for TI is a limited feature version of Cadance's PSpice simulator. It is more difficult to setup, thus we generally prefer LTSpice, however there are cases where this should be used instead (when a TI model is encrypted or when a model uses PSpice features that LTSpice does not support). Note that using ADI / LT devices is often not possible in PSpice. ADI / LT typically provide encrypted LTSpice models only.</p> <p></p>"},{"location":"electrical/software/overview/#hardware-design-fpga","title":"Hardware Design (FPGA)","text":""},{"location":"electrical/software/overview/#vivado-vitis","title":"Vivado &amp; Vitis","text":"<p>Required Operating System: Windows, Linux</p> <p>Download Link: Vivado ML Edition (requires AMD account and export approval)</p> <p>Vivado is used with our Digilent Basys3 FPGA dev board used for the Acoustics system. Vivado is currently used for synthesis, implementation, and bitstreaming. Going forward we intend to explore Vivado's simulation functions too.</p> <p></p>"},{"location":"electrical/software/overview/#scientific-computing","title":"Scientific Computing","text":"<p>Generally used for mathematic modeling, validation, or simulation.</p>"},{"location":"electrical/software/overview/#matlab","title":"MATLAB","text":"<p>Required Operating System: Windows, macOS, Linux</p> <p>Download Link: Accessed through university. Follow university instructions.</p> <p>If MATLAB is available, it is generally advisable to use it over GNU Octave as MATLAB is faster and better supported.</p> <p></p>"},{"location":"electrical/software/overview/#gnu-octave","title":"GNU Octave","text":"<p>Required Operating System: Windows, macOS, Linux</p> <p>Download Link: GNU Octave</p> <p>If MATLAB is not available, GNU Octave is compatible with many MATLAB programs. GNU Octave is free and open source with many packages similar to MATLAB toolboxes as well. While generally compatible with MATLAB code, Octave does not implement all functions. In particular many more recent MATLAB \"helper\" functions (ie advanced string manipulation functions) are not implemented and require more complex sets of operations to replicate in Octave. However, most core math functions are implemented in Octave.</p> <p>Due to the few compatibility issues Octave may have, and the fact that Octave is likely slower than MATLAB, it is usually recommended to use MATLAB if a license is available.</p> <p></p>"},{"location":"electrical/software/overview/#python-3rd-party-packages","title":"Python + 3rd Party Packages","text":"<p>Required Operating System: Windows, macOS, Linux</p> <p>Download Links: Python 3 | NumPy | SciPy | Matplotlib (On Linux use distribution package manager to install python3)</p> <p>Instead of MATLAB it is sometimes preferred (personal preference, language experience, better tool for the particular job, etc) to use Python with a few third party libraries. These libraries are usually <code>numpy</code>, <code>scipy</code>, and <code>matplotlib</code> (install these packages with <code>pip</code>). These libraries can allow python to be a very useful scientific computing tool for many similar applications to how MATLAB or Octave may be used.</p>"},{"location":"electrical/software/overview/#other","title":"Other","text":""},{"location":"electrical/software/overview/#git-scm","title":"Git SCM","text":"<p>Required Operating System: Windows, macOS, Linux</p> <p>Download Link: Git SCM (On macOS install Xcode command line tools; On linux install using distribution package manager)</p> <p>Most of our PCB design files and embedded firmware source code is located in GitHub which uses git as a source control / version control tool. You will need <code>git</code> installed on your computer to use these repositories.</p>"},{"location":"electrical/software/overview/#digilent-waveforms","title":"Digilent WaveForms","text":"<p>Required Operating System: Windows, macOS, Linux</p> <p>Download Link: WaveForms | Adept Runtime (On Linux make sure to install the Adept runtime first. This is not required on Windows or macOS)</p> <p>Many members of the club have an Analog Discover 2 from coursework. WaveForms allows this to be used as an oscilloscope, logic analyzer, waveform generator, spectrum analyzer, and many more tools.</p> <p></p>"},{"location":"electrical/sysdesign/acoustics/","title":"Acoustics System","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p> <p>TODO: Acoustics system overview</p>"},{"location":"electrical/sysdesign/batteries/","title":"Batteries","text":""},{"location":"electrical/sysdesign/batteries/#power-requirements","title":"Power Requirements","text":"<p>SeaWolf VIII's most power consuming components are the thrusters. It uses 8 BlueRobotics T200 thrusters. The following information was sourced from BlueRobotic's site for the T200 thrusters</p> Nominal Voltage Full Throttle Current 10V 14A 12V 17A 14V 21A 16V 24A 20V 32A <p>It is not realistic that all 8 thrusters will be running full throttle at all times. Thus, these current numbers determine how individual thrusters should be fused, not total system power requirements. </p> <p>Note that one thruster's motion will also result in some amount of battery voltage drop, thus a second thruster will have a lower \"nominal\" voltage, and so on for all 8 thrusters. This imposes a limit on max system current draw.</p> <p>For physical size and current draw reasons, it was decided to use 4S LiPo batteries (nominal 14.8V).</p> <p>Based on charts provided by BlueRobotics, it was predicted that SW8's max current draw would be between 40 and 60A. This was later experimentally determined to be an over estimate (all thrusters at full power was measured to be approx 38A steady state).</p> <p>Battery selection was based on the 60A number. This motivated the 2 battery architecture along with a desire for longer run times. Physical size constrained us to 10000mAh batteries. We speculated that a 30A steady-state current draw would be possible while in motion at competition speeds. Thus 10Ah / 30A = 20minutes of runtime per battery. With 2 batteries this would allow 40 minutes of runtime.</p> <p>Please not that the 30A was an over estimate. In practice we seem  to get about 2 hours of runtime off SW8 while holding depth and moving at translational speeds of 30%, which is a reasonable speed for competition runs.</p>"},{"location":"electrical/sysdesign/batteries/#old-batteries","title":"Old Batteries","text":"<p>Originally, SW8 used Turnigy Graphene 4S 10000mAH LiPo Battery Packs. These batteries work well enough, however there are several concerns / potential issues</p> <ol> <li>\"Cheap\" LiPo makers often use reject cells. These are usually not safety concerns, but will result in significantly poorer performance than advertised. There are some indications that these batteries fall in this category.</li> <li>The cells used in cheaper batteries often change over time in the same product. Thus, it is usually difficult or impossible to get a proper MSDS for the batteries without opening one of the same age up. This is a potentially hazardous process and renders the battery useless.</li> <li>Manuals and information is often hard to find</li> <li>These are soft shell LiPo batteries. This is less desirable for our use case as it would provide less protection from moisture in the event of a leak than a hard shell LiPo case.</li> </ol> <p>For these reasons, as well as the age of the batteries, it was decided to transition to a new set of batteries without these issues. The old Turnigy batteries are still kept as a backup set of batteries as they show no signs of concerning wear.</p>"},{"location":"electrical/sysdesign/batteries/#new-batteries","title":"New Batteries","text":"<p>The newer batteries were chose to avoid issues with the previous ones. The selection criteria were as follows</p> <ol> <li>Manufacturer must provide a MSDS or exact cell model number</li> <li>Manufacturer must provide all manuals downloadable before battery purchase</li> <li>Manufacturer manuals must include specs, handling and safety information, as well as disposal information.</li> <li>Ideally, hard shell LiPo battery</li> </ol> <p>The selected batteries currently in use are Gens ace Advanced 10000mAh HardCase Lipo Battery Packs.</p> <p>Gens ace provides all required information on the batteries, and are generally regarded as being one of the better LiPo manufacturers in hobby communities (generally, they don't over spec batteries and seem to not use reject cells). The batteries in question are still 4S 10000mAh batteries and physically fit in the same battery hulls as the old batteries used. They are also hard shell LiPos with some additional safety features builtin (over discharge warning, imbalance warning, etc).</p>"},{"location":"electrical/sysdesign/cameras/","title":"Cameras","text":"<p>The current Cameras used on SeaWolf VIII are based on ArduCam B0292 cameras. These camera modules connect to a computer by USB and are UVC compliant, meaning they should easily work on most operating systems.</p> <p></p> <p>Note that a specific firmware must be flashed to these cameras for them to work properly with a Jetson Nano and for them to perform well in low light. See instructions below.</p> <p>The current camera enclosures are designed to be able to house two camera modules each. This is to allow stereo vision capabilities in the future. However, for now they are assembled using a single camera module.</p> <p></p>"},{"location":"electrical/sysdesign/cameras/#camera-firmware","title":"Camera Firmware","text":"<p>When wiring a new camera, or installing a new camera in the camera hull, it is necessary to make sure it is running the correct firmware. This requires a windows PC.</p> <p>The camera firmware is flashed using a tool provided on the ArduCam forums. A zip with this flash tool and the firmware file to be flashed is located here.</p> <p>This tool is windows only. Additionally, it seems to have issues (cuts off part of the UI) on HiDPI systems. You may need to set display scaling to 100% in windows settings before running the program.</p> <p>After downloading the zip, extract it. There will be two things</p> <ul> <li>A folder named <code>CommonBurnerAP v1.0.1.4</code></li> <li>A <code>.src</code> firmware file</li> </ul> <p>In the <code>CommonBurnerAP</code> folder run <code>CommonBurnerAP.exe</code>. You must connect the camera you want to flash before launching <code>CommonBurnerAP.exe</code>.</p> <p>Once launched, reference the image below and follow the steps below</p> <ul> <li>Make sure the tab labeled \"A\" is selected.</li> <li>Select the button labeled \"B\". This will bring up a file explorer window. Choose the <code>.src</code> firmware file</li> <li>Click the button labeled \"C\". This will start flashing. Wait for the flash to finish before disconnecting the camera.</li> </ul> <p></p>"},{"location":"electrical/sysdesign/cameras/#cable-assembly","title":"Cable Assembly","text":"<p>The cable used for the cameras is an Igus CFBUS.PUR.068 cable. This cable is designed for USB 3.0 (8 pins with two shielded pairs), however we instead use it for 2x USB 2.0. This just means the shielding on the second set of wires is not strictly required.</p> <p>USB 3.0 uses the following wire colors (paired)</p> <ul> <li>Red, Black (5V power)</li> <li>White, Green (Main data pair)</li> <li>Yellow, Blue (Supper Speed Direction 1)</li> <li>Orange, Purple (Super Speed Direction 2)</li> </ul> <p>USB 2.0 uses the following</p> <ul> <li>Red, Black (5V power)</li> <li>White, Green (Main data pair)</li> </ul> <p>Thus, for one camera, we can match wire colors. For the other camera, follow the table below.</p> Igus Wire Color Camera 1 Cable Color Camera 2 Cable Color Red Red --- Black Black --- White White --- Green Green --- Orange --- Red Purple --- Black Yellow --- White Blue --- Green <p>This creates a cable looking something like the following where inside the enclosure there are two camera cables with ZHR-4 connectors for the camera modules. These go to a single cable running to the main hull, and inside the main hull they are split into two USB 2.0 type A connectors.</p> <p>Note that the ZHR-4 connectors are from the wire that comes with the cameras. It is cut and spliced to the Igus cable.</p> <p></p> <p></p> <p>Also note that the pinout for the fischer is located on the Endcap Pinout page.</p>"},{"location":"electrical/sysdesign/cameras/#penetrator","title":"Penetrator","text":"<p>Before anything else is done, install a penetrator (or wetlink penetrator) on the cable. Leave approx 5 inches of stripped wire after the penetrator.</p> <p></p> <p>Follow mechanical team procedures for penetrator installation (or have mech team follow said procedures).</p>"},{"location":"electrical/sysdesign/cameras/#camera-connector-splice","title":"Camera Connector Splice","text":"<p>Cut the top 2-3 inches of a camera cable off and remove the outer insulation. This leaves a ZHR-4 with four wires (red, black, green, white). Splice these to the penetrated wire as shown in the table / diagram above.</p> <p>*Note that the picture below was taken while assembling for one camera. For a second camera, repeat the process with a second camera cable and splice to the orange, purple, yellow, and blue wires.</p> <p></p>"},{"location":"electrical/sysdesign/cameras/#fischer-plug","title":"Fischer Plug","text":"<p>The fischer plug needs to be soldered onto the cable matching the pinout here. Follow general fischer soldering and assembly procedures here.</p> <p>Note that this fischer receptacle is more difficult to solder to than most. This is partially due to the three unused pins in the middle, partially due to the small wire gauge, and partially due to the length of wire you are able to strip back.</p> <p>Even if you are only assembling for one camera, solder all wires to the fischer plug. Failure to do so will result in a much weaker connection to the wire.</p> <ol> <li> <p>Strip 1cm (no more) of outer insulation off the Igus cable. Remove the paper shielding and mesh foil from all wires. Removing the paper and shielding is \"difficult\" (time consuming) and best done carefully using flush cuts. Make sure not to cut off any cables.</p> <p></p> </li> <li> <p>Strip about 2mm of each wire and tin it. Do not strip more than 2mm. This wire insulation on the inner wires melts before solder, so it will shrink when you tin the wire. After tinning, you should have approx 4mm of wire exposed. If less is exposed, strip off a little more insulation.</p> <p></p> </li> <li> <p>Then solder the wire to the fischer plug as you would normally solder a fischer. Follow the pinout. It is recommended to solder wires in the following order. You may have to cross wires across the connector and this order minimizes effort.</p> <ul> <li>Of the following colors, solder whichever is \"easier\" first.</li> <li>red or black</li> <li>white or green</li> <li>yellow or blue</li> <li>purple or orange</li> <li>Then repeat the same order but the other color.</li> </ul> <p></p> </li> <li> <p>Once soldered, as always, fully assemble the plug, connect it to a receptacle, and make sure there is not continuity between any used pins. Note that continuity between the three center pins is possible (due to contact with remnants of wire shielding), but is acceptable since they are unused.</p> </li> </ol>"},{"location":"electrical/sysdesign/cameras/#fischer-receptacle","title":"Fischer Receptacle","text":"<p>The fischer receptacle is much easier to assemble, primarily because the wire does not need to be so short.</p> <ol> <li> <p>Find a USB-A cable and cut off the other end (ie if it was a USB-A to USB-microB cable, cut off the micro-B side). It is best to find a cable with a similar USB-A connector to the one pictured. The outer material is rubber, which is important for step 2.</p> <p></p> </li> <li> <p>Using flush cuts, trim down the USB-A outer rubber to make it fit through the fisher recepticle's nut.</p> <p></p> <p></p> </li> <li> <p>Strip and solder to the receptacle according to the endcap pinout. Note that only one wire is shown here. If two cameras are used, add a second USB-A cable to the recepticle on the apropriate pins. Follow the endcap pinout and table / diagram at the top of this section.</p> <p></p> </li> <li> <p>As always, add hot glue to the receptacle for strain relief.</p> <p></p> </li> </ol>"},{"location":"electrical/sysdesign/endcap/","title":"Endcap Pinout","text":"<p>Note that this page is currently an outline and most of the content is not yet written.</p>"},{"location":"electrical/sysdesign/moab_power/","title":"Power System","text":"<p>SeaWolf VIII's (SW8) power system consists of several components layed out on and wired together on MOAB / FOAB. There is no central \"power system\" PCB / board on SW8. The components of the power system are described here. The boards involved have more detail on their pages under the \"Boards\" section.</p>"},{"location":"electrical/sysdesign/moab_power/#power-input","title":"Power Input","text":""},{"location":"electrical/sysdesign/moab_power/#battery-input","title":"Battery Input","text":"<p>SeaWolf VIII is powered by two 4-cell (4S) LiPo batteries. Each battery is fused at 40A of current. These batteries are connected in parallel allowing for a total of 80A current draw from the batteries.</p> <p>However, there are some cases where connecting LiPo batteries in parallel could cause issues</p> <ol> <li>The LiPos are charged to different levels. In this case one would charge the other. This would not be a proper balance charge process. This could lead to fires.</li> <li>One battery drains faster than the other (different age, wear / tear, different cells). While this is less likely, it could lead to one battery charging the other. This could again lead to fires.</li> </ol> <p>To address these issues, SW8 has a \"Load Balancing Board\" used to connect the batteries in \"parallel\". The load balancing board conceptually chooses the higher voltage of the two batteries. The system is powered from that battery. When the batteries are charged equally, this effectively balances the load due to voltage drop of the battery under load. The output of the LBB is referred to as \"Vbat\" or \"battery voltage\" in the rest of the documentation.</p> <p>Note that if one battery is not charged or is performing poorly, this can lead to the other battery handing more load. In this case, the fused current limit is not the full 80A. However, in practice SW8 rarely pulls over 40A current (it is capable of running on a single battery if needed).</p> <p>Currently, there is no voltage or current monitor. However, there are plans to add individual voltage and current monitors for each battery (between LiPo and LBB). These monitors will likely be standalone modules initially, but can be integrated into LBB at a later date.</p>"},{"location":"electrical/sysdesign/moab_power/#power-switching","title":"Power Switching","text":"<p>There are two Solid State Relays (SSRs) used to switch power on SeaWolf VIII. The first one is the \"System Power SSR\". The output of this SSR is used to power the main system (everything except thrusters). This is unregulated voltage (battery voltage level).</p> <p>The second SSR is the \"Thruster Power SSR\". This switches power on and off to the thrusters. This SSR is powered through the system SSR. Thus, if the system is off the thrusters are too. However the system can be switched on with the thrusters off. This allows the thrusters to be disconnected from power when the vehicle is in the \"killed\" state. Thrusters are powered when the vehicle is in the \"armed\" state.</p> <p>The SSRs are controlled by the MEB. The system SSR is connected to the system power switch. This switch pulls the control line to GND to power the system on. Once the MEB boots, a GPIO holds this line LOW to keep the system on. To turn the system off, the system switch placed in the \"off\" position will pull this line high, thus turning off the SSR. See the MEB page for more details.</p> <p>Similarly, the MEB controls the Thruster SSR. The control signal for this, however, is not controlled by MEB software (it just runs through traces on the MEB). Normally, this control line is floating. However, the physical killswitch is connected between this line and GND. When the killswitch is closed, the line is pulled low and the thruster SSR is on. Thus the thrusters have power. When the killswitch is open, the line is floating and the thruster SSR is off.</p> <p>Additionally, on newer versions of MEB (v1.2+) there is a software kill switch MOSFET. This mostfet is in series with the killswitch. The MOSFET is controlled by a GPIO signal directly from the Jetson. This acts as a \"software kill\". Both the software arm (GPIO high) and hardware arm (killswitch closed) must occur for the thrster SSR to be on. Again, see the MEB page for more details.</p>"},{"location":"electrical/sysdesign/moab_power/#power-distribution","title":"Power Distribution","text":"<p>As previously described, there are two main power domains: system power and thruster power.</p> <p>System power is distributed using a Powerwerx PD-8 distribution block (powerpole connectors). Power from the system power SSR is run directly into this bar. Regulators for various system components.</p> <p>TODO: Picture</p> <p>Thruster power is distributed through two \"bars\". One is simply a ground bar. The system ground is connected directly to this bar and the GND connection of the ESCs are connected to the bar. This ground bar is used only for the thrusters. There is also a fuse bar used for thruster power. The fuse bar has one fuse for each of the 8 thrusters / ESCs (currently fused at 25A).</p> <p>TODO: Picture</p>"},{"location":"electrical/sysdesign/moab_power/#regulators","title":"Regulators","text":"<p>SeaWolf VIII uses a distributed power regulation architecture. This allowed for early development in a modular fashion early on. However, it should be noted that the distributed architecture is becoming quite messy. It is planned to eventually move away from such an architecture.</p>"},{"location":"electrical/sysdesign/moab_power/#jetson-power-regulators","title":"Jetson Power Regulators","text":"<p>The Jetson Nano requires a 5V power supply capable of supplying 4A of current. Many such supplies exist fiarly cheap on amazon, such as this one, which we initially used. However, these supplies tend to have a high dropout voltage (eg min input is 8V for a 5V output).</p> <p> Old Jetson Regulator</p> <p>However, it was observed that arming the thrusters resulted in a current draw spike. This dropped battery voltage to about 7.6V for 100 microseconds. However, this was long enough to drop the regulator output to 3.8V and brown out the Jetson.</p> <p>Our initial solution to this problem was to switch to a better regulator with a lower dropout, specifically Pololu D24V50F5. However, we were still able to brown out the Jetson because buck regulators tend to be sensative to input voltage drops. To address this, a dual stage regulator architecture was selected:</p> <ul> <li>First, battery voltage is regulated to 12V using a 2A SEPIC topology regulator</li> <li>Second, the 12V is regulated to 5V using a 4A+ Buck topology regulator</li> </ul> <p></p> <p>The SEPIC topology is more tolerant of rapid input voltage changes, however a high current (4A) SEPIC is more difficult to find than a lower current one. Thus, 12V@2A is easier than 5V@4A (note: this is true when buying a regulator and likely also when designing one). However, since the jetson requires 5V, a 5V buck regulator is also required to supply the system with enough power. The regulators used for this are</p> <ul> <li>12V@2A SEPIC: Pololu S18V20F12</li> <li>5V@4A Buck: Pololu D24V50F5</li> </ul> Part Selection justification <p>Justification for the compound regulator design based on graphs on product pages:</p> <ul> <li>Worst \u201csteady state\u201d case: Vbat = 12.8V, Icomputer = 4A<ul> <li>Pcomputer = 5V * 4A 0= 20W</li> <li>P12V = Pcomputer / efficiency = 20W / 0.92 = 22W</li> <li>I_12V = P12V / 12V = 1.8A (less than expected 2.5A max output at this battery input)</li> </ul> </li> <li>Worst \u201cpossible\u201d case: If Pcomputer = 20W and 12V regulator is only 80% efficient<ul> <li>P12V = 20W / 0.8 = 25W</li> <li>I_12V = 25W / 12V = 2.08A</li> </ul> </li> </ul> <p>Expected output current of 12V regulator for vbat = 8V up to 24V is at least 2.25A, thus this handles both worst cases properly given our system requirements, even during the 100 microsecond battery voltage drop to ~8V.</p> <p>With the dual regulator architecture described above, no meaningful voltage drops (over 0.05V) were observed on the Jetson's 5V line when arming thrusters (though battery voltage dropping to 7.6 was still observed). </p> Notes on Voltage Drop when Arming <p>It was also concluded that inrush current when powering the ESCs is an expected quantity. Thus, the voltage drop is not indicative of a flaw in the system. However this could indicate of poorer battery performance than advertised.</p> <p>At the time of testing we were using the \"old\" Turnigy Graphene 4S 10000mAH LiPo batteries. While advertised as being 15C batteries, it is suspected that they may not be or that they may not handle current spikes well. It is possible this would be less of an issue with better batteries (untested as of now).</p> <p>Regardless, the change in regulator architecture results in a more robust system capable of being run off a wider range of power source. Thus, it is still a worthwhile change to keep even if unnecessary in the future with potentially better batteries.</p>"},{"location":"electrical/sysdesign/moab_power/#other-regulators","title":"Other Regulators","text":"<p>Other systems are less sensitive to short term voltage drops (and pull lower amounts of current than the jetson, resulting in lower drops on regulator outputs). Thus, a single buck regulator is sufficient in other cases.</p> <p>Currently, the only other regulated power required in the system is 5V. This is required by the following components (excluding USB powered devices)</p> <ul> <li>MSB</li> <li>Acoustics system (distribution board)</li> <li>USB Hub</li> </ul> <p>All of these devices use off-the-shelf \"UBEC\" modules from Adafruit: Adafruit UBEC capable of supplying 3A of current. Note: we have tested similar looking cheaper UBECs from Amazon. These are done incorrectly and fail quickly or cannot supply sufficient current.</p>"},{"location":"electrical/sysdesign/moab_power/#usb-powered-devices","title":"USB Powered Devices","text":"<p>USB power is generally only used to power devices that the Jetson directly communicates with. It is unnecessary to connect USB data without power for most such devices. Thus, the following devices are powered over USB.</p> <ul> <li>MEB*</li> <li>Acoustics FPGA</li> <li>All cameras (either 2 or 4; depends on whether mono or stereo vision configuration)</li> <li>Control Board</li> </ul> <p>Note that some of these devices are powered off the USB hub's UBEC. Typical USB ports on a computer (including the Jetson) are only capable of supplying 480mA to 600mA per port. Thus, when adding a 4-port hub, this cuts the power down to 25% per port on the hub. To address this, the hub is independently powered allowing more current per port on the hub. This dedicated regulator also allows the hub to supply slightly more power per device than the jetson can. Thus, high current devices (if any) should be connected to the hub, not directly to the jetson.</p> <p>* MEB should currently always be powered off the USB hub. The jetson's USB ports take about 30 second to power on after the jetson gets power. Thus, if connected to the jetson, it takes about 30 second for MEB to get power and boot. MEB cannot hold the system powered on until it boots, thus when MEB is connected to the jetson, the system switch must be connected and left in the ON position for about 30 seconds before removing it. In contrast, the UBEC starts and powers the USB hub (and anything connected to the hub) as soon as the system is powered on. Thus, the system switch only needs to be left in place for a few seconds at most.</p>"},{"location":"electrical/sysdesign/moab_power/#moab-foab-layout","title":"MOAB / FOAB Layout","text":"<p>TODO: Image</p>"},{"location":"electrical/sysdesign/overview/","title":"Overview","text":""},{"location":"electrical/sysdesign/overview/#moab-foab","title":"MOAB / FOAB","text":"<p>The Mother Of All Boards (MOAB) and Father Of All Boards (FOAB) are the two copies of the electrical system use in SeaWolf VIII. MOAB and FOAB refer to the whole assembly on which the electronic system is assembled. It also serves to mean \"the whole electrical system\" for the purposes of most documentation.</p> <p>There are two such boards, however the two are rarely identical. The idea is that one is a stable platform (and in active use by software at pool tests) while the other is the electrical team's working platform. Once electrical team finishes making and testing changes, the working and stable platforms swap.</p> <p>For example, if MOAB is stable and used in the robot, a new board could be added to FOAB. Once added and verified, FOAB and MOAB would be swapped making FOAB the stable system. MOAB would then be updated to match FOAB's changes and the next set of changes would occur on MOAB.</p> <p>TODO: Picture</p>"},{"location":"electrical/sysdesign/overview/#system-block-diagram","title":"System Block Diagram","text":"<p>Last Update: 05/24/2023 by Marcus Behel</p> History <p>05/24/2023: Add cameras (Marcus Behel) 03/16/2023: Initial Drawing (Marcus Behel)</p>"},{"location":"electrical/sysdesign/overview/#system-description","title":"System Description","text":"<p>SeaWolf VIII (SW8) is designed to use a Jetson Nano as its main computer. This computer runs mission code along with vision and machine learning algorithms.</p> <p>The following devices are connected to the computer via USB</p> <ul> <li>Main Electronics Board (MEB): The MEB handles system power and acts as a communication bridge between the Jetson and the electrical system. The Jetson communicates with the MEB via UART (over USB). The MEB connects to sensors and other parts of the electrical system via I2C. When the computer needs to use other parts of the electrical system (eg the Manipulator Systems Board or MSB to control droppers) the computer will send a message to the MEB. The MEB will then send the correct command to the MSB via I2C. For more details on the MEB itself see the MEB page.</li> <li>Acoustics FPGA: Currently, the computer communicates with the acoustics system via UART using the USB/UART converter builtin to the FPGA development board. Eventually, the goal is to re-design this so that the acoustics system is connected to MEB via I2C and the computer communicates with it via the MEB. For details on the acoustics system design see the Acoustics System page.</li> <li>Control Board: This is a motion coprocessor. The computer instructs the control board to perform a motion using a high-level description of that motion. The control board handles achieving that motion using the vehicle's thrusters. The computer talks to the control board via UART (over USB). See the Control Board page for more details.</li> <li>Cameras: Each camera is either a mono or stereo camera. These cameras are used for vision by mission code. See the Cameras page for details on the camera assemblies.</li> </ul> <p>In addition to the devices mentioned above, the following are important parts of the electrical system design</p> <ul> <li>Power: The MOAB / FOAB contains the power system for SeaWolf VIII. SeaWolf VIII runs off two 4-cell LiPo batteries. These batteries power the thrusters through a kill mechanism (although no voltage regulation occurs). Other systems run off regulated battery power (typically either 3.3V or 5V). See the Power System page for details.</li> <li>Thrusters &amp; ESCs: SeaWolf VIII uses BlueRobotic's T200 thrusters along with their \"Basic ESC\"s. These are connected to and managed by the control board.</li> </ul>"},{"location":"mechanical/overview/","title":"Overview","text":"<p>TODO: Mechanical design overview</p>"},{"location":"procedures/dryrun/","title":"SeaWolf 8 Dryrun Procedures","text":"<p>Warning</p> <p>Unless you know what you are doing, please use the team laptop instead of your personal device</p> <p>It is known to work and most troubleshooting instructions assume that you are using it</p>"},{"location":"procedures/dryrun/#connect-to-the-system","title":"Connect to the system","text":"<ol> <li>Connect BOTH batteries to the robot (this is important! LBB is known to misbehave a little if the robot is powered on with only one battery present!)</li> <li>Power the robot on using the system switch</li> <li>Connect the tether to the end cap and the other end to your computer</li> <li>Wait up to 2 minutes for your computer to connect to the Jetson by ethernet. Once connected, continue. Otherwise, see Jetson Troubleshooting.</li> <li>SSH into the Jetson by running the following command in a terminal (works on windows too):      <pre><code>ssh sw8@192.168.2.5\n</code></pre><ol> <li>If prompted about a \"fingerprint\" enter \"yes\"</li> <li>Enter the password when prompted (ask other members if you don't know the password)</li> <li>Once you've entered the password, you'll have a ssh session connected to the Jetson. You'll see a shell from the Jetson in your terminal now.</li> </ol> </li> </ol> <p>Example</p> <p></p>"},{"location":"procedures/dryrun/#verify-everything-is-connected-to-the-jetson","title":"Verify everything is connected to the Jetson","text":"<p>Important</p> <p>Run the following commands on the Jetson over the ssh connection.</p> <p>Info</p> <p>The output will vary slightly because:</p> <ul> <li>These names include serial numbers</li> <li>The control board may be either Adafruit or STMicroElectronics</li> <li>Peripheral devices like acoustics may not be installed</li> </ul> <p>First make sure all necessary devices are present: <pre><code>ls /dev/serial/by-id/\n</code></pre></p> <p>You should see several devices. Make sure the following exist:</p> <ul> <li>1 Control Board</li> <li>2 Texas Instruments devices (MEB, it's actually just one device but shows up as two)</li> </ul> <p>If acoustics is installed, make sure the following exist:</p> <ul> <li>2 Digilent devices (Acoustics FPGA, it's actually just one device, but shows up as two).</li> </ul> <p>Example output</p> <p></p> <p>As you can see:</p> <ol> <li>The second device is our control board (it contains \"Control_Board\" in its name)</li> <li>The third and fourth devices are our two Texas Instruments devices (they contain \"Texas_Instruments\" in ther names)</li> <li>The acoustics FPGA is not connected, so no device appears (but if it were, it would contain \"Digilent\" in its name)</li> </ol> <p>Then, make sure cameras are connected: <pre><code>v4l2-ctl --list-devices\n</code></pre></p> <p>Example Output</p> <p> You should see two devices labeled <code>FrontCam</code> and <code>BottomCam</code> (two different sections as shown above!)</p>"},{"location":"procedures/dryrun/#test-arm-kill","title":"Test Arm &amp; Kill","text":"<ol> <li>Arm the robot using the hardware switch</li> <li>The thrusters should beep 5 times<ol> <li>3 short beeps in rising pitch</li> <li>1 long beep at a lower pitch</li> <li>1 long beep at a higher pitch</li> </ol> </li> <li>Wait 3 seconds</li> <li>Disarm the robot</li> <li>Wait 3 seconds</li> <li>Rearm the robot</li> <li>The thrusters should beep again</li> </ol> <p>If you do not hear all 5 beeps when arming, see troubleshooting details </p> <p>If your SSH connection to the Jetson closes unexpectedly, see here</p>"},{"location":"procedures/dryrun/#motor-test","title":"Motor Test","text":"<p>Info</p> <p>This assumes <code>AUVControlBoard</code> interface scripts are located at <code>~/AUVControlBoard</code> on the Jetson.</p> <p>The correct version of the scripts should already be selected. If you need to change versions, do the following:</p> <ol> <li>Get the name of the version you want from this page</li> <li>Run the following commands, replacing <code>VERSION</code> with the name of the version you want: <pre><code>cd ~/AUVControlBoard\ngit checkout VERSION\ncd ~\n</code></pre></li> </ol> <p>First, run the following commands: <pre><code>export CB_PORT=$(realpath /dev/serial/by-id/*Control_Board*)\necho $CB_PORT\n</code></pre></p> <p>This should print out something like <code>/dev/ttyACM0</code>, where the <code>0</code> is any number.  If it does not, the Jetson is not recognizing that a control board is connected. You should start by rebooting.</p> <p>Next, run the following commands <pre><code>cd ~/AUVControlBoard/iface\n./launch.py -p $CB_PORT example/motor_test.py\n</code></pre></p> <p>The final command  is a script that will prompt for dry run settings (speed and duration):</p> <ol> <li>When prompted for speed, press enter to use the default setting</li> <li>When prompted for duration, press enter to use the default setting</li> <li>Then, type each thruster number followed by enter and make sure that the thruster moves</li> <li>After testing all thrusters, type \"q\" and press enter to exit.</li> </ol> <p>Info</p> <p>If you get error 255 from the control board scripts, this indicates a timeout occurred. This is likely not a communication error with the control board. Just re-run the script and try again. It should work.</p> <p>If any of the following occur, fix them!</p> <ul> <li>Wrong thruster numbers moving</li> <li>Thrusters not moving when their number is entered</li> <li>Thrusters moving \"weakly\" or \"clicking\" while moving (usually means power pole block is not seated properly)</li> </ul>"},{"location":"procedures/dryrun/#lbb-test","title":"LBB Test","text":"<ol> <li>Disconnect one battery</li> <li>Repeat the motor test</li> <li>Plug the disconnected battery back in</li> <li>Disconnect the OTHER battery</li> <li>Repeat the motor test</li> </ol> <p>The motor test should work off either battery on its own. If it is not, the LBB may not be working or one battery may not be working (check fuses, voltage on fischer, etc)</p>"},{"location":"procedures/dryrun/#setting-meb-port","title":"Setting MEB Port","text":"<p>Run the following to determine what communication port MEB is on: <pre><code>export PORT=$(realpath /dev/serial/by-id/usb-Texas_Instruments_MSP_Tools_Driver_*-if02)\necho $PORT\n</code></pre> This should output something like <code>/dev/ttyACM1</code>, where the 1 can be any number. If it does not, see MEB Troubleshooting.</p>"},{"location":"procedures/dryrun/#meb-communication-voltage-monitor","title":"MEB Communication &amp; Voltage Monitor","text":"<p>Info</p> <p>This assumes the MEB software scripts folder is located at <code>~/SW8E-MEB-Software/scripts/</code> on the Jetson</p> <p>Run the following command (the <code>PORT</code> variable we exported in Setting MEB Port is used): <pre><code>cd ~/SW8E-MEB-Software/scripts/\npython3 read_sys_voltage.py $PORT 57600\n</code></pre></p> <p>Info</p> <p>The voltage monitor is currently not calibrated, so do not worry about ensuring that the correct battery voltage is being read.</p> <p>You should still complete this step to test communications with MEB.</p> <p>Make sure correct battery voltage is being read. Hold CTRL and press C (CTRL+C) to exit the program.</p> <p>If the wrong voltage is read, the voltage monitor is not working.</p> <p>If you get serial communication errors, MEB may not be communicating properly (or you may be using the wrong port).</p>"},{"location":"procedures/dryrun/#msb","title":"MSB","text":"<p>Info</p> <p>This assumes the MEB software scripts folder is located at <code>~/SW8E-MEB-Software/scripts/</code> on the Jetson</p> <p>Important</p> <p>You will need dropper makers loaded to observe correct behavior, but loading torpedoes is discouraged</p> <p>Run: <pre><code>cd ~/SW8E-MEB-Software/scripts/\n</code></pre> The MEB is used to communicate with MSB, thus the <code>PORT</code> variable we exported in Setting MEB Port is used in the following commands. You should be able to just copy and pase these commands.</p> <p>Run each of the following commands:</p> <ol> <li>Reset (Droppers should hold markers and torpedoes are in loaded position)      <pre><code>python3 msb_command.py $PORT 57600 reset\n</code></pre></li> <li>Drop marker 1    <pre><code>python3 msb_command.py $PORT 57600 d1_trig\n</code></pre></li> <li>Drop marker 2    <pre><code>python3 msb_command.py $PORT 57600 d2_trig\n</code></pre></li> <li>Fire torpedo 1    <pre><code>python3 msb_command.py $PORT 57600 t1_trig\n</code></pre></li> <li>Fire torpedo 2    <pre><code>python3 msb_command.py $PORT 57600 t2_trig\n</code></pre></li> <li>Reset (Droppers hold markers and torpedoes return to loaded position again)    <pre><code>python3 msb_command.py $PORT 57600 reset\n</code></pre></li> </ol>"},{"location":"procedures/dryrun/#acoustics-system","title":"Acoustics System","text":"<p>TODO</p> <p>This will be written once there is a stable test interface for acoustics. For now, refer to the acoustics project people and have them test what they want.</p>"},{"location":"procedures/dryrun/#camera-stream-test","title":"Camera Stream Test","text":"<p>Info</p> <p>This assumes the Cam test scripts folder is located at <code>~/SW8S-CamTest</code> on the Jetson</p> <p>Info</p> <p>The RTSP server (mediamtx) is automatically started by a systemd user service.</p> <p>Run the following to check the status of the service (press 'q' to exit): <pre><code>systemctl --user status mediamtx.service\n</code></pre></p> <p>Run: <pre><code>~/SW8S-CamTest/startstreams.sh\n</code></pre></p> <p>Important</p> <p>This script will not exit on its own unless it fails. If it exits on its own, the cameras are probably not connected!</p> <p>Next, you need to use VLC on your computer to view the streams and make sure they are working. Note that the streams will be \"delayed\" when viewing with VLC, but this is OK. To view with less latency, you can install <code>mpv</code> and use the <code>playstreams.sh</code> scripts in the SW8S-CamTest repo (if you don't know what this means, just test with VLC).</p> <p>To view with VLC:</p> <ol> <li>Leave the ssh session open</li> <li>Launch VLC</li> <li>Media &gt; Open Network Stream</li> <li>Enter <code>rtsp://192.168.2.5:8554/front.mp4</code></li> <li>Click \"Play\"</li> <li>Wait until you see the stream</li> <li>Media &gt; Open Network Stream</li> <li>Enter <code>rtsp://192.168.2.5:8554/bottom.mp4</code></li> <li>Click \"Play\"</li> <li>Wait until you see the stream</li> <li>Close VLC</li> </ol>"},{"location":"procedures/dryrun/#disarm-and-power-off-safely","title":"Disarm and Power Off Safely","text":"<ol> <li>Disarm the robot using the hardware switch</li> <li>Run the following command:    <pre><code>sudo poweroff\n</code></pre></li> <li>Wait 30 seconds</li> <li>Turn the system off with the system switch</li> </ol>"},{"location":"procedures/pooltestcomm/","title":"Pool Test Communication","text":"<p>TODO</p>"},{"location":"procedures/sealing/","title":"Sealing","text":""},{"location":"procedures/sealing/#main-hull","title":"Main Hull","text":""},{"location":"procedures/sealing/#electrical-preparation","title":"Electrical Preparation","text":"<ul> <li> <p>Check the wires on Fischer receptacles on the endcap. Make sure none have been torn loose.</p> </li> <li> <p>Ensure all wires on MOAB or FOAB (whichever is being sealed in the robot) are constrained and will not get caught on anything</p> </li> <li> <p>Check the Acoustics System.</p> Details <ul> <li>Ensure that 4 single-channel boards are present.</li> <li>Ensure the hydrophone power switch is in the \"ON\" position</li> <li>Make sure the FPGA board's power switch is in the \"ON\" position</li> </ul> </li> <li> <p>Double check electrical system wiring</p> Details <ul> <li>Control board<ul> <li>USB to jetson</li> <li>Depth sensor cable properly seated on connector</li> <li>PWM to ESCs all properly seated on connectors</li> </ul> </li> <li>MEB<ul> <li>USB from MEB to USB hub</li> <li>System switch wire connected</li> <li>Kill switch wire connected</li> <li>I2C cable to MSB present</li> <li>Battery power cable connected</li> <li>Leak sensor wires connected</li> </ul> </li> <li>MSB<ul> <li>I2C wire to MEB connected</li> <li>2x Torpedo Wires connected (not currently used)</li> <li>2x Dropper Wires connected</li> <li>5V regulator (UBEC) connected</li> </ul> </li> <li>Jetson Nano<ul> <li>Ethernet connected</li> <li>Software kill wire on GPIO (not currently used)</li> <li>USB hub connected</li> <li>Power connected to barrel jack</li> </ul> </li> <li>Acoustics System<ul> <li>UBEC connected to distribution board</li> <li>USB from FPGA to USB hub or jetson</li> <li>One hydrophone wire pair connected per single channel board (4 total)</li> <li>4x Wires from each single channel board to FPGA dev board</li> </ul> </li> </ul> </li> <li> <p>Insert MOAB or FOAB making sure it fully seats into the powerpole block connector. Make sure it is inserted in the correct orientation.</p> </li> <li> <p>Connect all wires from MOAB/FOAB to the endcap</p> Details <ul> <li>Ethernet (tether)</li> <li>2x Camera USB to USB hub</li> <li>4x Hydrophones</li> <li>Depth sensor</li> <li>Kill switch</li> <li>System switch</li> <li>Torpedos (not currently used)</li> <li>Droppers</li> <li>LED strip</li> </ul> </li> <li> <p>Before sealing, dry run</p> </li> </ul>"},{"location":"procedures/sealing/#sealing","title":"Sealing","text":"<p>TODO</p>"},{"location":"procedures/sealing/#pressure-test","title":"Pressure Test","text":"<p>TODO</p>"},{"location":"procedures/sealing/#battery-hulls","title":"Battery Hulls","text":""},{"location":"procedures/sealing/#electrical-preparation_1","title":"Electrical Preparation","text":"<ul> <li>Ensure battery is charged!</li> <li>Check fuse in fuse adapter to make sure it is not burned out</li> <li>Connect battery through endcap and make sure voltage is measured on end of fischer (use a loose receptacle to measure!)</li> <li>Make sure leak probes are in correct positions and attached to leak sensor in hull</li> </ul>"},{"location":"procedures/sealing/#sealing_1","title":"Sealing","text":"<p>TODO</p>"},{"location":"procedures/sealing/#pressure-test_1","title":"Pressure Test","text":"<p>TODO</p>"},{"location":"procedures/troubleshooting/arm/","title":"Troubleshooting Arming","text":"<p>If you do not here all 5 beeps when arming the robot, it means that the ESCs are not fully initialized. See BlueRobotics ESC Beeps for further explanation.</p> <ol> <li>First, check that both batteries are connected</li> <li>If the issue persists, disarm and reboot the robot</li> <li>If the issue still persists, it is likely that the control board somehow disconnected. The robot will need to be opened to ensure that everything is connected.</li> </ol>"},{"location":"procedures/troubleshooting/jetson/","title":"Jetson Troubleshooting","text":"<p>General troubleshooting steps include ensuring that:</p> <ul> <li>Its lights are turned on</li> <li>The correct SD card is inserted</li> <li>The power cable is plugged into the barrel jack of its carrier board</li> <li>The other end of the power cable is connected to power</li> <li>All USB cables are connected to Jetson either directly or through the USB hub</li> <li>All of the ports on the USB hub are active (the light should be on and the button depressed)</li> <li>The ethernet cable is connected to the endcap</li> </ul>"},{"location":"procedures/troubleshooting/jetson/#unexpected-reboot-when-arming","title":"Unexpected Reboot When Arming","text":"<p>If the Jetson loses power and reboots when you arm the robot, ensure that both batteries are actually connected inside of the battery hulls. This problem was observed when both battery hulls were connected to the robot, but one battery hull was disconnected from its battery internally.</p>"},{"location":"procedures/troubleshooting/jetson/#checking-connection","title":"Checking Connection","text":"<p>Important</p> <p>Most connection problems can be resolved by waiting for a few minutes and retrying.</p> <p>However, you should never have to wait longer than 3 minutes. If you do, continue to the troubleshooting steps below.</p> <p>To establish an SSH connection to the Jetson, two important things must happen:</p> <ol> <li>The computer must obtain an IP address from the DHCP server running on the Jetson</li> <li>The SSH server running on the Jetson must be available to receive connections from the computer</li> </ol>"},{"location":"procedures/troubleshooting/jetson/#1-checking-ip","title":"1. Checking IP","text":""},{"location":"procedures/troubleshooting/jetson/#linux-team-laptop","title":"Linux (Team laptop)","text":"<p>When using the team laptop or another computer running Linux, follow these instructions:</p> <ol> <li>Disconnect the robot from the computer</li> <li>If using an ethernet dongle, disconnect if from the computer</li> <li>Open a new terminal</li> <li> <p>Run the following command:    <pre><code>ip a\n</code></pre>    You should see output that looks similar to the following. Comments (lines starting with \"#\") have been added for explanation.    <pre><code># This is the first entry (notice it start with \"1:\")\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host noprefixroute \n       valid_lft forever preferred_lft forever\n\n# This is the second entry (it start with a \"2:\")\n# The \"enp4s0\" is the name of one of the computer's network interfaces (https://simple.wikipedia.org/wiki/Network_card)\n# By naming convention, \"enp4s0\" starts with \"enp\" and is therefore a wired network interface\n# Notice the \"state DOWN\" here. This means that this network interface is not connected to anything\n2: enp4s0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc fq_codel state DOWN group default qlen 1000\n    link/ether b0:25:aa:3f:f4:24 brd ff:ff:ff:ff:ff:ff\n    altname enxb025aa3ff424\n\n# This is the third entry (it start with a \"3:\")\n# By naming convention, \"wlan0\" is a wireless network interface because it starts with \"wlan\"\n# This is the interface my computer uses to make a WiFi connection\n# This interface has \"state UP\", meaning that it is connected to a network\n# Notice that this entry has a line that begins with \"inet\"\n#   The \"192.168.86.24/24\" indicates the ip address that your computer has on the network\n3: wlan0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000\n    link/ether 70:9c:d1:fa:44:de brd ff:ff:ff:ff:ff:ff\n    inet 192.168.86.24/24 metric 1024 brd 192.168.86.255 scope global dynamic wlan0\n       valid_lft 85906sec preferred_lft 85906sec\n    inet6 fe80::729c:d1ff:fefa:44de/64 scope link proto kernel_ll \n       valid_lft forever preferred_lft forever\n# There may more entries depending on the system\n</code></pre></p> </li> <li> <p>If using a ethernet dongle, connect it to the computer</p> </li> <li>Connect the robot to the computer</li> <li>Run <code>ip a</code> again<ul> <li>If you are using an ethernet dongle, you should now see a new entry in the output (the dongle acts as a network interface). The interface should now have \"state UP\" and have an \"inet\" line:   <pre><code>10: enp195s0f4u1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000\n   link/ether 56:66:c9:8b:0f:92 brd ff:ff:ff:ff:ff:ff\n   altname enx5666c98b0f92\n   inet 192.168.82.177/24 metric 1024 brd 192.168.82.255 scope global dynamic enp195s0f4u1\n      valid_lft 3590sec preferred_lft 3590sec\n   inet6 fe80::5466:c9ff:fe8b:f92/64 scope link proto kernel_ll \n      valid_lft forever preferred_lft forever\n</code></pre></li> <li>If you are connecting the robot to the computer using your computers built-in ethernet port, the \"enp\" interface from before should now have \"state UP\" and have an \"inet\" line</li> </ul> </li> <li>If the interface is up (has \"state UP\") and is assigned an ip address (has \"inet\" line), continue to SSH. Otherwise, wait roughly 10 seconds and repeat step 7. If, after a few tries, you are still not assigned an ip address, continue to Trouble Shooting IP Issues</li> </ol>"},{"location":"procedures/troubleshooting/jetson/#windows","title":"Windows","text":"<p>Warning</p> <p>The team laptop is known to work, unless you know what you are doing, please use it instead</p> <p>The following steps have not been tested</p> <ol> <li>Disconnect the robot from the computer</li> <li>If using an ethernet dongle, disconnect if from the computer</li> <li>Open a new terminal</li> <li>Run the command <code>gip</code></li> <li>If using and ethernet dongle, connect it to the computer</li> <li>Connect the robot to the computer</li> <li>Run the <code>gip</code> command again</li> <li>Check if you have been assigned an ip address:<ul> <li>If using an ethernet dongle, a new network interface should have appeared</li> <li>If connecting directly to the computer's ethernet port, the ethernet interface should now have an ip address (\"IPv4Address\") </li> </ul> </li> <li>If you have been assigned an ip address, continue to SSH. Otherwise, wait roughly 10 seconds and repeat step 8. If, after a few tries, you are still not assigned an ip address, continue to Trouble Shooting IP Issues</li> </ol>"},{"location":"procedures/troubleshooting/jetson/#trouble-shooting-ip-issues","title":"Trouble Shooting IP Issues","text":"<ul> <li>If the interface remains down, the Jetson likely does not have power. Make sure that the power cable is plugged into the barrel jack of its carrier board and that the other end of the power cable is connected to power.</li> <li>If you have confirmed that it is powered on, there is likely a physical break in the connection between the computer and the Jetson. Ensure that all cables in the chain between the Jetson and the computer are connected.</li> <li>If the interface is up but does not have an ip address, the DHCP server may be misbehaving. Power cycle the robot. If the issue continues, you should ask a member of the software team.</li> <li>If you are using an ethernet dongle and the new interface does not appear, try a different one. If multiple dongles do not work, it is likely an issue with the computer you are using. Please use the team laptop instead (it has a builtin ethernet jack, eliminating the need for the dongle)</li> </ul>"},{"location":"procedures/troubleshooting/jetson/#ssh","title":"SSH","text":"<p>The following instructions should apply to both Linux and Windows.</p> <ol> <li>Run the following command in a terminal:    <pre><code>ssh sw8@192.168.2.5\n</code></pre></li> <li>You should almost immediately be prompted about a fingerprint or for a password. If so, everything is fine and you should continue dryrunning.</li> <li>Otherwise, if you receive a connection refused error, the SSH server is likely still starting</li> <li>Wait at most two minutes</li> <li>Rerun <code>ssh sw8@192.168.2.5</code></li> <li>If the error persists, power cycle the robot</li> <li>If the error persists even after power cycling, ask a software team member</li> <li>Otherwise, if the command hangs with no output or you receive a connection timed out error:</li> <li>Kill the ssh command if running (press Ctrl and C at the same time)</li> <li>Wait at most 2 minutes</li> <li>Rerun<code>ssh sw8@192.168.2.5</code></li> <li>If the problem persists, power cycle the robot</li> <li>If the problem persists even after power cycling, kill the ssh command and run:       <pre><code>ping 192.168.2.5\n</code></pre></li> <li> <p>Let it run for about 5 seconds, then kill it (press Ctrl and C at the same time)</p> <p>The output should look like the following if the Jetson is up:   <pre><code>PING 192.168.2.5 (192.168.2.5) 56(84) bytes of data.\n64 bytes from 192.168.2.5: icmp_seq=1 ttl=57 time=48.3 ms\n64 bytes from 192.168.2.5: icmp_seq=2 ttl=57 time=148 ms\n64 bytes from 192.168.2.5: icmp_seq=3 ttl=57 time=62.6 ms\n64 bytes from 192.168.2.5: icmp_seq=4 ttl=57 time=50.9 ms\n64 bytes from 192.168.2.5: icmp_seq=5 ttl=57 time=70.2 ms\n64 bytes from 192.168.2.5: icmp_seq=6 ttl=57 time=48.5 ms\n^C\n--- 192.168.2.5 ping statistics ---\n6 packets transmitted, 6 received, 0% packet loss, time 5010ms\nrtt min/avg/max/mdev = 48.338/71.487/148.450/35.342 ms.5: icmp_seq=6 ttl=57 time=48.5 ms\n</code></pre>   This means that you can communicate with the Jetson, but that SSH server is misbehaving. Ask a member of the software team for help.</p> <p>If the Jetson is unreachable or not responding, it should look like this:   <pre><code>PING 192.168.2.5 (192.168.2.5) 56(84) bytes of data.\n^C\n--- 192.168.2.5 ping statistics ---\n18 packets transmitted, 0 received, 100% packet loss, time 17406ms\n</code></pre>   Are you sure you that you actually got an ip address assigned by the Jetson in Checking IP?</p> </li> </ol>"},{"location":"procedures/troubleshooting/meb/","title":"MEB Troubleshooting","text":""},{"location":"procedures/troubleshooting/meb/#port","title":"Port","text":"<p>First, double check that everything is connected to the Jetson.</p> <p>If everything is actually connected, then MEB has a different name than what is expected. We need to determine this name and use it instead.</p> <p>Important</p> <p>You should inform the software team as soon as possible if the device name format has actually changed. This is unexpected and needs to be investigated.</p> <p>To determine the name, run the following command: <pre><code>ls /dev/serial/by-id/ | grep -i Texas\n</code></pre></p> <p>This command lists files in the <code>/dev/serial/by-id/</code> folder that contain the word Texas (case insensitive) in their name. It should output 2 file names. If it does not output anything, then MEB is actually not connected to the Jetson. The output should look similar to this: <pre><code>/dev/serial/by-id/usb-Texas_Instruments_MSP_Tools_Driver_B20A826e14002300-if00  \n/dev/serial/by-id/usb-Texas_Instruments_MSP_Tools_Driver_B20A826e14002300-if02  \n</code></pre></p> <p>Now, we will take these resulting files names and determine which one is the correct one.</p> <p>Starting with the first file name, do the following:</p> <ol> <li>Run the following commands, replacing FILE_NAME with the file name we are testing:     <pre><code>export PORT=$(realpath FILE_NAME)\necho $PORT\n</code></pre></li> <li>Begin following the steps in MEB Communication &amp; Voltage Monitor<ol> <li>If you encounter no errors, you have selected the correct one and can continue</li> <li>If you encounter any errors, return here and start from step 1 using the second file name</li> <li>If you encounter errors with both file names, reboot the robot and try again</li> <li>If the issue persist, stop and ask for assistance.</li> </ol> </li> </ol>"},{"location":"software/overview/","title":"Overview","text":"<p>TODO: Software overview</p>"}]}