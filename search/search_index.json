{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SeaWolf VIII Documentation Documentation for AquaPack Robotics' SeaWolf VIII. SeaWolf VIII is designed to compete in the RoboSub competition each year. SeaWolf VIII is AquaPack Robotic's 8th robot (competing 2020-present).","title":"Home"},{"location":"#seawolf-viii-documentation","text":"Documentation for AquaPack Robotics' SeaWolf VIII. SeaWolf VIII is designed to compete in the RoboSub competition each year. SeaWolf VIII is AquaPack Robotic's 8th robot (competing 2020-present).","title":"SeaWolf VIII Documentation"},{"location":"electrical/parts/","text":"Note that this page is currently an outline and most of the content is not yet written. TODO: Links and part numbers for commonly used parts TODO: Link to full BOM spreadsheet","title":"Parts List / Bill of Materials"},{"location":"electrical/repos/","text":"Note that this page is currently an outline and most of the content is not yet written.","title":"Repository List"},{"location":"electrical/standards/","text":"Note that this page is currently an outline and most of the content is not yet written. Connectors Waterproof (external) Connections Wire to Endcap (detachable): Fischers Wire to Endcap (not detachable): BlueRobotics penetrators (wetlink penetrators should be preferred over potted penetrators) Wire to Wire: Either use an epoxy filled block or waterproof heatshrink Signal & Low Current : Wire to Wire: JST SM Wire to Board: Molex KK 254 Fallback (either): DuPont (use only when JST-SM or Molex KK 254 are not viable, recommended only for prototyping) Higher Current Wire to Wire or Wire to Board: Powerpole (PP15-45 series) Wire to Wire: XT90 (use these only for connections directly to battery or where current larger than 45A is required) Wire to Screw Terminal: Heat shrink ring connectors DuPont Connectors Wire to wire Wire to board when paired with standard 2.54mm pin headers Intended for signals not power (2A max per pin) Cheap and easy to get (kits easily found on Amazon) Moderately difficult to crimp Not keyed Male pins are easy to bend / break both when connected and when not connected Pair well with standard 2.54mm pin headers Work with breadboards Housings in two-row configurations are sold Molex KK 254 Connectors Wire to board Intended for signals (4A max per pin, less depending on crimp pin selection) More expensive than DuPont connectors (but better) No kits sold, must buy individually from digikey / mouser Moderately difficult to crimp Keyed Male pins always on board. Only female crimps for wire. 2.54mm pin pitch, so compatible with DuPont connectors and standard pin headers if necessary Housings only in one-row configurations JST SM Connectors Wire to Wire Intended for signals (2A max per pin) Can find in kits on Amazon (harder to find than DuPont, but possible) Moderately difficult to crimp Keyed Latching Protected male pins (both when connected and not connected) Housings only in one-row configurations Anderson Power Powerpole Connectors (PP15-45 series) Wire to Wire or Wire to Board Intended for power (15, 30, 45 A) Expensive Easy to crimp Keyed Same housing / pin used on both sides of connection Custom configurations possible (custom size and key of connector block) Recommended for wire from 20 to 10 AWG XT90 Connectors Note that XT60 connectors are rarely used, but are generally the same idea (just lower current rating). XT60 connectors are only used on the battery chargers and should not be used on the robot itself. Wire to Wire Wire to Board may be possible, but not recommended. Soldered not crimped Somewhat difficult to solder (generally requires heatsink and large iron tip) Robust connectors Work well with larger gauge wire only (14-10 AWG) Heat Shrink Ring Connectors Note: There are variants of these sold that are \"U\" shaped (not a closed ring). These are not to be used on the robot as they easily come loose. Wire to screw terminal Can be used wire to wire with a loose screw & nut, but not recommended. Easy to crimp Generally can handle the same current as any wire that can fit inside them PCB Headers Standard 2.54mm headers (right angle and vertical) KK 254 headers (right angle and vertical) Powerpole headers (right angle and vertical) Electronic Assembly PCBs Protoboard Breadboard (avoid on robot, if necessary hot glue EVERYTHING) Microcontrollers Custom boards integrating microcontrollers should use TI's MSP430 series of MCUs. This family of microcontrollers integrates the required features and are generally powerful enough for our use cases. Additionally, NCSU's ECE department has an embedded systems course built around these microcontrollers, thus it helps align club operation with coursework. If there is no compelling reason not to, TI's MSP430FR2355 is recommended. This chip integrates almost any peripheral that would be required, has many serial communication interfaces, and has more GPIO pins than would typically be used. The LQFT-48 package version of this chip is easy enough to hand solder as well. If there is a compelling reason to select a different MSP430, this is permissable, however it should be attempted to use a chip that can be more easily hand soldered. Avoid QFN and BGA packages (or anything else with pads contained under the chip). In cases where an MSP430 does not provide sufficient power for what is being designed, it is recommended to use an Arm architecture microcontroller. There are many vendors of these on the market (not a complete list): TI's MSP432 series TI's MSP-M0 series Microchip's SAM series ST Microelectronics STM32 chips Raspberry Pi RP2040 Many NXP Semiconductors chips When choosing a chip, make sure to also research the cost of a debug probe. For example, the STM32 series are compatible with low cost ST-Link debug probes. FPGAs FPGAs supported by Vivado are preferred. IC Packages Integrated circuits used on our boards should be hand solderable. Avoid QFN and BGA packages (or anything else with pads contained under the chip). This can be violated if absolutely necessary, however make sure there is an assembly plan.","title":"Standards"},{"location":"electrical/standards/#connectors","text":"Waterproof (external) Connections Wire to Endcap (detachable): Fischers Wire to Endcap (not detachable): BlueRobotics penetrators (wetlink penetrators should be preferred over potted penetrators) Wire to Wire: Either use an epoxy filled block or waterproof heatshrink Signal & Low Current : Wire to Wire: JST SM Wire to Board: Molex KK 254 Fallback (either): DuPont (use only when JST-SM or Molex KK 254 are not viable, recommended only for prototyping) Higher Current Wire to Wire or Wire to Board: Powerpole (PP15-45 series) Wire to Wire: XT90 (use these only for connections directly to battery or where current larger than 45A is required) Wire to Screw Terminal: Heat shrink ring connectors","title":"Connectors"},{"location":"electrical/standards/#dupont-connectors","text":"Wire to wire Wire to board when paired with standard 2.54mm pin headers Intended for signals not power (2A max per pin) Cheap and easy to get (kits easily found on Amazon) Moderately difficult to crimp Not keyed Male pins are easy to bend / break both when connected and when not connected Pair well with standard 2.54mm pin headers Work with breadboards Housings in two-row configurations are sold","title":"DuPont Connectors"},{"location":"electrical/standards/#molex-kk-254-connectors","text":"Wire to board Intended for signals (4A max per pin, less depending on crimp pin selection) More expensive than DuPont connectors (but better) No kits sold, must buy individually from digikey / mouser Moderately difficult to crimp Keyed Male pins always on board. Only female crimps for wire. 2.54mm pin pitch, so compatible with DuPont connectors and standard pin headers if necessary Housings only in one-row configurations","title":"Molex KK 254 Connectors"},{"location":"electrical/standards/#jst-sm-connectors","text":"Wire to Wire Intended for signals (2A max per pin) Can find in kits on Amazon (harder to find than DuPont, but possible) Moderately difficult to crimp Keyed Latching Protected male pins (both when connected and not connected) Housings only in one-row configurations","title":"JST SM Connectors"},{"location":"electrical/standards/#anderson-power-powerpole-connectors-pp15-45-series","text":"Wire to Wire or Wire to Board Intended for power (15, 30, 45 A) Expensive Easy to crimp Keyed Same housing / pin used on both sides of connection Custom configurations possible (custom size and key of connector block) Recommended for wire from 20 to 10 AWG","title":"Anderson Power Powerpole Connectors (PP15-45 series)"},{"location":"electrical/standards/#xt90-connectors","text":"Note that XT60 connectors are rarely used, but are generally the same idea (just lower current rating). XT60 connectors are only used on the battery chargers and should not be used on the robot itself. Wire to Wire Wire to Board may be possible, but not recommended. Soldered not crimped Somewhat difficult to solder (generally requires heatsink and large iron tip) Robust connectors Work well with larger gauge wire only (14-10 AWG)","title":"XT90 Connectors"},{"location":"electrical/standards/#heat-shrink-ring-connectors","text":"Note: There are variants of these sold that are \"U\" shaped (not a closed ring). These are not to be used on the robot as they easily come loose. Wire to screw terminal Can be used wire to wire with a loose screw & nut, but not recommended. Easy to crimp Generally can handle the same current as any wire that can fit inside them","title":"Heat Shrink Ring Connectors"},{"location":"electrical/standards/#pcb-headers","text":"Standard 2.54mm headers (right angle and vertical) KK 254 headers (right angle and vertical) Powerpole headers (right angle and vertical)","title":"PCB Headers"},{"location":"electrical/standards/#electronic-assembly","text":"PCBs Protoboard Breadboard (avoid on robot, if necessary hot glue EVERYTHING)","title":"Electronic Assembly"},{"location":"electrical/standards/#microcontrollers","text":"Custom boards integrating microcontrollers should use TI's MSP430 series of MCUs. This family of microcontrollers integrates the required features and are generally powerful enough for our use cases. Additionally, NCSU's ECE department has an embedded systems course built around these microcontrollers, thus it helps align club operation with coursework. If there is no compelling reason not to, TI's MSP430FR2355 is recommended. This chip integrates almost any peripheral that would be required, has many serial communication interfaces, and has more GPIO pins than would typically be used. The LQFT-48 package version of this chip is easy enough to hand solder as well. If there is a compelling reason to select a different MSP430, this is permissable, however it should be attempted to use a chip that can be more easily hand soldered. Avoid QFN and BGA packages (or anything else with pads contained under the chip). In cases where an MSP430 does not provide sufficient power for what is being designed, it is recommended to use an Arm architecture microcontroller. There are many vendors of these on the market (not a complete list): TI's MSP432 series TI's MSP-M0 series Microchip's SAM series ST Microelectronics STM32 chips Raspberry Pi RP2040 Many NXP Semiconductors chips When choosing a chip, make sure to also research the cost of a debug probe. For example, the STM32 series are compatible with low cost ST-Link debug probes.","title":"Microcontrollers"},{"location":"electrical/standards/#fpgas","text":"FPGAs supported by Vivado are preferred.","title":"FPGAs"},{"location":"electrical/standards/#ic-packages","text":"Integrated circuits used on our boards should be hand solderable. Avoid QFN and BGA packages (or anything else with pads contained under the chip). This can be violated if absolutely necessary, however make sure there is an assembly plan.","title":"IC Packages"},{"location":"electrical/boards/acoustics_dist/","text":"Note that this page is currently an outline and most of the content is not yet written.","title":"Acoustics Distribution Board"},{"location":"electrical/boards/acoustics_single_chan/","text":"Note that this page is currently an outline and most of the content is not yet written.","title":"Acoustics Single Channel Board"},{"location":"electrical/boards/controlboard/","text":"The control board is responsible for handling robot motion using thrusters. It generates PWM control signals for the robot's ESCs and provides a control interface to the computer via USB. However, the control board is much more complex than a PWM signal generator with a USB interface. The control board is a motion coprocessor intended to be used by the computer to control the robot's motion. The control board uses sensors (integrated IMU and external depth sensor) to control the robot's motion in a variety of high-level (abstracted) forms. This allows the computer / mission code to describe a desired motion in a high-level sense and the control board will handle everything required to make it happen. This is beneficial for a few reasons The control board performs the required math and runs the control loops required to maintain robot stability / desired motion. This reduces the required CPU time on the main computer, leaving more processing time for vision and machine learning algorithms. The control board is able to generate PWM signals using hardware. Most single board computers would use software to generate PWM signals. This would work poorly for thrusters (due to required pulse widths and number of thrusters). While other solutions to this exists (such as I2C PWM drivers), the other benefits of control board make it a better solution. The control board is better able to communicate with sensors and process sensor data, as well as perform time critical tasks (beneficial to control loop stability). This is due to the control board using a microcontroller and firmware based on an RTOS (eliminating the overhead and scheduling uncertainty introduced by a higher level operating system). Mission code can use high level descriptions of robot motion. This increases code portability between robots or to a simulator. The control board is a \"third party\" project. It was designed by a club member (Marcus Behel) in 2022/2023 with the intent of being used on SeaWolf VIII. It is located on Marcus's github and is primarily maintained by Marcus. The code and design are open source. Pinout There are two versions of control board built around two different microcontrollers. The pinout for each is shown below. Control Board v1 Note: The pressure / temp sensor is not included anymore. Control Board v2 Control Board Docs More information about the control board can be found here","title":"Control Board"},{"location":"electrical/boards/controlboard/#pinout","text":"There are two versions of control board built around two different microcontrollers. The pinout for each is shown below.","title":"Pinout"},{"location":"electrical/boards/controlboard/#control-board-v1","text":"Note: The pressure / temp sensor is not included anymore.","title":"Control Board v1"},{"location":"electrical/boards/controlboard/#control-board-v2","text":"","title":"Control Board v2"},{"location":"electrical/boards/controlboard/#control-board-docs","text":"More information about the control board can be found here","title":"Control Board Docs"},{"location":"electrical/boards/lbb/","text":"Note that this page is currently an outline and most of the content is not yet written.","title":"Load Balancing Board (LBB)"},{"location":"electrical/boards/meb/","text":"Note that this page is currently an outline and most of the content is not yet written.","title":"Main Electronics Board (MEB)"},{"location":"electrical/boards/msb/","text":"Note that this page is currently an outline and most of the content is not yet written.","title":"Manipulation Systems Board (MSB)"},{"location":"electrical/connectors/crimping/","text":"Note that this page is currently an outline and most of the content is not yet written. DuPont Connectors Tools Recommended: IWISS / iCrimp SN-025 Crimper: This crimper will crimp both the insulation and the conductor portions at once. Unlike the more common SN-28B crimpers, these will crimp the insulation properly (rounded shape, not an \"m\" shape). Note that for smaller wires (28 AWG and smaller) this may not crimp the conductor portion properly. Thus, you may need to use needle nose pliers to press the conductor tabs down further. Alternate: SN-28B Crimper: Similar to the SN-025 crimpers (and much more common), however they do not crimp the insulation portion properly. Thus, you will likely need to use needle nose pliers to \"round out\" the insulation crimp for the pin to fit in the housing. Alternate: PA-20 Crimper This tool crimps only one portion (conductor or insulation) at a time, however is sometimes easier to use because of that. This tool is an \"m\" shaped crimp, thus it will not quite crimp the insulation part correctly, however if you do not press down fully on that part it is usually good enough. Crimping Process TODO Molex KK 254 Connectors Tools Crimping Process TODO JST SM Connectors These connectors are keyed wire to wire connectors. Additionally, they latch into place when connected and are resistant to bending of male pins (both when connected and when not connected). Tools Note: Information in this section is speculative and not yet verified. A crimp tool making an \"m\" shaped crimp is required. The PA-20 crimper is used for this. It can be used for both the insulation and the conductor crimp portions. Crimping Process TODO Powerpole Connectors (PP15-45) Tools The TRIcrimp Powerpole crimp tool should be used. These are reasonably priced and are easily the best Powerpole crimp tool. Crimping Process TODO Heatshrink Ring Connectors Tools TODO Crimping Process TODO","title":"Crimped Connectors"},{"location":"electrical/connectors/crimping/#dupont-connectors","text":"","title":"DuPont Connectors"},{"location":"electrical/connectors/crimping/#tools","text":"Recommended: IWISS / iCrimp SN-025 Crimper: This crimper will crimp both the insulation and the conductor portions at once. Unlike the more common SN-28B crimpers, these will crimp the insulation properly (rounded shape, not an \"m\" shape). Note that for smaller wires (28 AWG and smaller) this may not crimp the conductor portion properly. Thus, you may need to use needle nose pliers to press the conductor tabs down further. Alternate: SN-28B Crimper: Similar to the SN-025 crimpers (and much more common), however they do not crimp the insulation portion properly. Thus, you will likely need to use needle nose pliers to \"round out\" the insulation crimp for the pin to fit in the housing. Alternate: PA-20 Crimper This tool crimps only one portion (conductor or insulation) at a time, however is sometimes easier to use because of that. This tool is an \"m\" shaped crimp, thus it will not quite crimp the insulation part correctly, however if you do not press down fully on that part it is usually good enough.","title":"Tools"},{"location":"electrical/connectors/crimping/#crimping-process","text":"TODO","title":"Crimping Process"},{"location":"electrical/connectors/crimping/#molex-kk-254-connectors","text":"","title":"Molex KK 254 Connectors"},{"location":"electrical/connectors/crimping/#tools_1","text":"","title":"Tools"},{"location":"electrical/connectors/crimping/#crimping-process_1","text":"TODO","title":"Crimping Process"},{"location":"electrical/connectors/crimping/#jst-sm-connectors","text":"These connectors are keyed wire to wire connectors. Additionally, they latch into place when connected and are resistant to bending of male pins (both when connected and when not connected).","title":"JST SM Connectors"},{"location":"electrical/connectors/crimping/#tools_2","text":"Note: Information in this section is speculative and not yet verified. A crimp tool making an \"m\" shaped crimp is required. The PA-20 crimper is used for this. It can be used for both the insulation and the conductor crimp portions.","title":"Tools"},{"location":"electrical/connectors/crimping/#crimping-process_2","text":"TODO","title":"Crimping Process"},{"location":"electrical/connectors/crimping/#powerpole-connectors-pp15-45","text":"","title":"Powerpole Connectors (PP15-45)"},{"location":"electrical/connectors/crimping/#tools_3","text":"The TRIcrimp Powerpole crimp tool should be used. These are reasonably priced and are easily the best Powerpole crimp tool.","title":"Tools"},{"location":"electrical/connectors/crimping/#crimping-process_3","text":"TODO","title":"Crimping Process"},{"location":"electrical/connectors/crimping/#heatshrink-ring-connectors","text":"","title":"Heatshrink Ring Connectors"},{"location":"electrical/connectors/crimping/#tools_4","text":"TODO","title":"Tools"},{"location":"electrical/connectors/crimping/#crimping-process_4","text":"TODO","title":"Crimping Process"},{"location":"electrical/connectors/fischers/","text":"Note that this page is currently an outline and most of the content is not yet written.","title":"Fischers"},{"location":"electrical/connectors/soldering/","text":"Note that this page is currently an outline and most of the content is not yet written. XT90 Connectors TODO","title":"Soldered Connectors"},{"location":"electrical/connectors/soldering/#xt90-connectors","text":"TODO","title":"XT90 Connectors"},{"location":"electrical/connectors/waterproof_splice/","text":"Note that this page is currently an outline and most of the content is not yet written. Adhesive heatshrink method Epoxy block method","title":"Waterproof Splicing"},{"location":"electrical/embedded/msp430/","text":"Note that this page is currently an outline and most of the content is not yet written. TODO: What software we use and why TODO: Links to user guides for the software TODO: Debug probes, using ez-FET from launchpad TODO: Drivelib TODO: Custom library","title":"MSP430"},{"location":"electrical/embedded/styleguide/","text":"Note that this page is currently an outline and most of the content is not yet written.","title":"Style Guide"},{"location":"electrical/legacy/acoustics/","text":"Note that this page is currently an outline and most of the content is not yet written. Picoscope based approach description Why the change","title":"Acoustics System"},{"location":"electrical/legacy/boards/","text":"Note that this page is currently an outline and most of the content is not yet written. Aux board (integrated into MEB 1.2) Optoisolator board Monolithic acoustics board Camera PCB","title":"Boards"},{"location":"electrical/legacy/cameras/","text":"Intel RealSense HD These cameras use a custom enclosure designed to fit an Intel RealSense Depth Camera (435i) . Connection Information These cameras will work with only USB 2.0 Full operation of the camera (some framerates / resolutions) require USB3 Limited to 720p @ 6FPS (yes 6 not 60) and 480p @ 30 FPS when using USB2 IMU and depth data may not work with USB 2 Each camera could require up to 700mA current at 5V depending on the configuration In practice, it is unlikely that this would be used since only the RGB camrea is used Note that the depth data does not work underwater (we tried, it does not work) USB-C to Dupont Connector This connector is used inside the camera hull to connect the camera (USB-C either 2.0 or 3.0) to the cable penetrated into the hull by dupont connectors. These camera enclosures do not make this part of wiring easy. In fact, this is a large part of why these were moved away from. These cameras are wired using USB C breakout boards such as these . If using USB 3 make sure to get a breakout with 8 pads. If the breakout only has 4 pads, it is USB 2. Note that the purchased breakouts are too long to fit in the enclosure . Thus the PCBs were sanded to make them fit (yes the pcb was sanded down using sand paper). They should be sanded right up to (but not touching) the metal pads. Then, solder wires onto the pads backwards . Soldering backwards ensures the wires will not hang off the edge where the size is constrained. Then, to prevent shorting on the edge of the camera hull it is critical to use hot glue to cover exposed conductors . When doing so, be careful to not get much / any on the edge of the PCB as this would add width to what was just sanded down. Finally, crimp dupont pins (male) on each wire and assembe in an 4x2 housing as shown below. USB C Pin (Breakout Pin) USB A 3.0 Pin Standard Wire Color GND (A1) GND Black VBUS (B1) VBUS / VCC Red RX1- (B10) TX1- (StdA_SSTX-) Purple RX1+ (B11) TX1+ (StdA_SSTX+) Orange D- (A7) D- White D+ (A6) D+ Green TX1- (A3) RX1- (StdA_SSRX-) Blue TX1+ (A2) RX1+ (StdA_SSTX+) Yellow Note: On USB-A 3.0 let GND DRAIN float. Notice that USB 3.0 TX and RX are CROSSED! The TX and RX lines should be crossed in the cable. Do this in the dupont connector. Penetrated Wire A wire should be penetrated (using BlueRobotics penetrator) into the camera hull. This should be an 8-pin wire with shielded pairs for the USB 3 differential pairs (RX and TX Super Speed pairs). The wire used for this is Igus CFBUS.PUR.068 The wire is penetrated into the hull and female Dupont connectors installed. These are kept in two groups to allow removal through the penetrator's hole if needed. Note that these should be assembled to connect the wires to the breakout's dupont based on the table shown in the previous section. Note that this pinout is used to cross the TX and RX pairs as required. This wire is connected to the main hull (by penetrator or fischer) and a USB A wire connected to the other side to go to the computer. Note that a USB 3.0 cable (type A connector) must be used on the inside of the main hull if USB3.0 is used. Otherwise, a USB 2.0 can be used by connecting the power and D+/D- wires (no TX/RX). The colors of the USB A cable will match the colors of the Igus cable (since TX and RX were crossed inside the camera hull's dupont). Custom Camera PCB An attempt was made to design a custom camera PCB to replace the breakouts that must be sanded down. However, these are difficult to assemble (even with reflow process) and the one that we believe to have been assembled properly does not work well (we get a few frames, then the video feed drops). As such, these have been deemed not viable and should not be used. Alternatives to Sanding the Breakout The following were considered: Custom camera PCB (do not use) 90 degree cables (too large to fit) Right angle USB-C ribbon cable (can purchase online; never tested) Really Old (SW7/SW6) Cameras These cameras were used for a short time on SW8, however are not in good condition and do not work well. These are built using the internals from a Microsoft Lifecam Cinema (originally released in 2009). Assembly The cameras must be disassembled and the two internal boards removed. Note that the disassembly process is destructive and seems to require cutting metal using flush cuts. The internal cable uses a connector to one of these boards. It should be cut short and soldered to the fischer receptacle on the back of the camera hull. Note that the cameras use 104 fischer receptacles, however when used on SW8 they were connected to a 103 fischer receptacle (both 4 pin). A custom cable was used for this (fischers on both ends; cable diameter must fit both 103 and 104 plugs). Additionally, note that the camera pinout does not match what used to be used for USB 2 pinout on SW8. Thus, the cable \"crossed\" some signals. If ever reassembling these cameras, it is recommended to redo the pinout on both ends.","title":"Cameras"},{"location":"electrical/legacy/cameras/#intel-realsense-hd","text":"These cameras use a custom enclosure designed to fit an Intel RealSense Depth Camera (435i) .","title":"Intel RealSense HD"},{"location":"electrical/legacy/cameras/#connection-information","text":"These cameras will work with only USB 2.0 Full operation of the camera (some framerates / resolutions) require USB3 Limited to 720p @ 6FPS (yes 6 not 60) and 480p @ 30 FPS when using USB2 IMU and depth data may not work with USB 2 Each camera could require up to 700mA current at 5V depending on the configuration In practice, it is unlikely that this would be used since only the RGB camrea is used Note that the depth data does not work underwater (we tried, it does not work)","title":"Connection Information"},{"location":"electrical/legacy/cameras/#usb-c-to-dupont-connector","text":"This connector is used inside the camera hull to connect the camera (USB-C either 2.0 or 3.0) to the cable penetrated into the hull by dupont connectors. These camera enclosures do not make this part of wiring easy. In fact, this is a large part of why these were moved away from. These cameras are wired using USB C breakout boards such as these . If using USB 3 make sure to get a breakout with 8 pads. If the breakout only has 4 pads, it is USB 2. Note that the purchased breakouts are too long to fit in the enclosure . Thus the PCBs were sanded to make them fit (yes the pcb was sanded down using sand paper). They should be sanded right up to (but not touching) the metal pads. Then, solder wires onto the pads backwards . Soldering backwards ensures the wires will not hang off the edge where the size is constrained. Then, to prevent shorting on the edge of the camera hull it is critical to use hot glue to cover exposed conductors . When doing so, be careful to not get much / any on the edge of the PCB as this would add width to what was just sanded down. Finally, crimp dupont pins (male) on each wire and assembe in an 4x2 housing as shown below. USB C Pin (Breakout Pin) USB A 3.0 Pin Standard Wire Color GND (A1) GND Black VBUS (B1) VBUS / VCC Red RX1- (B10) TX1- (StdA_SSTX-) Purple RX1+ (B11) TX1+ (StdA_SSTX+) Orange D- (A7) D- White D+ (A6) D+ Green TX1- (A3) RX1- (StdA_SSRX-) Blue TX1+ (A2) RX1+ (StdA_SSTX+) Yellow Note: On USB-A 3.0 let GND DRAIN float. Notice that USB 3.0 TX and RX are CROSSED! The TX and RX lines should be crossed in the cable. Do this in the dupont connector.","title":"USB-C to Dupont Connector"},{"location":"electrical/legacy/cameras/#penetrated-wire","text":"A wire should be penetrated (using BlueRobotics penetrator) into the camera hull. This should be an 8-pin wire with shielded pairs for the USB 3 differential pairs (RX and TX Super Speed pairs). The wire used for this is Igus CFBUS.PUR.068 The wire is penetrated into the hull and female Dupont connectors installed. These are kept in two groups to allow removal through the penetrator's hole if needed. Note that these should be assembled to connect the wires to the breakout's dupont based on the table shown in the previous section. Note that this pinout is used to cross the TX and RX pairs as required. This wire is connected to the main hull (by penetrator or fischer) and a USB A wire connected to the other side to go to the computer. Note that a USB 3.0 cable (type A connector) must be used on the inside of the main hull if USB3.0 is used. Otherwise, a USB 2.0 can be used by connecting the power and D+/D- wires (no TX/RX). The colors of the USB A cable will match the colors of the Igus cable (since TX and RX were crossed inside the camera hull's dupont).","title":"Penetrated Wire"},{"location":"electrical/legacy/cameras/#custom-camera-pcb","text":"An attempt was made to design a custom camera PCB to replace the breakouts that must be sanded down. However, these are difficult to assemble (even with reflow process) and the one that we believe to have been assembled properly does not work well (we get a few frames, then the video feed drops). As such, these have been deemed not viable and should not be used.","title":"Custom Camera PCB"},{"location":"electrical/legacy/cameras/#alternatives-to-sanding-the-breakout","text":"The following were considered: Custom camera PCB (do not use) 90 degree cables (too large to fit) Right angle USB-C ribbon cable (can purchase online; never tested)","title":"Alternatives to Sanding the Breakout"},{"location":"electrical/legacy/cameras/#really-old-sw7sw6-cameras","text":"These cameras were used for a short time on SW8, however are not in good condition and do not work well. These are built using the internals from a Microsoft Lifecam Cinema (originally released in 2009).","title":"Really Old (SW7/SW6) Cameras"},{"location":"electrical/legacy/cameras/#assembly","text":"The cameras must be disassembled and the two internal boards removed. Note that the disassembly process is destructive and seems to require cutting metal using flush cuts. The internal cable uses a connector to one of these boards. It should be cut short and soldered to the fischer receptacle on the back of the camera hull. Note that the cameras use 104 fischer receptacles, however when used on SW8 they were connected to a 103 fischer receptacle (both 4 pin). A custom cable was used for this (fischers on both ends; cable diameter must fit both 103 and 104 plugs). Additionally, note that the camera pinout does not match what used to be used for USB 2 pinout on SW8. Thus, the cable \"crossed\" some signals. If ever reassembling these cameras, it is recommended to redo the pinout on both ends.","title":"Assembly"},{"location":"electrical/legacy/controlsys/","text":"Note that this page is currently an outline and most of the content is not yet written. Cube orange / pixhawk with Ardupilot / Ardusub firmware Why the change","title":"Control System"},{"location":"electrical/legacy/powersys/","text":"Note that this page is currently an outline and most of the content is not yet written. Low side switching, optoisolator motivation, different regulators Why the change","title":"Power System"},{"location":"electrical/software/kicad/","text":"Note that this page is currently an outline and most of the content is not yet written. This user guide is intended to be a reference, not a tutorial. There are many good KiCad tutorials available online, however please note that there are sometimes multiple ways to do things in KiCad (eg library management). In such cases, please use the methods described on this page. Part of this page's purpose is to describe our conventions / approaches to using KiCad. Note that this guide was written for KiCad 7.0.1 Installation See the Software Overview page for download links and required version information (if any). Windows Download the installer ( exe file) Run the installer. It will require administrative privileges. Follow the instructions of the installer. Default settings / options are sufficient. Install SWLib (see instructions in following section) after the installation completes. macOS Download the dmg file Open the dmg disk image Drag the KiCad folder to Applications as indicated by the arrow Wait for the copy operation to complete KiCad is now installed Install SWLib (see instructions in following section) after the installation completes. Linux Follow KiCad's Instructions . On Ubuntu this entails adding a ppa and installing the packages. Install SWLib (see instructions in following section) after the installation completes. SWLib SWLib is a KiCad library containing symbols, footprints, and 3D models for components used on SeaWolf's boards. This library is shared among many robots (not SeaWolf VIII exclusive). This library must be installed once per system you install KiCad on. Note: you must have git installed to install, modify, or update SWLib! Installation Clone this repository somewhere on your system. The location does not matter. On windows, avoid putting it in OneDrive (ie don't put it in your documents folder) . Open KiCad. Close any open project (File > Close Project) Preferences > Manage Symbol Libraries The first time you open this menu, you will be asked to \"Configure Global Symbol Library Table\". Choose \"Copy Default Global Symbol Table\" On the Global Libraries tab select the folder icon at the bottom (Add existing library to table) Navigate to wherever you cloned the repo. Choose the SWLib.kicad_sym file. Click OK to close the symbol library table. Preferences > Manage Footprint Libraries The first time you open this menu, you will be asked to \"Configure Global Footprint Library Table\". Choose \"Copy Default Global Footprint Table\" On the Global Libraries tab select the folder icon at the bottom (Add existing library to table) Navigate to wherever you cloned the repo. Choose the SWLib.pretty folder. Updating Open a terminal or git bash in the folder you cloned the repository to. Run git pull origin main Creating new Parts Before creating a new part, check if it exists in one of the builtin KiCad libraries. Many parts do. You can search in the symbol editor. To create a new part, it is necessary to create both a symbol and footprint for the part. Symbols are used in schematics. Footprints are used on the PCB. In their simplest form, both are a collection of pins with unique numbers. On a symbol, pins are \"lines\". On a footprint, pins are \"holes\" or \"pads\" that go in / on the PCB. Pins on a symbol are associated with pins on a footprint by the pin's number. In addition to numbers, pins on a symbol can have human readable names. These are only used to show the designer what the pin is called. To start, create the symbol Open the symbol editor (in KiCad's main window) Select SWLib in the libraries panel on the left Select the new symbol button (or File > New Symbol... ) Name the symbol. This should typically match the name of the part you are making a symbol for. Optionally select an existing symbol to derive from (\"start with\") Change the designator if needed. See this Typically, units per package should be left as 1 Leave other settings unchanged Click OK to create you symbol. It will be open in the editor. Make sure the unit is set to \"mil\" on the left hand toolbar. Make sure the grid is set to 50mil ( View > Grid Properties ). You can see the current grid on the bottom bar. Create the symbol. You can use the tools on the right toolbar to \"draw\" the symbol (lines, shapes, arcs). Draw your part centered on the origin! Then use the \"pin\" tool (right toolbar) to add the required number of pins. Name the pins using the names in the part's datasheet. Make sure the pin number match the part's package pin numbers. When creating pins, the \"circle\" should be facing out. THis is where wires connect to in the schematic. Make sure to drag the designator above the part Save! After creating the symbol, determine if you need to create a footprint. KiCad's footprint libraries have a footprint for most standard packages (0603, 0805, 1206, etc for resistors, capacitors, diodes, inductors; QFP, TSSOP, SOIC, DIP, QFN, etc for ICs). Open the footprint editor and search for the package your device uses. If it exists, do not create a custom footprint. Skip to step 6. If you do need to create the footprint, follow the instructions below. Open the footprint editor Select \"SWLib\" in the left panel with all libraries Select File > New Footprint to create an empty footprint. Name it the same as your part. Use the footprint editor to place pads and draw any desired silkscreen. Make sure the numbers of the pads match the numbers of the pins the pad should be associated with. Follow numbering convention in the part's datasheet. Save! Go back to your part in the Symbol editor. Edit symbol properties ( File > Symbol Properties... ) Click the library icon next to the footprint field (you may need to click the footprint field first). Select the footprint for your part Double check the pin number order of the footprint and schematic. This is especially important if you are using a footprint you did not make. Save! Optionally, you can add a 3D model to a footprint. Create or download a 3D mode. Save it as a step or stl file in SW-KicadLibrary/SWLib.3d . Name it the same as the part. Open the footprint editor and select your part. Edit footprint properties ( File > Footprint Properties... ) Select the 3D models tab Click the plus button and type the following. Never use the browse feature to select a 3d model! Browse tool uses absolute paths, which will break the model on other people's systems. ../../SWLib.3d/[FILE].step Replace [FILE] with the name of the step file. This is case sensitive! . Close the properties panel and save the footprint. After creating your part (and saving everything) commit your changes in the SW-KicadLibrary repo and push. Importing Downloaded Parts Many parts will have footprints and symbols (ECAD models) available for download. These often include 3D models too. Some common sources to find these models are SamacSys (easiest to access through mosuer; DO NOT INSTALL THE LIBRARY LOADER! DO NOT USE IT! ) UltraLibrarian SnapEDA Note that you will need an account to use any of these services. When downloading a model, download symbol and footprint. If a 3D model is available, download it too. After downloading, follow the instructions below depending on where you downloaded the model from. Note that if a 3D model was not available, the 3D model file will be missing. SamacSys The downloaded file will be a .zip file. Extract it.Locate the following three files. Symbol: [PART]/KiCad/[PART].kicad_sym (older parts may only have a .lib file. This works too.) Footprint: [PART]/KiCad/[PACKAGE].kicad_mod 3D Model: [PART]/3D/[PART].stp UltraLibrarian The downloaded file will be a .zip file. Extract it.Locate the following three files. Symbol: KiCAD/[NAME]/[NAME].lib Footprint: KiCAD/[NAME]/footprints.pretty/[NAME].kicad_mod 3D Model: [NAME]/STEP/[NAME].step SnapEDA The downloaded file will be a .zip file. Extract it.Locate the following three files. Symbol: [PART].kicad_sym Footprint: [PART].kicad_mod 3D Model: [PART].step Open KiCad's symbol editor Find SWLib in the panel on the left. Right click \"SWLib\" and choose \"Import Symbol...\" Choose the symbol file ( .lib ) described above. Save the symbol. Open the footprint editor. Find SWLib in the panel on the left. Right click \"SWLib\" and choose \"Import Footprint...\" Choose the footprint file ( .kicad_mod ) described above. Save into SWLib Copy the 3D model file ( .step / .stp file described above) to SWLib. This must be copied to wherever you cloned SWLib. Paste the .step file into SW-KicadLibrary/SWLib.3d In the footprint editor, edit footprint properties ( File > Footprint Properties... ) Select the 3D models tab Click the plus button and type the following. Never use the browse feature to select a 3d model! Browse tool uses absolute paths, which will break the model on other people's systems. ../../SWLib.3d/[FILE].step Replace [FILE] with the name of the step file. This is case sensitive! . Change step to a different suffix if the file uses a different suffix. Close the properties panel and save the footprint. Go back to the symbol editor and select the imported symbol. Open symbol properties ( File > Symbol Properties... ) Click the footprint field, then select the browse button Choose the footprint now imported into the SWLib footprint library Close the symbol properties panel and save. After importing your part (and saving everything) commit your changes in the SW-KicadLibrary repo and push. Creating a New Project Make sure you have installed SWLib first! TODO Opening an Existing Project Make sure you have installed SWLib first! TODO Design Workflow Schematic Always use a 50mil grid in the schematic editor! If absolutely necessary, a 25mil grid can be used occasionally, but try to avoid doing so. TODO: General schematic work TODO: Symbol table conventions and custom part number field TODO: Net label and power port behavior across multiple schematic sheets Electrical Rules Check TODO Assign footprints TODO (note bulk procedures too) PCB Setup It is generally necessary to setup some board stackup parameters (specifically the number of copper layers) before starting the PCB. In order to make running DRCs later, it is best to import board settings from one of the SW-KiCadTemplates . These templates are based on PCB manufacturer board stackups and include design rules. Specifics (such as board color, default item sizes, etc) can be customized after importing a template. To import a template, follow the steps listed below Download a zip of the repo and extract the zip (or just clone it) Open your project in KiCad Open your PCB Open Board Setup ( File > Board Setup ) Click the button on the bottom left labeled \"Import Settings from Another Board\" Choose the kicad_pcb file for the template you want to use. Which template is used should depend on how you plan to design the PCB (number of layers, impedance control, etc) as well as who you plan to have manufacture the PCB. After selecting a template file, click the \"Select All\" button (rarely will you want to import only some settings) Click \"Import Settings\" Click \"OK\" to close the board setup dialog Save the PCB file Restart KiCad (Close fully and reopen the project). Skipping this step can cause library issues until KiCad is restarted. PCB Layout & Routing Always work in mil not mm grid! TODO Design Rules Check (DRC) Setup design rules in Boards Setup ( File > Board Setup ). Fill in options for Design Rules > Constraints and change defaults in Text & Graphics > Defaults as applicable. Skip this if you imported board settings from one of the template boards! Close Board Setup dialog when done. Open the design rules checker dialog ( Inspect > Design Rules Checker ) At the top, select only \"Refill all zones before performing DRC\" Make sure both errors and warnings are shown (checkboxes near bottom of the dialog) Run the DRC Fix any errors. Fix or waive warnings as warranted. Tips and Tricks Flat multi-page Schematics There are two common ways of doing multi-page schematics: Hierarchical and flat. Hierarchical design embeds one sheet as a block in another. Connections between sheets are made using ports. Flat designs have multiple sheets (all considered top level). Connections between sheets are made by naming nets the same name. AquaPack prefers to use Hierarchical design over flat design practices . In rare cases it may be acceptable to use a flat design, however KiCad doesn't really support them well. You still have to create a top level schematic and add all your sheets as blocks to it. However you just won't add ports or make connections. The top level sheet just acts as a container. HandSolder Footprints The builtin KiCad footprint libraries often have two variants of footprints (eg for resistors, capacitors, etc). One is often suffixed \"HandSolder\". These footprints use elongated pads that make it easier to solder components to the board by hand. These are generally preferred for our use cases. Mounting Holes Do not use vias or manually placed pads for mounting holes. This will lead to DRC warnings / errors. Instead use footprints from the builtin \"MountingHole\" library. These footprints can be added to the PCB without corresponding symbols in the schematic by using the \"Add Footprint\" option in the PCB editor ( Place > Add Footprint ). After adding the footprint, make sure to edit its properties and check the \"Not in schematic\" box. Silkscreen Text size Most manufacturers specify limits on character height and stroke width. KiCad also wants a character width. Always make this equal the the height of your characters! Adding Images to Silkscreen Open the project you want to add images to In KiCad's project window open the \"Image Converter\" Click Load Image and choose the image you want to add. Monochrome bitmaps work well. Other image formats work, but you may need to adjust the black / white threshold. Choose the size of the image in \"Output Size\" (if not sure what size you want guess; trial and error is the way to go) Choose \"Footprint (.kicad_mod file)\" for Output Format Make sure \"Front Silkscreen\" is selected for the layer Click \"Export to Clipboard\" (there is generally no reason to save graphics as symbol files) Open the PCB (it is recommended to still leave the image converter window open for now too) Paste the symbol (Ctrl+V for normal people or CMD+V on mac) and place it where you want on the board To place on the back of the board, press the F key with the graphic selected. If the size is wrong, do not attempt to resize it in the PCB. Go back to the image converter window, change the size and export to clipboard again. Paste it into the PCB again. Repeat as needed. Once the graphic is paced where you want it, double click it to open its properties (footprint properties) and uncheck the \"Show\" box next to \"Reference Designator\". Click OK to close the dialog. Note that when you run the DRC check, there will be a footprint warning about the graphic. Just exclude the violation. Thermal Relief Connections to Pads When connecting a zone to a pad, it will be thermally relieved by default. This means it will be connected with \"spokes\" instead of solid copper. This is usually desirable, however it can be disabled in the properties of the zone if you need to or specific cases (usually only necessary for high current or if using copper on the board as a heatsink). Other Useful Options / Features of PCB Editor You can fill or unfill all copper zones (sometimes called \"polygons\" or \"pours\" or \"planes\") by using Edit > Fill All Zones and Edit > Unfill All Zones . Unfilling zones is useful while working on the board. Filling them lets you see how the zone will be filled after updating the zone itself. You can flip the board view using View > Flip Board View . This is sometimes useful if working on the back of the board. This pairs well with the layer presets on the right below the layer selector (for example, select the all back layers preset). When editing tracks (traces) you can select one part and use the \"U\" and \"I\" keys to select more or less of the track. You can bulk edit fonts of silkscreen text using Edit > Edit Text and Graphics Properties... . You can automatically cleanup traces and vias (remove redundant segments, etc) using Tools > Cleanup Tracks and Vias... . However, be careful with the \"Delete redundant vias\" option. This may delete vias you wanted multiple of for current or heat reasons.","title":"KiCad User Guide"},{"location":"electrical/software/kicad/#installation","text":"See the Software Overview page for download links and required version information (if any).","title":"Installation"},{"location":"electrical/software/kicad/#windows","text":"Download the installer ( exe file) Run the installer. It will require administrative privileges. Follow the instructions of the installer. Default settings / options are sufficient. Install SWLib (see instructions in following section) after the installation completes.","title":"Windows"},{"location":"electrical/software/kicad/#macos","text":"Download the dmg file Open the dmg disk image Drag the KiCad folder to Applications as indicated by the arrow Wait for the copy operation to complete KiCad is now installed Install SWLib (see instructions in following section) after the installation completes.","title":"macOS"},{"location":"electrical/software/kicad/#linux","text":"Follow KiCad's Instructions . On Ubuntu this entails adding a ppa and installing the packages. Install SWLib (see instructions in following section) after the installation completes.","title":"Linux"},{"location":"electrical/software/kicad/#swlib","text":"SWLib is a KiCad library containing symbols, footprints, and 3D models for components used on SeaWolf's boards. This library is shared among many robots (not SeaWolf VIII exclusive). This library must be installed once per system you install KiCad on. Note: you must have git installed to install, modify, or update SWLib!","title":"SWLib"},{"location":"electrical/software/kicad/#installation_1","text":"Clone this repository somewhere on your system. The location does not matter. On windows, avoid putting it in OneDrive (ie don't put it in your documents folder) . Open KiCad. Close any open project (File > Close Project) Preferences > Manage Symbol Libraries The first time you open this menu, you will be asked to \"Configure Global Symbol Library Table\". Choose \"Copy Default Global Symbol Table\" On the Global Libraries tab select the folder icon at the bottom (Add existing library to table) Navigate to wherever you cloned the repo. Choose the SWLib.kicad_sym file. Click OK to close the symbol library table. Preferences > Manage Footprint Libraries The first time you open this menu, you will be asked to \"Configure Global Footprint Library Table\". Choose \"Copy Default Global Footprint Table\" On the Global Libraries tab select the folder icon at the bottom (Add existing library to table) Navigate to wherever you cloned the repo. Choose the SWLib.pretty folder.","title":"Installation"},{"location":"electrical/software/kicad/#updating","text":"Open a terminal or git bash in the folder you cloned the repository to. Run git pull origin main","title":"Updating"},{"location":"electrical/software/kicad/#creating-new-parts","text":"Before creating a new part, check if it exists in one of the builtin KiCad libraries. Many parts do. You can search in the symbol editor. To create a new part, it is necessary to create both a symbol and footprint for the part. Symbols are used in schematics. Footprints are used on the PCB. In their simplest form, both are a collection of pins with unique numbers. On a symbol, pins are \"lines\". On a footprint, pins are \"holes\" or \"pads\" that go in / on the PCB. Pins on a symbol are associated with pins on a footprint by the pin's number. In addition to numbers, pins on a symbol can have human readable names. These are only used to show the designer what the pin is called. To start, create the symbol Open the symbol editor (in KiCad's main window) Select SWLib in the libraries panel on the left Select the new symbol button (or File > New Symbol... ) Name the symbol. This should typically match the name of the part you are making a symbol for. Optionally select an existing symbol to derive from (\"start with\") Change the designator if needed. See this Typically, units per package should be left as 1 Leave other settings unchanged Click OK to create you symbol. It will be open in the editor. Make sure the unit is set to \"mil\" on the left hand toolbar. Make sure the grid is set to 50mil ( View > Grid Properties ). You can see the current grid on the bottom bar. Create the symbol. You can use the tools on the right toolbar to \"draw\" the symbol (lines, shapes, arcs). Draw your part centered on the origin! Then use the \"pin\" tool (right toolbar) to add the required number of pins. Name the pins using the names in the part's datasheet. Make sure the pin number match the part's package pin numbers. When creating pins, the \"circle\" should be facing out. THis is where wires connect to in the schematic. Make sure to drag the designator above the part Save! After creating the symbol, determine if you need to create a footprint. KiCad's footprint libraries have a footprint for most standard packages (0603, 0805, 1206, etc for resistors, capacitors, diodes, inductors; QFP, TSSOP, SOIC, DIP, QFN, etc for ICs). Open the footprint editor and search for the package your device uses. If it exists, do not create a custom footprint. Skip to step 6. If you do need to create the footprint, follow the instructions below. Open the footprint editor Select \"SWLib\" in the left panel with all libraries Select File > New Footprint to create an empty footprint. Name it the same as your part. Use the footprint editor to place pads and draw any desired silkscreen. Make sure the numbers of the pads match the numbers of the pins the pad should be associated with. Follow numbering convention in the part's datasheet. Save! Go back to your part in the Symbol editor. Edit symbol properties ( File > Symbol Properties... ) Click the library icon next to the footprint field (you may need to click the footprint field first). Select the footprint for your part Double check the pin number order of the footprint and schematic. This is especially important if you are using a footprint you did not make. Save! Optionally, you can add a 3D model to a footprint. Create or download a 3D mode. Save it as a step or stl file in SW-KicadLibrary/SWLib.3d . Name it the same as the part. Open the footprint editor and select your part. Edit footprint properties ( File > Footprint Properties... ) Select the 3D models tab Click the plus button and type the following. Never use the browse feature to select a 3d model! Browse tool uses absolute paths, which will break the model on other people's systems. ../../SWLib.3d/[FILE].step Replace [FILE] with the name of the step file. This is case sensitive! . Close the properties panel and save the footprint. After creating your part (and saving everything) commit your changes in the SW-KicadLibrary repo and push.","title":"Creating new Parts"},{"location":"electrical/software/kicad/#importing-downloaded-parts","text":"Many parts will have footprints and symbols (ECAD models) available for download. These often include 3D models too. Some common sources to find these models are SamacSys (easiest to access through mosuer; DO NOT INSTALL THE LIBRARY LOADER! DO NOT USE IT! ) UltraLibrarian SnapEDA Note that you will need an account to use any of these services. When downloading a model, download symbol and footprint. If a 3D model is available, download it too. After downloading, follow the instructions below depending on where you downloaded the model from. Note that if a 3D model was not available, the 3D model file will be missing. SamacSys The downloaded file will be a .zip file. Extract it.Locate the following three files. Symbol: [PART]/KiCad/[PART].kicad_sym (older parts may only have a .lib file. This works too.) Footprint: [PART]/KiCad/[PACKAGE].kicad_mod 3D Model: [PART]/3D/[PART].stp UltraLibrarian The downloaded file will be a .zip file. Extract it.Locate the following three files. Symbol: KiCAD/[NAME]/[NAME].lib Footprint: KiCAD/[NAME]/footprints.pretty/[NAME].kicad_mod 3D Model: [NAME]/STEP/[NAME].step SnapEDA The downloaded file will be a .zip file. Extract it.Locate the following three files. Symbol: [PART].kicad_sym Footprint: [PART].kicad_mod 3D Model: [PART].step Open KiCad's symbol editor Find SWLib in the panel on the left. Right click \"SWLib\" and choose \"Import Symbol...\" Choose the symbol file ( .lib ) described above. Save the symbol. Open the footprint editor. Find SWLib in the panel on the left. Right click \"SWLib\" and choose \"Import Footprint...\" Choose the footprint file ( .kicad_mod ) described above. Save into SWLib Copy the 3D model file ( .step / .stp file described above) to SWLib. This must be copied to wherever you cloned SWLib. Paste the .step file into SW-KicadLibrary/SWLib.3d In the footprint editor, edit footprint properties ( File > Footprint Properties... ) Select the 3D models tab Click the plus button and type the following. Never use the browse feature to select a 3d model! Browse tool uses absolute paths, which will break the model on other people's systems. ../../SWLib.3d/[FILE].step Replace [FILE] with the name of the step file. This is case sensitive! . Change step to a different suffix if the file uses a different suffix. Close the properties panel and save the footprint. Go back to the symbol editor and select the imported symbol. Open symbol properties ( File > Symbol Properties... ) Click the footprint field, then select the browse button Choose the footprint now imported into the SWLib footprint library Close the symbol properties panel and save. After importing your part (and saving everything) commit your changes in the SW-KicadLibrary repo and push.","title":"Importing Downloaded Parts"},{"location":"electrical/software/kicad/#creating-a-new-project","text":"Make sure you have installed SWLib first! TODO","title":"Creating a New Project"},{"location":"electrical/software/kicad/#opening-an-existing-project","text":"Make sure you have installed SWLib first! TODO","title":"Opening an Existing Project"},{"location":"electrical/software/kicad/#design-workflow","text":"","title":"Design Workflow"},{"location":"electrical/software/kicad/#schematic","text":"Always use a 50mil grid in the schematic editor! If absolutely necessary, a 25mil grid can be used occasionally, but try to avoid doing so. TODO: General schematic work TODO: Symbol table conventions and custom part number field TODO: Net label and power port behavior across multiple schematic sheets","title":"Schematic"},{"location":"electrical/software/kicad/#electrical-rules-check","text":"TODO","title":"Electrical Rules Check"},{"location":"electrical/software/kicad/#assign-footprints","text":"TODO (note bulk procedures too)","title":"Assign footprints"},{"location":"electrical/software/kicad/#pcb-setup","text":"It is generally necessary to setup some board stackup parameters (specifically the number of copper layers) before starting the PCB. In order to make running DRCs later, it is best to import board settings from one of the SW-KiCadTemplates . These templates are based on PCB manufacturer board stackups and include design rules. Specifics (such as board color, default item sizes, etc) can be customized after importing a template. To import a template, follow the steps listed below Download a zip of the repo and extract the zip (or just clone it) Open your project in KiCad Open your PCB Open Board Setup ( File > Board Setup ) Click the button on the bottom left labeled \"Import Settings from Another Board\" Choose the kicad_pcb file for the template you want to use. Which template is used should depend on how you plan to design the PCB (number of layers, impedance control, etc) as well as who you plan to have manufacture the PCB. After selecting a template file, click the \"Select All\" button (rarely will you want to import only some settings) Click \"Import Settings\" Click \"OK\" to close the board setup dialog Save the PCB file Restart KiCad (Close fully and reopen the project). Skipping this step can cause library issues until KiCad is restarted.","title":"PCB Setup"},{"location":"electrical/software/kicad/#pcb-layout-routing","text":"Always work in mil not mm grid! TODO","title":"PCB Layout &amp; Routing"},{"location":"electrical/software/kicad/#design-rules-check-drc","text":"Setup design rules in Boards Setup ( File > Board Setup ). Fill in options for Design Rules > Constraints and change defaults in Text & Graphics > Defaults as applicable. Skip this if you imported board settings from one of the template boards! Close Board Setup dialog when done. Open the design rules checker dialog ( Inspect > Design Rules Checker ) At the top, select only \"Refill all zones before performing DRC\" Make sure both errors and warnings are shown (checkboxes near bottom of the dialog) Run the DRC Fix any errors. Fix or waive warnings as warranted.","title":"Design Rules Check (DRC)"},{"location":"electrical/software/kicad/#tips-and-tricks","text":"","title":"Tips and Tricks"},{"location":"electrical/software/kicad/#flat-multi-page-schematics","text":"There are two common ways of doing multi-page schematics: Hierarchical and flat. Hierarchical design embeds one sheet as a block in another. Connections between sheets are made using ports. Flat designs have multiple sheets (all considered top level). Connections between sheets are made by naming nets the same name. AquaPack prefers to use Hierarchical design over flat design practices . In rare cases it may be acceptable to use a flat design, however KiCad doesn't really support them well. You still have to create a top level schematic and add all your sheets as blocks to it. However you just won't add ports or make connections. The top level sheet just acts as a container.","title":"Flat multi-page Schematics"},{"location":"electrical/software/kicad/#handsolder-footprints","text":"The builtin KiCad footprint libraries often have two variants of footprints (eg for resistors, capacitors, etc). One is often suffixed \"HandSolder\". These footprints use elongated pads that make it easier to solder components to the board by hand. These are generally preferred for our use cases.","title":"HandSolder Footprints"},{"location":"electrical/software/kicad/#mounting-holes","text":"Do not use vias or manually placed pads for mounting holes. This will lead to DRC warnings / errors. Instead use footprints from the builtin \"MountingHole\" library. These footprints can be added to the PCB without corresponding symbols in the schematic by using the \"Add Footprint\" option in the PCB editor ( Place > Add Footprint ). After adding the footprint, make sure to edit its properties and check the \"Not in schematic\" box.","title":"Mounting Holes"},{"location":"electrical/software/kicad/#silkscreen-text-size","text":"Most manufacturers specify limits on character height and stroke width. KiCad also wants a character width. Always make this equal the the height of your characters!","title":"Silkscreen Text size"},{"location":"electrical/software/kicad/#adding-images-to-silkscreen","text":"Open the project you want to add images to In KiCad's project window open the \"Image Converter\" Click Load Image and choose the image you want to add. Monochrome bitmaps work well. Other image formats work, but you may need to adjust the black / white threshold. Choose the size of the image in \"Output Size\" (if not sure what size you want guess; trial and error is the way to go) Choose \"Footprint (.kicad_mod file)\" for Output Format Make sure \"Front Silkscreen\" is selected for the layer Click \"Export to Clipboard\" (there is generally no reason to save graphics as symbol files) Open the PCB (it is recommended to still leave the image converter window open for now too) Paste the symbol (Ctrl+V for normal people or CMD+V on mac) and place it where you want on the board To place on the back of the board, press the F key with the graphic selected. If the size is wrong, do not attempt to resize it in the PCB. Go back to the image converter window, change the size and export to clipboard again. Paste it into the PCB again. Repeat as needed. Once the graphic is paced where you want it, double click it to open its properties (footprint properties) and uncheck the \"Show\" box next to \"Reference Designator\". Click OK to close the dialog. Note that when you run the DRC check, there will be a footprint warning about the graphic. Just exclude the violation.","title":"Adding Images to Silkscreen"},{"location":"electrical/software/kicad/#thermal-relief-connections-to-pads","text":"When connecting a zone to a pad, it will be thermally relieved by default. This means it will be connected with \"spokes\" instead of solid copper. This is usually desirable, however it can be disabled in the properties of the zone if you need to or specific cases (usually only necessary for high current or if using copper on the board as a heatsink).","title":"Thermal Relief Connections to Pads"},{"location":"electrical/software/kicad/#other-useful-options-features-of-pcb-editor","text":"You can fill or unfill all copper zones (sometimes called \"polygons\" or \"pours\" or \"planes\") by using Edit > Fill All Zones and Edit > Unfill All Zones . Unfilling zones is useful while working on the board. Filling them lets you see how the zone will be filled after updating the zone itself. You can flip the board view using View > Flip Board View . This is sometimes useful if working on the back of the board. This pairs well with the layer presets on the right below the layer selector (for example, select the all back layers preset). When editing tracks (traces) you can select one part and use the \"U\" and \"I\" keys to select more or less of the track. You can bulk edit fonts of silkscreen text using Edit > Edit Text and Graphics Properties... . You can automatically cleanup traces and vias (remove redundant segments, etc) using Tools > Cleanup Tracks and Vias... . However, be careful with the \"Delete redundant vias\" option. This may delete vias you wanted multiple of for current or heat reasons.","title":"Other Useful Options / Features of PCB Editor"},{"location":"electrical/software/overview/","text":"There are various tools and pieces of software used in relation to the electrical design of SeaWolf VIII. These are listed below PCB Design KiCad Required Operating System: Windows, macOS, Linux Download Links: KiCad Used to design PCBs and schematics for various custom boards in use on SeaWolf VIII. KiCad is a free and open source Electronic Design Automation (EDA) tool which is generally easy to learn to use, but powerful enough when needed. Altium Designer Required Operating System: Windows Download Links: Altium Designer (license either through university or AquaPack) Many SeaWolf VIII boards were originally designed using Altium Designer. Altium Designer is a proprietary EDA tool. While more commonly used in industry than KiCad, the decision was ultimately made to move to KiCad to simplify library management, reduce software learning curves, and improve operating system compatibility. MSP430 Embedded Firmware Custom PCBs used on SeaWolf VIII are designed around TI's MSP430 MCUs or Launchpad development boards. The firmware for these boards is developed using one of the following tools. Note that IAR is intentionally avoided. TI's CCS is free and fully featured with no code size limit. Additionally, IAR's evaluation license only allows access to the newest version of IAR which can make project compatibility and maintenance difficult. Arduino / Energia Required Operating System: Windows, macOS, Linux Download Links: Arduino IDE | MSP430 Core While the Energia project is officially unmaintained since November 2022, there are builds of the Energia MSP430 Arduino core located at the link above. These builds user newer tooling and fix bugs with some of the chips used. This core can be installed with the official Arduino IDE. Generally, this is used only during prototyping or when rapid firmware development is required. TI Code Composer Studio (CCS) Required Operating System: Windows, macOS, Linux Download Link: TI CCS | MSP430 GCC TI's Code Composer Studiohttps://www.ti.com/design-resources/embedded-development/ccs-development-tools.html supports the MSP430 chips using TI's compiler or a separately installed open source GCC compiler. This IDE is Eclipse based and integrates a debugger among many other tools. Circuit Simulation LTSpice Required Operating System: Windows, macOS, Linux (through Wine) Download Link: LTSpice LTSpice is a free circuit simulator with builtin models for many Analog Devies / Linear Tech chips. This is generally our preferred circuit simulator as it is easy to install and use. In some cases however, models designed for PSpice (usually TI parts) are not compatible (they are either encrypted or use PSpice features that LTSpice does not have). In these cases other software is used. PSpice for TI Required Operating System: Windows Download Link: PSpice for TI (requires TI account and export approval) PSpice for TI is a limited feature version of Cadance's PSpice simulator. It is more difficult to setup, thus we generally prefer LTSpice, however there are cases where this should be used instead (when a TI model is encrypted or when a model uses PSpice features that LTSpice does not support). Note that using ADI / LT devices is often not possible in PSpice. ADI / LT typically provide encrypted LTSpice models only. Hardware Design (FPGA) Vivado & Vitis Required Operating System: Windows, Linux Download Link: Vivado ML Edition (requires AMD account and export approval) Vivado is used with our Digilent Basys3 FPGA dev board used for the Acoustics system. Vivado is currently used for synthesis, implementation, and bitstreaming. Going forward we intend to explore Vivado's simulation functions too. Scientific Computing Generally used for mathematic modeling, validation, or simulation. MATLAB Required Operating System: Windows, macOS, Linux Download Link: Accessed through university. Follow university instructions. If MATLAB is available, it is generally advisable to use it over GNU Octave as MATLAB is faster and better supported. GNU Octave Required Operating System: Windows, macOS, Linux Download Link: GNU Octave If MATLAB is not available, GNU Octave is compatible with many MATLAB programs. GNU Octave is free and open source with many packages similar to MATLAB toolboxes as well. While generally compatible with MATLAB code, Octave does not implement all functions. In particular many more recent MATLAB \"helper\" functions (ie advanced string manipulation functions) are not implemented and require more complex sets of operations to replicate in Octave. However, most core math functions are implemented in Octave. Due to the few compatibility issues Octave may have, and the fact that Octave is likely slower than MATLAB, it is usually recommended to use MATLAB if a license is available. Python + 3rd Party Packages Required Operating System: Windows, macOS, Linux Download Links: Python 3 | NumPy | SciPy | Matplotlib (On Linux use distribution package manager to install python3) Instead of MATLAB it is sometimes preferred (personal preference, language experience, better tool for the particular job, etc) to use Python with a few third party libraries. These libraries are usually numpy , scipy , and matplotlib (install these packages with pip ). These libraries can allow python to be a very useful scientific computing tool for many similar applications to how MATLAB or Octave may be used. Other Git SCM Required Operating System: Windows, macOS, Linux Download Link: Git SCM (On macOS install Xcode command line tools; On linux install using distribution package manager) Most of our PCB design files and embedded firmware source code is located in GitHub which uses git as a source control / version control tool. You will need git installed on your computer to use these repositories. Digilent WaveForms Required Operating System: Windows, macOS, Linux Download Link: WaveForms | Adept Runtime (On Linux make sure to install the Adept runtime first. This is not required on Windows or macOS) Many members of the club have an Analog Discover 2 from coursework. WaveForms allows this to be used as an oscilloscope, logic analyzer, waveform generator, spectrum analyzer, and many more tools.","title":"Overview"},{"location":"electrical/software/overview/#pcb-design","text":"","title":"PCB Design"},{"location":"electrical/software/overview/#kicad","text":"Required Operating System: Windows, macOS, Linux Download Links: KiCad Used to design PCBs and schematics for various custom boards in use on SeaWolf VIII. KiCad is a free and open source Electronic Design Automation (EDA) tool which is generally easy to learn to use, but powerful enough when needed.","title":"KiCad"},{"location":"electrical/software/overview/#altium-designer","text":"Required Operating System: Windows Download Links: Altium Designer (license either through university or AquaPack) Many SeaWolf VIII boards were originally designed using Altium Designer. Altium Designer is a proprietary EDA tool. While more commonly used in industry than KiCad, the decision was ultimately made to move to KiCad to simplify library management, reduce software learning curves, and improve operating system compatibility.","title":"Altium Designer"},{"location":"electrical/software/overview/#msp430-embedded-firmware","text":"Custom PCBs used on SeaWolf VIII are designed around TI's MSP430 MCUs or Launchpad development boards. The firmware for these boards is developed using one of the following tools. Note that IAR is intentionally avoided. TI's CCS is free and fully featured with no code size limit. Additionally, IAR's evaluation license only allows access to the newest version of IAR which can make project compatibility and maintenance difficult.","title":"MSP430 Embedded Firmware"},{"location":"electrical/software/overview/#arduino-energia","text":"Required Operating System: Windows, macOS, Linux Download Links: Arduino IDE | MSP430 Core While the Energia project is officially unmaintained since November 2022, there are builds of the Energia MSP430 Arduino core located at the link above. These builds user newer tooling and fix bugs with some of the chips used. This core can be installed with the official Arduino IDE. Generally, this is used only during prototyping or when rapid firmware development is required.","title":"Arduino / Energia"},{"location":"electrical/software/overview/#ti-code-composer-studio-ccs","text":"Required Operating System: Windows, macOS, Linux Download Link: TI CCS | MSP430 GCC TI's Code Composer Studiohttps://www.ti.com/design-resources/embedded-development/ccs-development-tools.html supports the MSP430 chips using TI's compiler or a separately installed open source GCC compiler. This IDE is Eclipse based and integrates a debugger among many other tools.","title":"TI Code Composer Studio (CCS)"},{"location":"electrical/software/overview/#circuit-simulation","text":"","title":"Circuit Simulation"},{"location":"electrical/software/overview/#ltspice","text":"Required Operating System: Windows, macOS, Linux (through Wine) Download Link: LTSpice LTSpice is a free circuit simulator with builtin models for many Analog Devies / Linear Tech chips. This is generally our preferred circuit simulator as it is easy to install and use. In some cases however, models designed for PSpice (usually TI parts) are not compatible (they are either encrypted or use PSpice features that LTSpice does not have). In these cases other software is used.","title":"LTSpice"},{"location":"electrical/software/overview/#pspice-for-ti","text":"Required Operating System: Windows Download Link: PSpice for TI (requires TI account and export approval) PSpice for TI is a limited feature version of Cadance's PSpice simulator. It is more difficult to setup, thus we generally prefer LTSpice, however there are cases where this should be used instead (when a TI model is encrypted or when a model uses PSpice features that LTSpice does not support). Note that using ADI / LT devices is often not possible in PSpice. ADI / LT typically provide encrypted LTSpice models only.","title":"PSpice for TI"},{"location":"electrical/software/overview/#hardware-design-fpga","text":"","title":"Hardware Design (FPGA)"},{"location":"electrical/software/overview/#vivado-vitis","text":"Required Operating System: Windows, Linux Download Link: Vivado ML Edition (requires AMD account and export approval) Vivado is used with our Digilent Basys3 FPGA dev board used for the Acoustics system. Vivado is currently used for synthesis, implementation, and bitstreaming. Going forward we intend to explore Vivado's simulation functions too.","title":"Vivado &amp; Vitis"},{"location":"electrical/software/overview/#scientific-computing","text":"Generally used for mathematic modeling, validation, or simulation.","title":"Scientific Computing"},{"location":"electrical/software/overview/#matlab","text":"Required Operating System: Windows, macOS, Linux Download Link: Accessed through university. Follow university instructions. If MATLAB is available, it is generally advisable to use it over GNU Octave as MATLAB is faster and better supported.","title":"MATLAB"},{"location":"electrical/software/overview/#gnu-octave","text":"Required Operating System: Windows, macOS, Linux Download Link: GNU Octave If MATLAB is not available, GNU Octave is compatible with many MATLAB programs. GNU Octave is free and open source with many packages similar to MATLAB toolboxes as well. While generally compatible with MATLAB code, Octave does not implement all functions. In particular many more recent MATLAB \"helper\" functions (ie advanced string manipulation functions) are not implemented and require more complex sets of operations to replicate in Octave. However, most core math functions are implemented in Octave. Due to the few compatibility issues Octave may have, and the fact that Octave is likely slower than MATLAB, it is usually recommended to use MATLAB if a license is available.","title":"GNU Octave"},{"location":"electrical/software/overview/#python-3rd-party-packages","text":"Required Operating System: Windows, macOS, Linux Download Links: Python 3 | NumPy | SciPy | Matplotlib (On Linux use distribution package manager to install python3) Instead of MATLAB it is sometimes preferred (personal preference, language experience, better tool for the particular job, etc) to use Python with a few third party libraries. These libraries are usually numpy , scipy , and matplotlib (install these packages with pip ). These libraries can allow python to be a very useful scientific computing tool for many similar applications to how MATLAB or Octave may be used.","title":"Python + 3rd Party Packages"},{"location":"electrical/software/overview/#other","text":"","title":"Other"},{"location":"electrical/software/overview/#git-scm","text":"Required Operating System: Windows, macOS, Linux Download Link: Git SCM (On macOS install Xcode command line tools; On linux install using distribution package manager) Most of our PCB design files and embedded firmware source code is located in GitHub which uses git as a source control / version control tool. You will need git installed on your computer to use these repositories.","title":"Git SCM"},{"location":"electrical/software/overview/#digilent-waveforms","text":"Required Operating System: Windows, macOS, Linux Download Link: WaveForms | Adept Runtime (On Linux make sure to install the Adept runtime first. This is not required on Windows or macOS) Many members of the club have an Analog Discover 2 from coursework. WaveForms allows this to be used as an oscilloscope, logic analyzer, waveform generator, spectrum analyzer, and many more tools.","title":"Digilent WaveForms"},{"location":"electrical/sysdesign/acoustics/","text":"Note that this page is currently an outline and most of the content is not yet written. TODO: Acoustics system overview","title":"Acoustics System"},{"location":"electrical/sysdesign/batteries/","text":"Power Requirements SeaWolf VIII's most power consuming components are the thrusters. It uses 8 BlueRobotics T200 thrusters. The following information was sourced from BlueRobotic's site for the T200 thrusters Nominal Voltage Full Throttle Current 10V 14A 12V 17A 14V 21A 16V 24A 20V 32A It is not realistic that all 8 thrusters will be running full throttle at all times. Thus, these current numbers determine how individual thrusters should be fused, not total system power requirements. Note that one thruster's motion will also result in some amount of battery voltage drop, thus a second thruster will have a lower \"nominal\" voltage, and so on for all 8 thrusters. This imposes a limit on max system current draw. For physical size and current draw reasons, it was decided to use 4S LiPo batteries (nominal 14.8V). Based on charts provided by BlueRobotics, it was predicted that SW8's max current draw would be between 40 and 60A. This was later experimentally determined to be an over estimate (all thrusters at full power was measured to be approx 38A steady state). Battery selection was based on the 60A number. This motivated the 2 battery architecture along with a desire for longer run times. Physical size constrained us to 10000mAh batteries. We speculated that a 30A steady-state current draw would be possible while in motion at competition speeds. Thus 10Ah / 30A = 20minutes of runtime per battery. With 2 batteries this would allow 40 minutes of runtime. Please not that the 30A was an over estimate. In practice we seem to get about 2 hours of runtime off SW8 while holding depth and moving at translational speeds of 30%, which is a reasonable speed for competition runs. Old Batteries Originally, SW8 used Turnigy Graphene 4S 10000mAH LiPo Battery Packs . These batteries work well enough, however there are several concerns / potential issues \"Cheap\" LiPo makers (such as Turnigy) often use reject cells. These are usually not safety concerns, but will result in significantly poorer performance than advertised. Cheap LiPos often over spec their batteries (discharge and charge rate specs). The cells used in cheaper batteries often change over time in the same product. Thus, it is usually difficult or impossible to get a proper MSDS for the batteries without opening one of the same age up. This is a potentially hazardous process and renders the battery useless. Manuals and information is often hard to find Usually, these are soft shell LiPo batteries. This is less desirable for our use case as it would provide less protection from moisture in the event of a leak than a hard shell LiPo case. For these reasons, as well as the age of the batteries, it was decided to transition to a new set of batteries without these issues. The old Turnigy batteries are still kept as a backup set of batteries as they show no signs of concerning wear. New Batteries The newer batteries were chose to avoid issues with the previous ones. The selection criteria were as follows Manufacturer must provide a MSDS or exact cell model number Manufacturer must provide all manuals downloadable before battery purchase Manufacturer manuals must include specs, handling and safety information, as well as disposal information. Ideally, hard shell LiPo battery The selected batteries currently in use are Gens ace Advanced 10000mAh HardCase Lipo Battery Packs . Gens ace provides all required information on the batteries, and are generally regarded as being one of the better LiPo manufacturers in hobby communities (generally, they don't over spec batteries and seem to not use reject cells). The batteries in question are still 4S 10000mAh batteries and physically fit in the same battery hulls as the old batteries used. They are also hard shell LiPos with some additional safety features builtin (over discharge warning, imbalance warning, etc).","title":"Batteries"},{"location":"electrical/sysdesign/batteries/#power-requirements","text":"SeaWolf VIII's most power consuming components are the thrusters. It uses 8 BlueRobotics T200 thrusters. The following information was sourced from BlueRobotic's site for the T200 thrusters Nominal Voltage Full Throttle Current 10V 14A 12V 17A 14V 21A 16V 24A 20V 32A It is not realistic that all 8 thrusters will be running full throttle at all times. Thus, these current numbers determine how individual thrusters should be fused, not total system power requirements. Note that one thruster's motion will also result in some amount of battery voltage drop, thus a second thruster will have a lower \"nominal\" voltage, and so on for all 8 thrusters. This imposes a limit on max system current draw. For physical size and current draw reasons, it was decided to use 4S LiPo batteries (nominal 14.8V). Based on charts provided by BlueRobotics, it was predicted that SW8's max current draw would be between 40 and 60A. This was later experimentally determined to be an over estimate (all thrusters at full power was measured to be approx 38A steady state). Battery selection was based on the 60A number. This motivated the 2 battery architecture along with a desire for longer run times. Physical size constrained us to 10000mAh batteries. We speculated that a 30A steady-state current draw would be possible while in motion at competition speeds. Thus 10Ah / 30A = 20minutes of runtime per battery. With 2 batteries this would allow 40 minutes of runtime. Please not that the 30A was an over estimate. In practice we seem to get about 2 hours of runtime off SW8 while holding depth and moving at translational speeds of 30%, which is a reasonable speed for competition runs.","title":"Power Requirements"},{"location":"electrical/sysdesign/batteries/#old-batteries","text":"Originally, SW8 used Turnigy Graphene 4S 10000mAH LiPo Battery Packs . These batteries work well enough, however there are several concerns / potential issues \"Cheap\" LiPo makers (such as Turnigy) often use reject cells. These are usually not safety concerns, but will result in significantly poorer performance than advertised. Cheap LiPos often over spec their batteries (discharge and charge rate specs). The cells used in cheaper batteries often change over time in the same product. Thus, it is usually difficult or impossible to get a proper MSDS for the batteries without opening one of the same age up. This is a potentially hazardous process and renders the battery useless. Manuals and information is often hard to find Usually, these are soft shell LiPo batteries. This is less desirable for our use case as it would provide less protection from moisture in the event of a leak than a hard shell LiPo case. For these reasons, as well as the age of the batteries, it was decided to transition to a new set of batteries without these issues. The old Turnigy batteries are still kept as a backup set of batteries as they show no signs of concerning wear.","title":"Old Batteries"},{"location":"electrical/sysdesign/batteries/#new-batteries","text":"The newer batteries were chose to avoid issues with the previous ones. The selection criteria were as follows Manufacturer must provide a MSDS or exact cell model number Manufacturer must provide all manuals downloadable before battery purchase Manufacturer manuals must include specs, handling and safety information, as well as disposal information. Ideally, hard shell LiPo battery The selected batteries currently in use are Gens ace Advanced 10000mAh HardCase Lipo Battery Packs . Gens ace provides all required information on the batteries, and are generally regarded as being one of the better LiPo manufacturers in hobby communities (generally, they don't over spec batteries and seem to not use reject cells). The batteries in question are still 4S 10000mAh batteries and physically fit in the same battery hulls as the old batteries used. They are also hard shell LiPos with some additional safety features builtin (over discharge warning, imbalance warning, etc).","title":"New Batteries"},{"location":"electrical/sysdesign/cameras/","text":"The current Cameras used on SeaWolf VIII are based on ArduCam B0292 cameras. These camera modules connect to a computer by USB and are UVC compliant, meaning they should easily work on most operating systems. Note that a specific firmware must be flashed to these cameras for them to work properly with a Jetson Nano and for them to perform well in low light. See instructions below. The current camera enclosures are designed to be able to house two camera modules each. This is to allow stereo vision capabilities in the future. However, for now they are assembled using a single camera module. Camera Firmware When wiring a new camera, or installing a new camera in the camera hull, it is necessary to make sure it is running the correct firmware. This requires a windows PC . The camera firmware is flashed using a tool provided on the ArduCam forums. A zip with this flash tool and the firmware file to be flashed is located here . This tool is windows only. Additionally, it seems to have issues (cuts off part of the UI) on HiDPI systems. You may need to set display scaling to 100% in windows settings before running the program. After downloading the zip, extract it. There will be two things A folder named CommonBurnerAP v1.0.1.4 A .src firmware file In the CommonBurnerAP folder run CommonBurnerAP.exe . You must connect the camera you want to flash before launching CommonBurnerAP.exe . Once launched, reference the image below and follow the steps below Make sure the tab labeled \"A\" is selected. Select the button labeled \"B\". This will bring up a file explorer window. Choose the .src firmware file Click the button labeled \"C\". This will start flashing. Wait for the flash to finish before disconnecting the camera. Cable Assembly The cable used for the cameras is an Igus CFBUS.PUR.068 cable. This cable is designed for USB 3.0 (8 pins with two shielded pairs), however we instead use it for 2x USB 2.0. This just means the shielding on the second set of wires is not strictly required. USB 3.0 uses the following wire colors (paired) Red, Black (5V power) White, Green (Main data pair) Yellow, Blue (Supper Speed Direction 1) Orange, Purple (Super Speed Direction 2) USB 2.0 uses the following Red, Black (5V power) White, Green (Main data pair) Thus, for one camera, we can match wire colors. For the other camera, follow the table below. Igus Wire Color Camera 1 Cable Color Camera 2 Cable Color Red Red --- Black Black --- White White --- Green Green --- Orange --- Red Purple --- Black Yellow --- White Blue --- Green This creates a cable looking something like the following where inside the enclosure there are two camera cables with ZHR-4 connectors for the camera modules. These go to a single cable running to the main hull, and inside the main hull they are split into two USB 2.0 type A connectors. Note that the ZHR-4 connectors are from the wire that comes with the cameras. It is cut and spliced to the Igus cable. Also note that the pinout for the fischer is located on the Endcap Pinout page. Penetrator Before anything else is done, install a penetrator (or wetlink penetrator) on the cable. Leave approx 5 inches of stripped wire after the penetrator. Follow mechanical team procedures for penetrator installation (or have mech team follow said procedures). Camera Connector Splice Cut the top 2-3 inches of a camera cable off and remove the outer insulation. This leaves a ZHR-4 with four wires (red, black, green, white). Splice these to the penetrated wire as shown in the table / diagram above. *Note that the picture below was taken while assembling for one camera. For a second camera, repeat the process with a second camera cable and splice to the orange, purple, yellow, and blue wires. Fischer Plug The fischer plug needs to be soldered onto the cable matching the pinout here . Follow general fischer soldering and assembly procedures here . Note that this fischer receptacle is more difficult to solder to than most. This is partially due to the three unused pins in the middle, partially due to the small wire gauge, and partially due to the length of wire you are able to strip back. Even if you are only assembling for one camera, solder all wires to the fischer plug. Failure to do so will result in a much weaker connection to the wire. Strip 1cm ( no more ) of outer insulation off the Igus cable. Remove the paper shielding and mesh foil from all wires. Removing the paper and shielding is \"difficult\" (time consuming) and best done carefully using flush cuts. Make sure not to cut off any cables. Strip about 2mm of each wire and tin it. Do not strip more than 2mm. This wire insulation on the inner wires melts before solder, so it will shrink when you tin the wire. After tinning, you should have approx 4mm of wire exposed. If less is exposed, strip off a little more insulation. Then solder the wire to the fischer plug as you would normally solder a fischer. Follow the pinout. It is recommended to solder wires in the following order. You may have to cross wires across the connector and this order minimizes effort. Of the following colors, solder whichever is \"easier\" first. red or black white or green yellow or blue purple or orange Then repeat the same order but the other color. Once soldered, as always, fully assemble the plug, connect it to a receptacle, and make sure there is not continuity between any used pins. Note that continuity between the three center pins is possible (due to contact with remnants of wire shielding), but is acceptable since they are unused. Fischer Receptacle The fischer receptacle is much easier to assemble, primarily because the wire does not need to be so short. Find a USB-A cable and cut off the other end (ie if it was a USB-A to USB-microB cable, cut off the micro-B side). It is best to find a cable with a similar USB-A connector to the one pictured. The outer material is rubber, which is important for step 2. Using flush cuts, trim down the USB-A outer rubber to make it fit through the fisher recepticle's nut. Strip and solder to the receptacle according to the endcap pinout. Note that only one wire is shown here. If two cameras are used, add a second USB-A cable to the recepticle on the apropriate pins. Follow the endcap pinout and table / diagram at the top of this section. As always, add hot glue to the receptacle for strain relief.","title":"Cameras"},{"location":"electrical/sysdesign/cameras/#camera-firmware","text":"When wiring a new camera, or installing a new camera in the camera hull, it is necessary to make sure it is running the correct firmware. This requires a windows PC . The camera firmware is flashed using a tool provided on the ArduCam forums. A zip with this flash tool and the firmware file to be flashed is located here . This tool is windows only. Additionally, it seems to have issues (cuts off part of the UI) on HiDPI systems. You may need to set display scaling to 100% in windows settings before running the program. After downloading the zip, extract it. There will be two things A folder named CommonBurnerAP v1.0.1.4 A .src firmware file In the CommonBurnerAP folder run CommonBurnerAP.exe . You must connect the camera you want to flash before launching CommonBurnerAP.exe . Once launched, reference the image below and follow the steps below Make sure the tab labeled \"A\" is selected. Select the button labeled \"B\". This will bring up a file explorer window. Choose the .src firmware file Click the button labeled \"C\". This will start flashing. Wait for the flash to finish before disconnecting the camera.","title":"Camera Firmware"},{"location":"electrical/sysdesign/cameras/#cable-assembly","text":"The cable used for the cameras is an Igus CFBUS.PUR.068 cable. This cable is designed for USB 3.0 (8 pins with two shielded pairs), however we instead use it for 2x USB 2.0. This just means the shielding on the second set of wires is not strictly required. USB 3.0 uses the following wire colors (paired) Red, Black (5V power) White, Green (Main data pair) Yellow, Blue (Supper Speed Direction 1) Orange, Purple (Super Speed Direction 2) USB 2.0 uses the following Red, Black (5V power) White, Green (Main data pair) Thus, for one camera, we can match wire colors. For the other camera, follow the table below. Igus Wire Color Camera 1 Cable Color Camera 2 Cable Color Red Red --- Black Black --- White White --- Green Green --- Orange --- Red Purple --- Black Yellow --- White Blue --- Green This creates a cable looking something like the following where inside the enclosure there are two camera cables with ZHR-4 connectors for the camera modules. These go to a single cable running to the main hull, and inside the main hull they are split into two USB 2.0 type A connectors. Note that the ZHR-4 connectors are from the wire that comes with the cameras. It is cut and spliced to the Igus cable. Also note that the pinout for the fischer is located on the Endcap Pinout page.","title":"Cable Assembly"},{"location":"electrical/sysdesign/cameras/#penetrator","text":"Before anything else is done, install a penetrator (or wetlink penetrator) on the cable. Leave approx 5 inches of stripped wire after the penetrator. Follow mechanical team procedures for penetrator installation (or have mech team follow said procedures).","title":"Penetrator"},{"location":"electrical/sysdesign/cameras/#camera-connector-splice","text":"Cut the top 2-3 inches of a camera cable off and remove the outer insulation. This leaves a ZHR-4 with four wires (red, black, green, white). Splice these to the penetrated wire as shown in the table / diagram above. *Note that the picture below was taken while assembling for one camera. For a second camera, repeat the process with a second camera cable and splice to the orange, purple, yellow, and blue wires.","title":"Camera Connector Splice"},{"location":"electrical/sysdesign/cameras/#fischer-plug","text":"The fischer plug needs to be soldered onto the cable matching the pinout here . Follow general fischer soldering and assembly procedures here . Note that this fischer receptacle is more difficult to solder to than most. This is partially due to the three unused pins in the middle, partially due to the small wire gauge, and partially due to the length of wire you are able to strip back. Even if you are only assembling for one camera, solder all wires to the fischer plug. Failure to do so will result in a much weaker connection to the wire. Strip 1cm ( no more ) of outer insulation off the Igus cable. Remove the paper shielding and mesh foil from all wires. Removing the paper and shielding is \"difficult\" (time consuming) and best done carefully using flush cuts. Make sure not to cut off any cables. Strip about 2mm of each wire and tin it. Do not strip more than 2mm. This wire insulation on the inner wires melts before solder, so it will shrink when you tin the wire. After tinning, you should have approx 4mm of wire exposed. If less is exposed, strip off a little more insulation. Then solder the wire to the fischer plug as you would normally solder a fischer. Follow the pinout. It is recommended to solder wires in the following order. You may have to cross wires across the connector and this order minimizes effort. Of the following colors, solder whichever is \"easier\" first. red or black white or green yellow or blue purple or orange Then repeat the same order but the other color. Once soldered, as always, fully assemble the plug, connect it to a receptacle, and make sure there is not continuity between any used pins. Note that continuity between the three center pins is possible (due to contact with remnants of wire shielding), but is acceptable since they are unused.","title":"Fischer Plug"},{"location":"electrical/sysdesign/cameras/#fischer-receptacle","text":"The fischer receptacle is much easier to assemble, primarily because the wire does not need to be so short. Find a USB-A cable and cut off the other end (ie if it was a USB-A to USB-microB cable, cut off the micro-B side). It is best to find a cable with a similar USB-A connector to the one pictured. The outer material is rubber, which is important for step 2. Using flush cuts, trim down the USB-A outer rubber to make it fit through the fisher recepticle's nut. Strip and solder to the receptacle according to the endcap pinout. Note that only one wire is shown here. If two cameras are used, add a second USB-A cable to the recepticle on the apropriate pins. Follow the endcap pinout and table / diagram at the top of this section. As always, add hot glue to the receptacle for strain relief.","title":"Fischer Receptacle"},{"location":"electrical/sysdesign/endcap/","text":"Note that this page is currently an outline and most of the content is not yet written.","title":"Endcap Pinout"},{"location":"electrical/sysdesign/moab_power/","text":"SeaWolf VIII's (SW8) power system consists of several components layed out on and wired together on MOAB / FOAB. There is no central \"power system\" PCB / board on SW8. The components of the power system are described here. The boards involved have more detail on their pages under the \"Boards\" section. Power Input Battery Input SeaWolf VIII is powered by two 4-cell (4S) LiPo batteries. Each battery is fused at 40A of current. These batteries are connected in parallel allowing for a total of 80A current draw from the batteries. However, there are some cases where connecting LiPo batteries in parallel could cause issues The LiPos are charged to different levels. In this case one would charge the other. This would not be a proper balance charge process. This could lead to fires. One battery drains faster than the other (different age, wear / tear, different cells). While this is less likely, it could lead to one battery charging the other. This could again lead to fires. To address these issues, SW8 has a \"Load Balancing Board\" used to connect the batteries in \"parallel\". The load balancing board conceptually chooses the higher voltage of the two batteries. The system is powered from that battery. When the batteries are charged equally, this effectively balances the load due to voltage drop of the battery under load. The output of the LBB is referred to as \"Vbat\" or \"battery voltage\" in the rest of the documentation. Note that if one battery is not charged or is performing poorly, this can lead to the other battery handing more load. In this case, the fused current limit is not the full 80A. However, in practice SW8 rarely pulls over 40A current (it is capable of running on a single battery if needed). Currently, there is no voltage or current monitor. However, there are plans to add individual voltage and current monitors for each battery (between LiPo and LBB). These monitors will likely be standalone modules initially, but can be integrated into LBB at a later date. Power Switching There are two Solid State Relays (SSRs) used to switch power on SeaWolf VIII. The first one is the \"System Power SSR\". The output of this SSR is used to power the main system (everything except thrusters). This is unregulated voltage (battery voltage level). The second SSR is the \"Thruster Power SSR\". This switches power on and off to the thrusters. This SSR is powered through the system SSR. Thus, if the system is off the thrusters are too. However the system can be switched on with the thrusters off. This allows the thrusters to be disconnected from power when the vehicle is in the \"killed\" state. Thrusters are powered when the vehicle is in the \"armed\" state. The SSRs are controlled by the MEB. The system SSR is connected to the system power switch. This switch pulls the control line to GND to power the system on. Once the MEB boots, a GPIO holds this line LOW to keep the system on. To turn the system off, the system switch placed in the \"off\" position will pull this line high, thus turning off the SSR. See the MEB page for more details. Similarly, the MEB controls the Thruster SSR. The control signal for this, however, is not controlled by MEB software (it just runs through traces on the MEB). Normally, this control line is floating. However, the physical killswitch is connected between this line and GND. When the killswitch is closed, the line is pulled low and the thruster SSR is on. Thus the thrusters have power. When the killswitch is open, the line is floating and the thruster SSR is off. Additionally, on newer versions of MEB (v1.2+) there is a software kill switch MOSFET. This mostfet is in series with the killswitch. The MOSFET is controlled by a GPIO signal directly from the Jetson. This acts as a \"software kill\". Both the software arm (GPIO high) and hardware arm (killswitch closed) must occur for the thrster SSR to be on. Again, see the MEB page for more details. Power Distribution As previously described, there are two main power domains: system power and thruster power. System power is distributed using a Powerwerx PD-8 distribution block (powerpole connectors). Power from the system power SSR is run directly into this bar. Regulators for various system components. TODO: Picture Thruster power is distributed through two \"bars\". One is simply a ground bar. The system ground is connected directly to this bar and the GND connection of the ESCs are connected to the bar. This ground bar is used only for the thrusters. There is also a fuse bar used for thruster power. The fuse bar has one fuse for each of the 8 thrusters / ESCs (currently fused at 25A). TODO: Picture Regulators SeaWolf VIII uses a distributed power regulation architecture. This allowed for early development in a modular fashion early on. However, it should be noted that the distributed architecture is becoming quite messy. It is planned to eventually move away from such an architecture. Jetson Power Regulators The Jetson Nano requires a 5V power supply capable of supplying 4A of current. Many such supplies exist fiarly cheap on amazon, such as this one, which we initially used. However, these supplies tend to have a high dropout voltage (eg min input is 8V for a 5V output). Old Jetson Regulator However, it was observed that arming the thrusters resulted in a current draw spike. This dropped battery voltage to about 7.6V for 100 microseconds. However, this was long enough to drop the regulator output to 3.8V and brown out the Jetson. Our initial solution to this problem was to switch to a better regulator with a lower dropout, specifically Pololu D24V50F5 . However, we were still able to brown out the Jetson because buck regulators tend to be sensative to input voltage drops. To address this, a dual stage regulator architecture was selected: First, battery voltage is regulated to 12V using a 2A SEPIC topology regulator Second, the 12V is regulated to 5V using a 4A+ Buck topology regulator The SEPIC topology is more tolerant of rapid input voltage changes, however a high current (4A) SEPIC is more difficult to find than a lower current one. Thus, 12V@2A is easier than 5V@4A (note: this is true when buying a regulator and likely also when designing one). However, since the jetson requires 5V, a 5V buck regulator is also required to supply the system with enough power. The regulators used for this are 12V@2A SEPIC: Pololu S18V20F12 5V@4A Buck: Pololu D24V50F5 Part Selection justification Justification for the compound regulator design based on graphs on product pages: Worst \u201csteady state\u201d case: Vbat = 12.8V, Icomputer = 4A Pcomputer = 5V * 4A 0= 20W P12V = Pcomputer / efficiency = 20W / 0.92 = 22W I_12V = P12V / 12V = 1.8A (less than expected 2.5A max output at this battery input) Worst \u201cpossible\u201d case: If Pcomputer = 20W and 12V regulator is only 80% efficient P12V = 20W / 0.8 = 25W I_12V = 25W / 12V = 2.08A Expected output current of 12V regulator for vbat = 8V up to 24V is at least 2.25A, thus this handles both worst cases properly given our system requirements, even during the 100 microsecond battery voltage drop to ~8V. With the dual regulator architecture described above, no meaningful voltage drops (over 0.05V) were observed on the Jetson's 5V line when arming thrusters (though battery voltage dropping to 7.6 was still observed). Notes on Voltage Drop when Arming It was also concluded that inrush current when powering the ESCs is an expected quantity. Thus, the voltage drop is not indicative of a flaw in the system. However this could indicate of poorer battery performance than advertised. At the time of testing we were using the \"old\" Turnigy Graphene 4S 10000mAH LiPo batteries. While advertised as being 15C batteries, it is suspected that they may not be or that they may not handle current spikes well. It is possible this would be less of an issue with better batteries (untested as of now). Regardless, the change in regulator architecture results in a more robust system capable of being run off a wider range of power source. Thus, it is still a worthwhile change to keep even if unnecessary in the future with potentially better batteries. Other Regulators Other systems are less sensitive to short term voltage drops (and pull lower amounts of current than the jetson, resulting in lower drops on regulator outputs). Thus, a single buck regulator is sufficient in other cases. Currently, the only other regulated power required in the system is 5V. This is required by the following components (excluding USB powered devices) MSB Acoustics system (distribution board) USB Hub All of these devices use off-the-shelf \"UBEC\" modules from Adafruit: Adafruit UBEC capable of supplying 3A of current. Note: we have tested similar looking cheaper UBECs from Amazon. These are done incorrectly and fail quickly or cannot supply sufficient current. USB Powered Devices USB power is generally only used to power devices that the Jetson directly communicates with. It is unnecessary to connect USB data without power for most such devices. Thus, the following devices are powered over USB. MEB* Acoustics FPGA All cameras (either 2 or 4; depends on whether mono or stereo vision configuration) Control Board Note that some of these devices are powered off the USB hub's UBEC. Typical USB ports on a computer (including the Jetson) are only capable of supplying 480mA to 600mA per port. Thus, when adding a 4-port hub, this cuts the power down to 25% per port on the hub. To address this, the hub is independently powered allowing more current per port on the hub. This dedicated regulator also allows the hub to supply slightly more power per device than the jetson can. Thus, high current devices (if any) should be connected to the hub, not directly to the jetson. * MEB should currently always be powered off the USB hub. The jetson's USB ports take about 30 second to power on after the jetson gets power. Thus, if connected to the jetson, it takes about 30 second for MEB to get power and boot. MEB cannot hold the system powered on until it boots, thus when MEB is connected to the jetson, the system switch must be connected and left in the ON position for about 30 seconds before removing it. In contrast, the UBEC starts and powers the USB hub (and anything connected to the hub) as soon as the system is powered on. Thus, the system switch only needs to be left in place for a few seconds at most. MOAB / FOAB Layout TODO: Image","title":"Power System"},{"location":"electrical/sysdesign/moab_power/#power-input","text":"","title":"Power Input"},{"location":"electrical/sysdesign/moab_power/#battery-input","text":"SeaWolf VIII is powered by two 4-cell (4S) LiPo batteries. Each battery is fused at 40A of current. These batteries are connected in parallel allowing for a total of 80A current draw from the batteries. However, there are some cases where connecting LiPo batteries in parallel could cause issues The LiPos are charged to different levels. In this case one would charge the other. This would not be a proper balance charge process. This could lead to fires. One battery drains faster than the other (different age, wear / tear, different cells). While this is less likely, it could lead to one battery charging the other. This could again lead to fires. To address these issues, SW8 has a \"Load Balancing Board\" used to connect the batteries in \"parallel\". The load balancing board conceptually chooses the higher voltage of the two batteries. The system is powered from that battery. When the batteries are charged equally, this effectively balances the load due to voltage drop of the battery under load. The output of the LBB is referred to as \"Vbat\" or \"battery voltage\" in the rest of the documentation. Note that if one battery is not charged or is performing poorly, this can lead to the other battery handing more load. In this case, the fused current limit is not the full 80A. However, in practice SW8 rarely pulls over 40A current (it is capable of running on a single battery if needed). Currently, there is no voltage or current monitor. However, there are plans to add individual voltage and current monitors for each battery (between LiPo and LBB). These monitors will likely be standalone modules initially, but can be integrated into LBB at a later date.","title":"Battery Input"},{"location":"electrical/sysdesign/moab_power/#power-switching","text":"There are two Solid State Relays (SSRs) used to switch power on SeaWolf VIII. The first one is the \"System Power SSR\". The output of this SSR is used to power the main system (everything except thrusters). This is unregulated voltage (battery voltage level). The second SSR is the \"Thruster Power SSR\". This switches power on and off to the thrusters. This SSR is powered through the system SSR. Thus, if the system is off the thrusters are too. However the system can be switched on with the thrusters off. This allows the thrusters to be disconnected from power when the vehicle is in the \"killed\" state. Thrusters are powered when the vehicle is in the \"armed\" state. The SSRs are controlled by the MEB. The system SSR is connected to the system power switch. This switch pulls the control line to GND to power the system on. Once the MEB boots, a GPIO holds this line LOW to keep the system on. To turn the system off, the system switch placed in the \"off\" position will pull this line high, thus turning off the SSR. See the MEB page for more details. Similarly, the MEB controls the Thruster SSR. The control signal for this, however, is not controlled by MEB software (it just runs through traces on the MEB). Normally, this control line is floating. However, the physical killswitch is connected between this line and GND. When the killswitch is closed, the line is pulled low and the thruster SSR is on. Thus the thrusters have power. When the killswitch is open, the line is floating and the thruster SSR is off. Additionally, on newer versions of MEB (v1.2+) there is a software kill switch MOSFET. This mostfet is in series with the killswitch. The MOSFET is controlled by a GPIO signal directly from the Jetson. This acts as a \"software kill\". Both the software arm (GPIO high) and hardware arm (killswitch closed) must occur for the thrster SSR to be on. Again, see the MEB page for more details.","title":"Power Switching"},{"location":"electrical/sysdesign/moab_power/#power-distribution","text":"As previously described, there are two main power domains: system power and thruster power. System power is distributed using a Powerwerx PD-8 distribution block (powerpole connectors). Power from the system power SSR is run directly into this bar. Regulators for various system components. TODO: Picture Thruster power is distributed through two \"bars\". One is simply a ground bar. The system ground is connected directly to this bar and the GND connection of the ESCs are connected to the bar. This ground bar is used only for the thrusters. There is also a fuse bar used for thruster power. The fuse bar has one fuse for each of the 8 thrusters / ESCs (currently fused at 25A). TODO: Picture","title":"Power Distribution"},{"location":"electrical/sysdesign/moab_power/#regulators","text":"SeaWolf VIII uses a distributed power regulation architecture. This allowed for early development in a modular fashion early on. However, it should be noted that the distributed architecture is becoming quite messy. It is planned to eventually move away from such an architecture.","title":"Regulators"},{"location":"electrical/sysdesign/moab_power/#jetson-power-regulators","text":"The Jetson Nano requires a 5V power supply capable of supplying 4A of current. Many such supplies exist fiarly cheap on amazon, such as this one, which we initially used. However, these supplies tend to have a high dropout voltage (eg min input is 8V for a 5V output). Old Jetson Regulator However, it was observed that arming the thrusters resulted in a current draw spike. This dropped battery voltage to about 7.6V for 100 microseconds. However, this was long enough to drop the regulator output to 3.8V and brown out the Jetson. Our initial solution to this problem was to switch to a better regulator with a lower dropout, specifically Pololu D24V50F5 . However, we were still able to brown out the Jetson because buck regulators tend to be sensative to input voltage drops. To address this, a dual stage regulator architecture was selected: First, battery voltage is regulated to 12V using a 2A SEPIC topology regulator Second, the 12V is regulated to 5V using a 4A+ Buck topology regulator The SEPIC topology is more tolerant of rapid input voltage changes, however a high current (4A) SEPIC is more difficult to find than a lower current one. Thus, 12V@2A is easier than 5V@4A (note: this is true when buying a regulator and likely also when designing one). However, since the jetson requires 5V, a 5V buck regulator is also required to supply the system with enough power. The regulators used for this are 12V@2A SEPIC: Pololu S18V20F12 5V@4A Buck: Pololu D24V50F5 Part Selection justification Justification for the compound regulator design based on graphs on product pages: Worst \u201csteady state\u201d case: Vbat = 12.8V, Icomputer = 4A Pcomputer = 5V * 4A 0= 20W P12V = Pcomputer / efficiency = 20W / 0.92 = 22W I_12V = P12V / 12V = 1.8A (less than expected 2.5A max output at this battery input) Worst \u201cpossible\u201d case: If Pcomputer = 20W and 12V regulator is only 80% efficient P12V = 20W / 0.8 = 25W I_12V = 25W / 12V = 2.08A Expected output current of 12V regulator for vbat = 8V up to 24V is at least 2.25A, thus this handles both worst cases properly given our system requirements, even during the 100 microsecond battery voltage drop to ~8V. With the dual regulator architecture described above, no meaningful voltage drops (over 0.05V) were observed on the Jetson's 5V line when arming thrusters (though battery voltage dropping to 7.6 was still observed). Notes on Voltage Drop when Arming It was also concluded that inrush current when powering the ESCs is an expected quantity. Thus, the voltage drop is not indicative of a flaw in the system. However this could indicate of poorer battery performance than advertised. At the time of testing we were using the \"old\" Turnigy Graphene 4S 10000mAH LiPo batteries. While advertised as being 15C batteries, it is suspected that they may not be or that they may not handle current spikes well. It is possible this would be less of an issue with better batteries (untested as of now). Regardless, the change in regulator architecture results in a more robust system capable of being run off a wider range of power source. Thus, it is still a worthwhile change to keep even if unnecessary in the future with potentially better batteries.","title":"Jetson Power Regulators"},{"location":"electrical/sysdesign/moab_power/#other-regulators","text":"Other systems are less sensitive to short term voltage drops (and pull lower amounts of current than the jetson, resulting in lower drops on regulator outputs). Thus, a single buck regulator is sufficient in other cases. Currently, the only other regulated power required in the system is 5V. This is required by the following components (excluding USB powered devices) MSB Acoustics system (distribution board) USB Hub All of these devices use off-the-shelf \"UBEC\" modules from Adafruit: Adafruit UBEC capable of supplying 3A of current. Note: we have tested similar looking cheaper UBECs from Amazon. These are done incorrectly and fail quickly or cannot supply sufficient current.","title":"Other Regulators"},{"location":"electrical/sysdesign/moab_power/#usb-powered-devices","text":"USB power is generally only used to power devices that the Jetson directly communicates with. It is unnecessary to connect USB data without power for most such devices. Thus, the following devices are powered over USB. MEB* Acoustics FPGA All cameras (either 2 or 4; depends on whether mono or stereo vision configuration) Control Board Note that some of these devices are powered off the USB hub's UBEC. Typical USB ports on a computer (including the Jetson) are only capable of supplying 480mA to 600mA per port. Thus, when adding a 4-port hub, this cuts the power down to 25% per port on the hub. To address this, the hub is independently powered allowing more current per port on the hub. This dedicated regulator also allows the hub to supply slightly more power per device than the jetson can. Thus, high current devices (if any) should be connected to the hub, not directly to the jetson. * MEB should currently always be powered off the USB hub. The jetson's USB ports take about 30 second to power on after the jetson gets power. Thus, if connected to the jetson, it takes about 30 second for MEB to get power and boot. MEB cannot hold the system powered on until it boots, thus when MEB is connected to the jetson, the system switch must be connected and left in the ON position for about 30 seconds before removing it. In contrast, the UBEC starts and powers the USB hub (and anything connected to the hub) as soon as the system is powered on. Thus, the system switch only needs to be left in place for a few seconds at most.","title":"USB Powered Devices"},{"location":"electrical/sysdesign/moab_power/#moab-foab-layout","text":"TODO: Image","title":"MOAB / FOAB Layout"},{"location":"electrical/sysdesign/overview/","text":"MOAB / FOAB The M other O f A ll B oards (MOAB) and F ather O f A ll B oards (FOAB) are the two copies of the electrical system use in SeaWolf VIII. MOAB and FOAB refer to the whole assembly on which the electronic system is assembled. It also serves to mean \"the whole electrical system\" for the purposes of most documentation. There are two such boards, however the two are rarely identical. The idea is that one is a stable platform (and in active use by software at pool tests) while the other is the electrical team's working platform. Once electrical team finishes making and testing changes, the working and stable platforms swap. For example, if MOAB is stable and used in the robot, a new board could be added to FOAB. Once added and verified, FOAB and MOAB would be swapped making FOAB the stable system. MOAB would then be updated to match FOAB's changes and the next set of changes would occur on MOAB. TODO: Picture System Block Diagram Last Update: 05/24/2023 by Marcus Behel History 05/24/2023: Add cameras (Marcus Behel) 03/16/2023: Initial Drawing (Marcus Behel) System Description SeaWolf VIII (SW8) is designed to use a Jetson Nano as its main computer. This computer runs mission code along with vision and machine learning algorithms. The following devices are connected to the computer via USB Main Electronics Board (MEB): The MEB handles system power and acts as a communication bridge between the Jetson and the electrical system. The Jetson communicates with the MEB via UART (over USB). The MEB connects to sensors and other parts of the electrical system via I2C. When the computer needs to use other parts of the electrical system (eg the Manipulator Systems Board or MSB to control droppers) the computer will send a message to the MEB. The MEB will then send the correct command to the MSB via I2C. For more details on the MEB itself see the MEB page. Acoustics FPGA: Currently, the computer communicates with the acoustics system via UART using the USB/UART converter builtin to the FPGA development board. Eventually, the goal is to re-design this so that the acoustics system is connected to MEB via I2C and the computer communicates with it via the MEB. For details on the acoustics system design see the Acoustics System page. Control Board: This is a motion coprocessor. The computer instructs the control board to perform a motion using a high-level description of that motion. The control board handles achieving that motion using the vehicle's thrusters. The computer talks to the control board via UART (over USB). See the Control Board page for more details. Cameras: Each camera is either a mono or stereo camera. These cameras are used for vision by mission code. See the Cameras page for details on the camera assemblies. In addition to the devices mentioned above, the following are important parts of the electrical system design Power: The MOAB / FOAB contains the power system for SeaWolf VIII. SeaWolf VIII runs off two 4-cell LiPo batteries. These batteries power the thrusters through a kill mechanism (although no voltage regulation occurs). Other systems run off regulated battery power (typically either 3.3V or 5V). See the Power System page for details. Thrusters & ESCs: SeaWolf VIII uses BlueRobotic's T200 thrusters along with their \"Basic ESC\"s. These are connected to and managed by the control board.","title":"Overview"},{"location":"electrical/sysdesign/overview/#moab-foab","text":"The M other O f A ll B oards (MOAB) and F ather O f A ll B oards (FOAB) are the two copies of the electrical system use in SeaWolf VIII. MOAB and FOAB refer to the whole assembly on which the electronic system is assembled. It also serves to mean \"the whole electrical system\" for the purposes of most documentation. There are two such boards, however the two are rarely identical. The idea is that one is a stable platform (and in active use by software at pool tests) while the other is the electrical team's working platform. Once electrical team finishes making and testing changes, the working and stable platforms swap. For example, if MOAB is stable and used in the robot, a new board could be added to FOAB. Once added and verified, FOAB and MOAB would be swapped making FOAB the stable system. MOAB would then be updated to match FOAB's changes and the next set of changes would occur on MOAB. TODO: Picture","title":"MOAB / FOAB"},{"location":"electrical/sysdesign/overview/#system-block-diagram","text":"Last Update: 05/24/2023 by Marcus Behel History 05/24/2023: Add cameras (Marcus Behel) 03/16/2023: Initial Drawing (Marcus Behel)","title":"System Block Diagram"},{"location":"electrical/sysdesign/overview/#system-description","text":"SeaWolf VIII (SW8) is designed to use a Jetson Nano as its main computer. This computer runs mission code along with vision and machine learning algorithms. The following devices are connected to the computer via USB Main Electronics Board (MEB): The MEB handles system power and acts as a communication bridge between the Jetson and the electrical system. The Jetson communicates with the MEB via UART (over USB). The MEB connects to sensors and other parts of the electrical system via I2C. When the computer needs to use other parts of the electrical system (eg the Manipulator Systems Board or MSB to control droppers) the computer will send a message to the MEB. The MEB will then send the correct command to the MSB via I2C. For more details on the MEB itself see the MEB page. Acoustics FPGA: Currently, the computer communicates with the acoustics system via UART using the USB/UART converter builtin to the FPGA development board. Eventually, the goal is to re-design this so that the acoustics system is connected to MEB via I2C and the computer communicates with it via the MEB. For details on the acoustics system design see the Acoustics System page. Control Board: This is a motion coprocessor. The computer instructs the control board to perform a motion using a high-level description of that motion. The control board handles achieving that motion using the vehicle's thrusters. The computer talks to the control board via UART (over USB). See the Control Board page for more details. Cameras: Each camera is either a mono or stereo camera. These cameras are used for vision by mission code. See the Cameras page for details on the camera assemblies. In addition to the devices mentioned above, the following are important parts of the electrical system design Power: The MOAB / FOAB contains the power system for SeaWolf VIII. SeaWolf VIII runs off two 4-cell LiPo batteries. These batteries power the thrusters through a kill mechanism (although no voltage regulation occurs). Other systems run off regulated battery power (typically either 3.3V or 5V). See the Power System page for details. Thrusters & ESCs: SeaWolf VIII uses BlueRobotic's T200 thrusters along with their \"Basic ESC\"s. These are connected to and managed by the control board.","title":"System Description"},{"location":"mechanical/overview/","text":"TODO: Mechanical design overview","title":"Overview"},{"location":"software/overview/","text":"TODO: Software overview","title":"Overview"}]}